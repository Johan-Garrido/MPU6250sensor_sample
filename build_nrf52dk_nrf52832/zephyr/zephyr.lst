
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000ba0 	.word	0x20000ba0
}
   4:	000024e5 	.word	0x000024e5
   8:	00004f3f 	.word	0x00004f3f
   c:	00002515 	.word	0x00002515
  10:	00002515 	.word	0x00002515
  14:	00002515 	.word	0x00002515
  18:	00002515 	.word	0x00002515
	...
  2c:	00002441 	.word	0x00002441
  30:	00002515 	.word	0x00002515
  34:	00000000 	.word	0x00000000
  38:	000023ed 	.word	0x000023ed
  3c:	00004f19 	.word	0x00004f19

00000040 <_irq_vector_table>:
  40:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  50:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  60:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  70:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  80:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  90:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  a0:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  b0:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  c0:	000024a5 000024a5 000024a5 000024a5     .$...$...$...$..
  d0:	000024a5 000024a5 000024a5              .$...$...$..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <__aeabi_dmul+0x1dc>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <__aeabi_dmul+0x238>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <__aeabi_dmul+0x1c2>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <__aeabi_dmul+0x1a6>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1c6>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <__aeabi_dmul+0x206>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <__aeabi_dmul+0x19c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <__aeabi_dmul+0x24a>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <__aeabi_dmul+0x222>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <__aeabi_dmul+0x24a>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <__aeabi_dmul+0x234>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <__aeabi_dmul+0x24a>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <__aeabi_dmul+0x24a>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <__aeabi_dmul+0x24a>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <__aeabi_dmul+0x234>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <__aeabi_dmul+0x24a>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <__aeabi_dmul+0x1f8>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <__aeabi_dmul+0x24a>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <__aeabi_dmul+0x19c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <__aeabi_dmul+0x234>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <__aeabi_dmul+0x1f8>
     87a:	e712      	b.n	6a2 <__aeabi_dmul+0x24a>

0000087c <__aeabi_d2f>:
     87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     884:	bf24      	itt	cs
     886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     88a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     88e:	d90d      	bls.n	8ac <__aeabi_d2f+0x30>
     890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     89c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8a4:	bf08      	it	eq
     8a6:	f020 0001 	biceq.w	r0, r0, #1
     8aa:	4770      	bx	lr
     8ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8b0:	d121      	bne.n	8f6 <__aeabi_d2f+0x7a>
     8b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8b6:	bfbc      	itt	lt
     8b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8bc:	4770      	bxlt	lr
     8be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8c6:	f1c2 0218 	rsb	r2, r2, #24
     8ca:	f1c2 0c20 	rsb	ip, r2, #32
     8ce:	fa10 f30c 	lsls.w	r3, r0, ip
     8d2:	fa20 f002 	lsr.w	r0, r0, r2
     8d6:	bf18      	it	ne
     8d8:	f040 0001 	orrne.w	r0, r0, #1
     8dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     8e4:	fa03 fc0c 	lsl.w	ip, r3, ip
     8e8:	ea40 000c 	orr.w	r0, r0, ip
     8ec:	fa23 f302 	lsr.w	r3, r3, r2
     8f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     8f4:	e7cc      	b.n	890 <__aeabi_d2f+0x14>
     8f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     8fa:	d107      	bne.n	90c <__aeabi_d2f+0x90>
     8fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     900:	bf1e      	ittt	ne
     902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     90a:	4770      	bxne	lr
     90c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <__aeabi_uldivmod>:
     91c:	b953      	cbnz	r3, 934 <__aeabi_uldivmod+0x18>
     91e:	b94a      	cbnz	r2, 934 <__aeabi_uldivmod+0x18>
     920:	2900      	cmp	r1, #0
     922:	bf08      	it	eq
     924:	2800      	cmpeq	r0, #0
     926:	bf1c      	itt	ne
     928:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     92c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     930:	f000 b96c 	b.w	c0c <__aeabi_idiv0>
     934:	f1ad 0c08 	sub.w	ip, sp, #8
     938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     93c:	f000 f806 	bl	94c <__udivmoddi4>
     940:	f8dd e004 	ldr.w	lr, [sp, #4]
     944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     948:	b004      	add	sp, #16
     94a:	4770      	bx	lr

0000094c <__udivmoddi4>:
     94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     950:	9e08      	ldr	r6, [sp, #32]
     952:	460d      	mov	r5, r1
     954:	4604      	mov	r4, r0
     956:	468e      	mov	lr, r1
     958:	2b00      	cmp	r3, #0
     95a:	f040 8082 	bne.w	a62 <__udivmoddi4+0x116>
     95e:	428a      	cmp	r2, r1
     960:	4617      	mov	r7, r2
     962:	d946      	bls.n	9f2 <__udivmoddi4+0xa6>
     964:	fab2 f282 	clz	r2, r2
     968:	b14a      	cbz	r2, 97e <__udivmoddi4+0x32>
     96a:	f1c2 0120 	rsb	r1, r2, #32
     96e:	fa05 f302 	lsl.w	r3, r5, r2
     972:	fa20 f101 	lsr.w	r1, r0, r1
     976:	4097      	lsls	r7, r2
     978:	ea41 0e03 	orr.w	lr, r1, r3
     97c:	4094      	lsls	r4, r2
     97e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     982:	0c23      	lsrs	r3, r4, #16
     984:	fbbe fcf8 	udiv	ip, lr, r8
     988:	b2b9      	uxth	r1, r7
     98a:	fb08 ee1c 	mls	lr, r8, ip, lr
     98e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     992:	fb0c f001 	mul.w	r0, ip, r1
     996:	4298      	cmp	r0, r3
     998:	d90a      	bls.n	9b0 <__udivmoddi4+0x64>
     99a:	18fb      	adds	r3, r7, r3
     99c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     9a0:	f080 8116 	bcs.w	bd0 <__udivmoddi4+0x284>
     9a4:	4298      	cmp	r0, r3
     9a6:	f240 8113 	bls.w	bd0 <__udivmoddi4+0x284>
     9aa:	f1ac 0c02 	sub.w	ip, ip, #2
     9ae:	443b      	add	r3, r7
     9b0:	1a1b      	subs	r3, r3, r0
     9b2:	b2a4      	uxth	r4, r4
     9b4:	fbb3 f0f8 	udiv	r0, r3, r8
     9b8:	fb08 3310 	mls	r3, r8, r0, r3
     9bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9c0:	fb00 f101 	mul.w	r1, r0, r1
     9c4:	42a1      	cmp	r1, r4
     9c6:	d909      	bls.n	9dc <__udivmoddi4+0x90>
     9c8:	193c      	adds	r4, r7, r4
     9ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     9ce:	f080 8101 	bcs.w	bd4 <__udivmoddi4+0x288>
     9d2:	42a1      	cmp	r1, r4
     9d4:	f240 80fe 	bls.w	bd4 <__udivmoddi4+0x288>
     9d8:	3802      	subs	r0, #2
     9da:	443c      	add	r4, r7
     9dc:	1a64      	subs	r4, r4, r1
     9de:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9e2:	2100      	movs	r1, #0
     9e4:	b11e      	cbz	r6, 9ee <__udivmoddi4+0xa2>
     9e6:	40d4      	lsrs	r4, r2
     9e8:	2300      	movs	r3, #0
     9ea:	e9c6 4300 	strd	r4, r3, [r6]
     9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9f2:	b902      	cbnz	r2, 9f6 <__udivmoddi4+0xaa>
     9f4:	deff      	udf	#255	; 0xff
     9f6:	fab2 f282 	clz	r2, r2
     9fa:	2a00      	cmp	r2, #0
     9fc:	d14f      	bne.n	a9e <__udivmoddi4+0x152>
     9fe:	1bcb      	subs	r3, r1, r7
     a00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a04:	fa1f f887 	uxth.w	r8, r7
     a08:	2101      	movs	r1, #1
     a0a:	fbb3 fcfe 	udiv	ip, r3, lr
     a0e:	0c25      	lsrs	r5, r4, #16
     a10:	fb0e 331c 	mls	r3, lr, ip, r3
     a14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a18:	fb08 f30c 	mul.w	r3, r8, ip
     a1c:	42ab      	cmp	r3, r5
     a1e:	d907      	bls.n	a30 <__udivmoddi4+0xe4>
     a20:	197d      	adds	r5, r7, r5
     a22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a26:	d202      	bcs.n	a2e <__udivmoddi4+0xe2>
     a28:	42ab      	cmp	r3, r5
     a2a:	f200 80e7 	bhi.w	bfc <__udivmoddi4+0x2b0>
     a2e:	4684      	mov	ip, r0
     a30:	1aed      	subs	r5, r5, r3
     a32:	b2a3      	uxth	r3, r4
     a34:	fbb5 f0fe 	udiv	r0, r5, lr
     a38:	fb0e 5510 	mls	r5, lr, r0, r5
     a3c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a40:	fb08 f800 	mul.w	r8, r8, r0
     a44:	45a0      	cmp	r8, r4
     a46:	d907      	bls.n	a58 <__udivmoddi4+0x10c>
     a48:	193c      	adds	r4, r7, r4
     a4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     a4e:	d202      	bcs.n	a56 <__udivmoddi4+0x10a>
     a50:	45a0      	cmp	r8, r4
     a52:	f200 80d7 	bhi.w	c04 <__udivmoddi4+0x2b8>
     a56:	4618      	mov	r0, r3
     a58:	eba4 0408 	sub.w	r4, r4, r8
     a5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a60:	e7c0      	b.n	9e4 <__udivmoddi4+0x98>
     a62:	428b      	cmp	r3, r1
     a64:	d908      	bls.n	a78 <__udivmoddi4+0x12c>
     a66:	2e00      	cmp	r6, #0
     a68:	f000 80af 	beq.w	bca <__udivmoddi4+0x27e>
     a6c:	2100      	movs	r1, #0
     a6e:	e9c6 0500 	strd	r0, r5, [r6]
     a72:	4608      	mov	r0, r1
     a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a78:	fab3 f183 	clz	r1, r3
     a7c:	2900      	cmp	r1, #0
     a7e:	d14b      	bne.n	b18 <__udivmoddi4+0x1cc>
     a80:	42ab      	cmp	r3, r5
     a82:	d302      	bcc.n	a8a <__udivmoddi4+0x13e>
     a84:	4282      	cmp	r2, r0
     a86:	f200 80b7 	bhi.w	bf8 <__udivmoddi4+0x2ac>
     a8a:	1a84      	subs	r4, r0, r2
     a8c:	eb65 0303 	sbc.w	r3, r5, r3
     a90:	2001      	movs	r0, #1
     a92:	469e      	mov	lr, r3
     a94:	2e00      	cmp	r6, #0
     a96:	d0aa      	beq.n	9ee <__udivmoddi4+0xa2>
     a98:	e9c6 4e00 	strd	r4, lr, [r6]
     a9c:	e7a7      	b.n	9ee <__udivmoddi4+0xa2>
     a9e:	f1c2 0c20 	rsb	ip, r2, #32
     aa2:	fa01 f302 	lsl.w	r3, r1, r2
     aa6:	4097      	lsls	r7, r2
     aa8:	fa20 f00c 	lsr.w	r0, r0, ip
     aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ab0:	fa21 fc0c 	lsr.w	ip, r1, ip
     ab4:	4318      	orrs	r0, r3
     ab6:	fbbc f1fe 	udiv	r1, ip, lr
     aba:	0c05      	lsrs	r5, r0, #16
     abc:	fb0e cc11 	mls	ip, lr, r1, ip
     ac0:	fa1f f887 	uxth.w	r8, r7
     ac4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     ac8:	fb01 f308 	mul.w	r3, r1, r8
     acc:	42ab      	cmp	r3, r5
     ace:	fa04 f402 	lsl.w	r4, r4, r2
     ad2:	d909      	bls.n	ae8 <__udivmoddi4+0x19c>
     ad4:	197d      	adds	r5, r7, r5
     ad6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     ada:	f080 808b 	bcs.w	bf4 <__udivmoddi4+0x2a8>
     ade:	42ab      	cmp	r3, r5
     ae0:	f240 8088 	bls.w	bf4 <__udivmoddi4+0x2a8>
     ae4:	3902      	subs	r1, #2
     ae6:	443d      	add	r5, r7
     ae8:	1aeb      	subs	r3, r5, r3
     aea:	b285      	uxth	r5, r0
     aec:	fbb3 f0fe 	udiv	r0, r3, lr
     af0:	fb0e 3310 	mls	r3, lr, r0, r3
     af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     af8:	fb00 f308 	mul.w	r3, r0, r8
     afc:	42ab      	cmp	r3, r5
     afe:	d907      	bls.n	b10 <__udivmoddi4+0x1c4>
     b00:	197d      	adds	r5, r7, r5
     b02:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     b06:	d271      	bcs.n	bec <__udivmoddi4+0x2a0>
     b08:	42ab      	cmp	r3, r5
     b0a:	d96f      	bls.n	bec <__udivmoddi4+0x2a0>
     b0c:	3802      	subs	r0, #2
     b0e:	443d      	add	r5, r7
     b10:	1aeb      	subs	r3, r5, r3
     b12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b16:	e778      	b.n	a0a <__udivmoddi4+0xbe>
     b18:	f1c1 0c20 	rsb	ip, r1, #32
     b1c:	408b      	lsls	r3, r1
     b1e:	fa22 f70c 	lsr.w	r7, r2, ip
     b22:	431f      	orrs	r7, r3
     b24:	fa20 f40c 	lsr.w	r4, r0, ip
     b28:	fa05 f301 	lsl.w	r3, r5, r1
     b2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b30:	fa25 f50c 	lsr.w	r5, r5, ip
     b34:	431c      	orrs	r4, r3
     b36:	0c23      	lsrs	r3, r4, #16
     b38:	fbb5 f9fe 	udiv	r9, r5, lr
     b3c:	fa1f f887 	uxth.w	r8, r7
     b40:	fb0e 5519 	mls	r5, lr, r9, r5
     b44:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b48:	fb09 fa08 	mul.w	sl, r9, r8
     b4c:	45aa      	cmp	sl, r5
     b4e:	fa02 f201 	lsl.w	r2, r2, r1
     b52:	fa00 f301 	lsl.w	r3, r0, r1
     b56:	d908      	bls.n	b6a <__udivmoddi4+0x21e>
     b58:	197d      	adds	r5, r7, r5
     b5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     b5e:	d247      	bcs.n	bf0 <__udivmoddi4+0x2a4>
     b60:	45aa      	cmp	sl, r5
     b62:	d945      	bls.n	bf0 <__udivmoddi4+0x2a4>
     b64:	f1a9 0902 	sub.w	r9, r9, #2
     b68:	443d      	add	r5, r7
     b6a:	eba5 050a 	sub.w	r5, r5, sl
     b6e:	b2a4      	uxth	r4, r4
     b70:	fbb5 f0fe 	udiv	r0, r5, lr
     b74:	fb0e 5510 	mls	r5, lr, r0, r5
     b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b7c:	fb00 f808 	mul.w	r8, r0, r8
     b80:	45a0      	cmp	r8, r4
     b82:	d907      	bls.n	b94 <__udivmoddi4+0x248>
     b84:	193c      	adds	r4, r7, r4
     b86:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     b8a:	d22d      	bcs.n	be8 <__udivmoddi4+0x29c>
     b8c:	45a0      	cmp	r8, r4
     b8e:	d92b      	bls.n	be8 <__udivmoddi4+0x29c>
     b90:	3802      	subs	r0, #2
     b92:	443c      	add	r4, r7
     b94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b98:	eba4 0408 	sub.w	r4, r4, r8
     b9c:	fba0 8902 	umull	r8, r9, r0, r2
     ba0:	454c      	cmp	r4, r9
     ba2:	46c6      	mov	lr, r8
     ba4:	464d      	mov	r5, r9
     ba6:	d319      	bcc.n	bdc <__udivmoddi4+0x290>
     ba8:	d016      	beq.n	bd8 <__udivmoddi4+0x28c>
     baa:	b15e      	cbz	r6, bc4 <__udivmoddi4+0x278>
     bac:	ebb3 020e 	subs.w	r2, r3, lr
     bb0:	eb64 0405 	sbc.w	r4, r4, r5
     bb4:	fa04 fc0c 	lsl.w	ip, r4, ip
     bb8:	40ca      	lsrs	r2, r1
     bba:	ea4c 0202 	orr.w	r2, ip, r2
     bbe:	40cc      	lsrs	r4, r1
     bc0:	e9c6 2400 	strd	r2, r4, [r6]
     bc4:	2100      	movs	r1, #0
     bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bca:	4631      	mov	r1, r6
     bcc:	4630      	mov	r0, r6
     bce:	e70e      	b.n	9ee <__udivmoddi4+0xa2>
     bd0:	46ac      	mov	ip, r5
     bd2:	e6ed      	b.n	9b0 <__udivmoddi4+0x64>
     bd4:	4618      	mov	r0, r3
     bd6:	e701      	b.n	9dc <__udivmoddi4+0x90>
     bd8:	4543      	cmp	r3, r8
     bda:	d2e6      	bcs.n	baa <__udivmoddi4+0x25e>
     bdc:	ebb8 0e02 	subs.w	lr, r8, r2
     be0:	eb69 0507 	sbc.w	r5, r9, r7
     be4:	3801      	subs	r0, #1
     be6:	e7e0      	b.n	baa <__udivmoddi4+0x25e>
     be8:	4628      	mov	r0, r5
     bea:	e7d3      	b.n	b94 <__udivmoddi4+0x248>
     bec:	4660      	mov	r0, ip
     bee:	e78f      	b.n	b10 <__udivmoddi4+0x1c4>
     bf0:	4681      	mov	r9, r0
     bf2:	e7ba      	b.n	b6a <__udivmoddi4+0x21e>
     bf4:	4661      	mov	r1, ip
     bf6:	e777      	b.n	ae8 <__udivmoddi4+0x19c>
     bf8:	4608      	mov	r0, r1
     bfa:	e74b      	b.n	a94 <__udivmoddi4+0x148>
     bfc:	f1ac 0c02 	sub.w	ip, ip, #2
     c00:	443d      	add	r5, r7
     c02:	e715      	b.n	a30 <__udivmoddi4+0xe4>
     c04:	3802      	subs	r0, #2
     c06:	443c      	add	r4, r7
     c08:	e726      	b.n	a58 <__udivmoddi4+0x10c>
     c0a:	bf00      	nop

00000c0c <__aeabi_idiv0>:
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop

00000c10 <input_read>:
  float GyZ;
  float Temp;
  }i2cData;


void input_read(i2cData *sensorData){
     c10:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t data[14]; // Buffer to transmit data in I2C protocol
  data[0] = 0x3B; // Starting with register 0x3B (ACCEL_XOUT_H)
 
  i2c_write(mpu6050, data, 1, MPU_addr);  
     c12:	4e6d      	ldr	r6, [pc, #436]	; (dc8 <input_read+0x1b8>)
void input_read(i2cData *sensorData){
     c14:	b089      	sub	sp, #36	; 0x24
  i2c_write(mpu6050, data, 1, MPU_addr);  
     c16:	ad04      	add	r5, sp, #16
  data[0] = 0x3B; // Starting with register 0x3B (ACCEL_XOUT_H)
     c18:	233b      	movs	r3, #59	; 0x3b
void input_read(i2cData *sensorData){
     c1a:	4604      	mov	r4, r0
  i2c_write(mpu6050, data, 1, MPU_addr);  
     c1c:	2201      	movs	r2, #1
     c1e:	6830      	ldr	r0, [r6, #0]
  data[0] = 0x3B; // Starting with register 0x3B (ACCEL_XOUT_H)
     c20:	f88d 3010 	strb.w	r3, [sp, #16]
  i2c_write(mpu6050, data, 1, MPU_addr);  
     c24:	4629      	mov	r1, r5
     c26:	f003 fe6d 	bl	4904 <i2c_write.constprop.0>
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
     c2a:	230e      	movs	r3, #14
     c2c:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     c2e:	2303      	movs	r3, #3
  i2c_read(mpu6050, data, 14, MPU_addr);
     c30:	6830      	ldr	r0, [r6, #0]
	msg.buf = buf;
     c32:	9501      	str	r5, [sp, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     c34:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
     c38:	6883      	ldr	r3, [r0, #8]
     c3a:	2201      	movs	r2, #1
     c3c:	685d      	ldr	r5, [r3, #4]
     c3e:	a901      	add	r1, sp, #4
     c40:	2368      	movs	r3, #104	; 0x68
     c42:	47a8      	blx	r5

  sensorData->AcX = ((double)data[0])+((double)(data[1]) / 1000000); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
     c44:	f99d 0011 	ldrsb.w	r0, [sp, #17]
     c48:	f7ff fb9c 	bl	384 <__aeabi_i2d>
     c4c:	a35a      	add	r3, pc, #360	; (adr r3, db8 <input_read+0x1a8>)
     c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c52:	f7ff fd2b 	bl	6ac <__aeabi_ddiv>
     c56:	4606      	mov	r6, r0
     c58:	f99d 0010 	ldrsb.w	r0, [sp, #16]
     c5c:	460f      	mov	r7, r1
     c5e:	f7ff fb91 	bl	384 <__aeabi_i2d>
     c62:	4602      	mov	r2, r0
     c64:	460b      	mov	r3, r1
     c66:	4630      	mov	r0, r6
     c68:	4639      	mov	r1, r7
     c6a:	f7ff fa3f 	bl	ec <__adddf3>
     c6e:	f7ff fe05 	bl	87c <__aeabi_d2f>
     c72:	6020      	str	r0, [r4, #0]
  sensorData->AcY = ((double)data[2])+((double)(data[3]) / 1000000); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT
     c74:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     c78:	f7ff fb84 	bl	384 <__aeabi_i2d>
     c7c:	a34e      	add	r3, pc, #312	; (adr r3, db8 <input_read+0x1a8>)
     c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
     c82:	f7ff fd13 	bl	6ac <__aeabi_ddiv>
     c86:	4606      	mov	r6, r0
     c88:	f99d 0012 	ldrsb.w	r0, [sp, #18]
     c8c:	460f      	mov	r7, r1
     c8e:	f7ff fb79 	bl	384 <__aeabi_i2d>
     c92:	4602      	mov	r2, r0
     c94:	460b      	mov	r3, r1
     c96:	4630      	mov	r0, r6
     c98:	4639      	mov	r1, r7
     c9a:	f7ff fa27 	bl	ec <__adddf3>
     c9e:	f7ff fded 	bl	87c <__aeabi_d2f>
     ca2:	6060      	str	r0, [r4, #4]
  sensorData->AcZ = ((double)data[4])+((double)(data[5]) / 1000000); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
     ca4:	f99d 0015 	ldrsb.w	r0, [sp, #21]
     ca8:	f7ff fb6c 	bl	384 <__aeabi_i2d>
     cac:	a342      	add	r3, pc, #264	; (adr r3, db8 <input_read+0x1a8>)
     cae:	e9d3 2300 	ldrd	r2, r3, [r3]
     cb2:	f7ff fcfb 	bl	6ac <__aeabi_ddiv>
     cb6:	4606      	mov	r6, r0
     cb8:	f99d 0014 	ldrsb.w	r0, [sp, #20]
     cbc:	460f      	mov	r7, r1
     cbe:	f7ff fb61 	bl	384 <__aeabi_i2d>
     cc2:	4602      	mov	r2, r0
     cc4:	460b      	mov	r3, r1
     cc6:	4630      	mov	r0, r6
     cc8:	4639      	mov	r1, r7
     cca:	f7ff fa0f 	bl	ec <__adddf3>
     cce:	f7ff fdd5 	bl	87c <__aeabi_d2f>
     cd2:	60a0      	str	r0, [r4, #8]
  sensorData->Temp = (((((double)data[6])+((double)(data[7]) / 1000000)) + 521 ) + (35 * 340)) / 340; // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
     cd4:	f99d 0017 	ldrsb.w	r0, [sp, #23]
     cd8:	f7ff fb54 	bl	384 <__aeabi_i2d>
     cdc:	a336      	add	r3, pc, #216	; (adr r3, db8 <input_read+0x1a8>)
     cde:	e9d3 2300 	ldrd	r2, r3, [r3]
     ce2:	f7ff fce3 	bl	6ac <__aeabi_ddiv>
     ce6:	4606      	mov	r6, r0
     ce8:	f99d 0016 	ldrsb.w	r0, [sp, #22]
     cec:	460f      	mov	r7, r1
     cee:	f7ff fb49 	bl	384 <__aeabi_i2d>
     cf2:	4602      	mov	r2, r0
     cf4:	460b      	mov	r3, r1
     cf6:	4630      	mov	r0, r6
     cf8:	4639      	mov	r1, r7
     cfa:	f7ff f9f7 	bl	ec <__adddf3>
     cfe:	4b33      	ldr	r3, [pc, #204]	; (dcc <input_read+0x1bc>)
     d00:	2200      	movs	r2, #0
     d02:	f7ff f9f3 	bl	ec <__adddf3>
     d06:	a32e      	add	r3, pc, #184	; (adr r3, dc0 <input_read+0x1b0>)
     d08:	e9d3 2300 	ldrd	r2, r3, [r3]
     d0c:	f7ff f9ee 	bl	ec <__adddf3>
     d10:	4b2f      	ldr	r3, [pc, #188]	; (dd0 <input_read+0x1c0>)
     d12:	2200      	movs	r2, #0
     d14:	f7ff fcca 	bl	6ac <__aeabi_ddiv>
     d18:	f7ff fdb0 	bl	87c <__aeabi_d2f>
     d1c:	61a0      	str	r0, [r4, #24]
  sensorData->GyX = ((double)data[8])+((double)(data[9]) / 1000000); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
     d1e:	f99d 0019 	ldrsb.w	r0, [sp, #25]
     d22:	f7ff fb2f 	bl	384 <__aeabi_i2d>
     d26:	a324      	add	r3, pc, #144	; (adr r3, db8 <input_read+0x1a8>)
     d28:	e9d3 2300 	ldrd	r2, r3, [r3]
     d2c:	f7ff fcbe 	bl	6ac <__aeabi_ddiv>
     d30:	4606      	mov	r6, r0
     d32:	f99d 0018 	ldrsb.w	r0, [sp, #24]
     d36:	460f      	mov	r7, r1
     d38:	f7ff fb24 	bl	384 <__aeabi_i2d>
     d3c:	4602      	mov	r2, r0
     d3e:	460b      	mov	r3, r1
     d40:	4630      	mov	r0, r6
     d42:	4639      	mov	r1, r7
     d44:	f7ff f9d2 	bl	ec <__adddf3>
     d48:	f7ff fd98 	bl	87c <__aeabi_d2f>
     d4c:	60e0      	str	r0, [r4, #12]
  sensorData->GyY = ((double)data[10])+((double)(data[11]) / 1000000); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
     d4e:	f99d 001b 	ldrsb.w	r0, [sp, #27]
     d52:	f7ff fb17 	bl	384 <__aeabi_i2d>
     d56:	a318      	add	r3, pc, #96	; (adr r3, db8 <input_read+0x1a8>)
     d58:	e9d3 2300 	ldrd	r2, r3, [r3]
     d5c:	f7ff fca6 	bl	6ac <__aeabi_ddiv>
     d60:	4606      	mov	r6, r0
     d62:	f99d 001a 	ldrsb.w	r0, [sp, #26]
     d66:	460f      	mov	r7, r1
     d68:	f7ff fb0c 	bl	384 <__aeabi_i2d>
     d6c:	4602      	mov	r2, r0
     d6e:	460b      	mov	r3, r1
     d70:	4630      	mov	r0, r6
     d72:	4639      	mov	r1, r7
     d74:	f7ff f9ba 	bl	ec <__adddf3>
     d78:	f7ff fd80 	bl	87c <__aeabi_d2f>
     d7c:	6120      	str	r0, [r4, #16]
  sensorData->GyZ = ((double)data[12])+((double)(data[13]) / 1000000); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
     d7e:	f99d 001d 	ldrsb.w	r0, [sp, #29]
     d82:	f7ff faff 	bl	384 <__aeabi_i2d>
     d86:	a30c      	add	r3, pc, #48	; (adr r3, db8 <input_read+0x1a8>)
     d88:	e9d3 2300 	ldrd	r2, r3, [r3]
     d8c:	f7ff fc8e 	bl	6ac <__aeabi_ddiv>
     d90:	4606      	mov	r6, r0
     d92:	f99d 001c 	ldrsb.w	r0, [sp, #28]
     d96:	460f      	mov	r7, r1
     d98:	f7ff faf4 	bl	384 <__aeabi_i2d>
     d9c:	4602      	mov	r2, r0
     d9e:	460b      	mov	r3, r1
     da0:	4630      	mov	r0, r6
     da2:	4639      	mov	r1, r7
     da4:	f7ff f9a2 	bl	ec <__adddf3>
     da8:	f7ff fd68 	bl	87c <__aeabi_d2f>
     dac:	6160      	str	r0, [r4, #20]
}
     dae:	b009      	add	sp, #36	; 0x24
     db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     db2:	bf00      	nop
     db4:	f3af 8000 	nop.w
     db8:	00000000 	.word	0x00000000
     dbc:	412e8480 	.word	0x412e8480
     dc0:	00000000 	.word	0x00000000
     dc4:	40c73e00 	.word	0x40c73e00
     dc8:	200001a8 	.word	0x200001a8
     dcc:	40804800 	.word	0x40804800
     dd0:	40754000 	.word	0x40754000

00000dd4 <init_mpu>:
//Function created to initialize the communitaction I2C between the board and MPU-6050 
void init_mpu(){
     dd4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data[2];
  data[0] = 0x6B; // PWR_MGMT_1 register
     dd6:	236b      	movs	r3, #107	; 0x6b
     dd8:	f8ad 3004 	strh.w	r3, [sp, #4]
  data[1] = 0x00; // Wakes up the MPU-6050
  i2c_write(mpu6050, data, 2, MPU_addr);
     ddc:	4b04      	ldr	r3, [pc, #16]	; (df0 <init_mpu+0x1c>)
     dde:	2202      	movs	r2, #2
     de0:	6818      	ldr	r0, [r3, #0]
     de2:	a901      	add	r1, sp, #4
     de4:	f003 fd8e 	bl	4904 <i2c_write.constprop.0>
}
     de8:	b003      	add	sp, #12
     dea:	f85d fb04 	ldr.w	pc, [sp], #4
     dee:	bf00      	nop
     df0:	200001a8 	.word	0x200001a8

00000df4 <main>:

void main(void)
{
     df4:	b570      	push	{r4, r5, r6, lr}
     df6:	b094      	sub	sp, #80	; 0x50
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     df8:	481f      	ldr	r0, [pc, #124]	; (e78 <main+0x84>)
     dfa:	f002 feab 	bl	3b54 <z_impl_device_get_binding>
  struct i2cData sensorData;  
  mpu6050 = device_get_binding("I2C_0");
     dfe:	4b1f      	ldr	r3, [pc, #124]	; (e7c <main+0x88>)
     e00:	6018      	str	r0, [r3, #0]

  if (!mpu6050) {
     e02:	b920      	cbnz	r0, e0e <main+0x1a>
    printf("Failed to find sensor I2C\n");
     e04:	481e      	ldr	r0, [pc, #120]	; (e80 <main+0x8c>)
     e06:	f001 fd93 	bl	2930 <printf>
      sensorData.GyX,
      sensorData.GyY,
      sensorData.GyZ);
     k_sleep(K_SECONDS(2));
  }
}
     e0a:	b014      	add	sp, #80	; 0x50
     e0c:	bd70      	pop	{r4, r5, r6, pc}
    init_mpu();
     e0e:	f7ff ffe1 	bl	dd4 <init_mpu>
    printf("Data: %f Cel\n"
     e12:	4e1c      	ldr	r6, [pc, #112]	; (e84 <main+0x90>)
    input_read(&sensorData);
     e14:	a80d      	add	r0, sp, #52	; 0x34
     e16:	f7ff fefb 	bl	c10 <input_read>
    printf("Data: %f Cel\n"
     e1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
     e1c:	f7ff fac4 	bl	3a8 <__aeabi_f2d>
     e20:	4604      	mov	r4, r0
     e22:	9812      	ldr	r0, [sp, #72]	; 0x48
     e24:	460d      	mov	r5, r1
     e26:	f7ff fabf 	bl	3a8 <__aeabi_f2d>
     e2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     e2e:	9811      	ldr	r0, [sp, #68]	; 0x44
     e30:	f7ff faba 	bl	3a8 <__aeabi_f2d>
     e34:	e9cd 0108 	strd	r0, r1, [sp, #32]
     e38:	9810      	ldr	r0, [sp, #64]	; 0x40
     e3a:	f7ff fab5 	bl	3a8 <__aeabi_f2d>
     e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
     e42:	980f      	ldr	r0, [sp, #60]	; 0x3c
     e44:	f7ff fab0 	bl	3a8 <__aeabi_f2d>
     e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
     e4c:	980e      	ldr	r0, [sp, #56]	; 0x38
     e4e:	f7ff faab 	bl	3a8 <__aeabi_f2d>
     e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
     e56:	980d      	ldr	r0, [sp, #52]	; 0x34
     e58:	f7ff faa6 	bl	3a8 <__aeabi_f2d>
     e5c:	4622      	mov	r2, r4
     e5e:	e9cd 0100 	strd	r0, r1, [sp]
     e62:	462b      	mov	r3, r5
     e64:	4630      	mov	r0, r6
     e66:	f001 fd63 	bl	2930 <printf>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     e6a:	2100      	movs	r1, #0
     e6c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     e70:	f003 fac4 	bl	43fc <z_impl_k_sleep>
  while(1){
     e74:	e7ce      	b.n	e14 <main+0x20>
     e76:	bf00      	nop
     e78:	000057f8 	.word	0x000057f8
     e7c:	200001a8 	.word	0x200001a8
     e80:	000057fe 	.word	0x000057fe
     e84:	00005819 	.word	0x00005819

00000e88 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     e88:	680b      	ldr	r3, [r1, #0]
     e8a:	3301      	adds	r3, #1
     e8c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     e8e:	4b01      	ldr	r3, [pc, #4]	; (e94 <char_out+0xc>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	4718      	bx	r3
     e94:	20000000 	.word	0x20000000

00000e98 <__printk_hook_install>:
	_char_out = fn;
     e98:	4b01      	ldr	r3, [pc, #4]	; (ea0 <__printk_hook_install+0x8>)
     e9a:	6018      	str	r0, [r3, #0]
}
     e9c:	4770      	bx	lr
     e9e:	bf00      	nop
     ea0:	20000000 	.word	0x20000000

00000ea4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     ea4:	b507      	push	{r0, r1, r2, lr}
     ea6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     ea8:	2100      	movs	r1, #0
{
     eaa:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     eac:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     eae:	4803      	ldr	r0, [pc, #12]	; (ebc <vprintk+0x18>)
     eb0:	a901      	add	r1, sp, #4
     eb2:	f000 fa63 	bl	137c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     eb6:	b003      	add	sp, #12
     eb8:	f85d fb04 	ldr.w	pc, [sp], #4
     ebc:	00000e89 	.word	0x00000e89

00000ec0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ec4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     ec8:	f019 0808 	ands.w	r8, r9, #8
{
     ecc:	4604      	mov	r4, r0
     ece:	4693      	mov	fp, r2
	if (processing) {
     ed0:	d00d      	beq.n	eee <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     ed2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ed4:	bf0c      	ite	eq
     ed6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     eda:	f049 0920 	orrne.w	r9, r9, #32
     ede:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     ee2:	f38b 8811 	msr	BASEPRI, fp
     ee6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     eee:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     ef2:	2902      	cmp	r1, #2
     ef4:	d107      	bne.n	f06 <process_event+0x46>
			evt = process_recheck(mgr);
     ef6:	4620      	mov	r0, r4
     ef8:	f003 fd3f 	bl	497a <process_recheck>
		if (evt == EVT_NOP) {
     efc:	2800      	cmp	r0, #0
     efe:	d0f0      	beq.n	ee2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     f00:	2801      	cmp	r0, #1
     f02:	8b23      	ldrh	r3, [r4, #24]
     f04:	d150      	bne.n	fa8 <process_event+0xe8>
			res = mgr->last_res;
     f06:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f08:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     f0a:	2f00      	cmp	r7, #0
     f0c:	da15      	bge.n	f3a <process_event+0x7a>
		*clients = mgr->clients;
     f0e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f10:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     f14:	e9c4 8800 	strd	r8, r8, [r4]
     f18:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f1c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     f1e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f20:	8b21      	ldrh	r1, [r4, #24]
     f22:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f26:	45ca      	cmp	sl, r9
     f28:	d002      	beq.n	f30 <process_event+0x70>
		if (do_monitors
     f2a:	68a3      	ldr	r3, [r4, #8]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d15c      	bne.n	fea <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     f30:	b90d      	cbnz	r5, f36 <process_event+0x76>
		    || (transit != NULL)) {
     f32:	2e00      	cmp	r6, #0
     f34:	d074      	beq.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     f36:	2300      	movs	r3, #0
     f38:	e058      	b.n	fec <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f3a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     f3e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     f40:	2a01      	cmp	r2, #1
     f42:	d820      	bhi.n	f86 <process_event+0xc6>
		*clients = mgr->clients;
     f44:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     f48:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     f4a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     f4c:	b289      	uxth	r1, r1
	list->tail = NULL;
     f4e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     f52:	d10c      	bne.n	f6e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     f54:	2d00      	cmp	r5, #0
     f56:	462b      	mov	r3, r5
     f58:	bf38      	it	cc
     f5a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f5c:	b12b      	cbz	r3, f6a <process_event+0xaa>
				mgr->refs += 1U;
     f5e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	3201      	adds	r2, #1
     f64:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f66:	2b00      	cmp	r3, #0
     f68:	d1f8      	bne.n	f5c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f6a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     f6e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     f70:	4620      	mov	r0, r4
     f72:	f003 fd02 	bl	497a <process_recheck>
     f76:	4606      	mov	r6, r0
     f78:	2800      	cmp	r0, #0
     f7a:	d0d1      	beq.n	f20 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f7c:	8b23      	ldrh	r3, [r4, #24]
     f7e:	f043 0320 	orr.w	r3, r3, #32
     f82:	8323      	strh	r3, [r4, #24]
     f84:	e7cb      	b.n	f1e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     f86:	2b04      	cmp	r3, #4
     f88:	d10c      	bne.n	fa4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f8a:	f021 0107 	bic.w	r1, r1, #7
     f8e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f90:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     f92:	4620      	mov	r0, r4
     f94:	f003 fcf1 	bl	497a <process_recheck>
     f98:	4605      	mov	r5, r0
     f9a:	2800      	cmp	r0, #0
     f9c:	d0bf      	beq.n	f1e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f9e:	f041 0120 	orr.w	r1, r1, #32
     fa2:	8321      	strh	r1, [r4, #24]
     fa4:	2500      	movs	r5, #0
     fa6:	e7ba      	b.n	f1e <process_event+0x5e>
		} else if (evt == EVT_START) {
     fa8:	2803      	cmp	r0, #3
     faa:	d109      	bne.n	fc0 <process_event+0x100>
			transit = mgr->transitions->start;
     fac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     fb2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fb4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     fb8:	8323      	strh	r3, [r4, #24]
}
     fba:	2500      	movs	r5, #0
		res = 0;
     fbc:	462f      	mov	r7, r5
     fbe:	e7af      	b.n	f20 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     fc0:	2804      	cmp	r0, #4
     fc2:	d106      	bne.n	fd2 <process_event+0x112>
			transit = mgr->transitions->stop;
     fc4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fc6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     fca:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fcc:	f043 0304 	orr.w	r3, r3, #4
     fd0:	e7f2      	b.n	fb8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     fd2:	2805      	cmp	r0, #5
     fd4:	d106      	bne.n	fe4 <process_event+0x124>
			transit = mgr->transitions->reset;
     fd6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fd8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     fdc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fde:	f043 0305 	orr.w	r3, r3, #5
     fe2:	e7e9      	b.n	fb8 <process_event+0xf8>
     fe4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     fe6:	462e      	mov	r6, r5
     fe8:	e7e8      	b.n	fbc <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     fea:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     fec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     ff0:	8321      	strh	r1, [r4, #24]
     ff2:	f38b 8811 	msr	BASEPRI, fp
     ff6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     ffa:	bb03      	cbnz	r3, 103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
	while (!sys_slist_is_empty(list)) {
     ffc:	2d00      	cmp	r5, #0
     ffe:	d133      	bne.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
			if (transit != NULL) {
    1000:	b116      	cbz	r6, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
				transit(mgr, transition_complete);
    1002:	4921      	ldr	r1, [pc, #132]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    1004:	4620      	mov	r0, r4
    1006:	47b0      	blx	r6
	__asm__ volatile(
    1008:	f04f 0320 	mov.w	r3, #32
    100c:	f3ef 8b11 	mrs	fp, BASEPRI
    1010:	f383 8811 	msr	BASEPRI, r3
    1014:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1018:	8b23      	ldrh	r3, [r4, #24]
    101a:	f023 0308 	bic.w	r3, r3, #8
    101e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1020:	8b23      	ldrh	r3, [r4, #24]
    1022:	06da      	lsls	r2, r3, #27
    1024:	d528      	bpl.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1026:	f023 0310 	bic.w	r3, r3, #16
    102a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    102c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    102e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1032:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1036:	2900      	cmp	r1, #0
    1038:	f47f af5b 	bne.w	ef2 <process_event+0x32>
out:
    103c:	e751      	b.n	ee2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    103e:	68a1      	ldr	r1, [r4, #8]
    1040:	2900      	cmp	r1, #0
    1042:	d0db      	beq.n	ffc <process_event+0x13c>
	return node->next;
    1044:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1046:	f8d1 b004 	ldr.w	fp, [r1, #4]
    104a:	2b00      	cmp	r3, #0
    104c:	bf38      	it	cc
    104e:	2300      	movcc	r3, #0
    1050:	4699      	mov	r9, r3
    1052:	4652      	mov	r2, sl
    1054:	463b      	mov	r3, r7
    1056:	4620      	mov	r0, r4
    1058:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    105a:	f1b9 0f00 	cmp.w	r9, #0
    105e:	d0cd      	beq.n	ffc <process_event+0x13c>
    1060:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1064:	4649      	mov	r1, r9
    1066:	e7ee      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1068:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    106a:	463b      	mov	r3, r7
    106c:	4652      	mov	r2, sl
    106e:	4620      	mov	r0, r4
    1070:	682d      	ldr	r5, [r5, #0]
    1072:	f003 fc9e 	bl	49b2 <notify_one>
    1076:	e7c1      	b.n	ffc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1078:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    107c:	bf1e      	ittt	ne
    107e:	f023 0320 	bicne.w	r3, r3, #32
    1082:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1084:	2102      	movne	r1, #2
    1086:	e7d2      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    1088:	000049df 	.word	0x000049df

0000108c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
    108e:	2200      	movs	r2, #0
    1090:	e9c0 2200 	strd	r2, r2, [r0]
    1094:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    1096:	784a      	ldrb	r2, [r1, #1]
    1098:	2a25      	cmp	r2, #37	; 0x25
{
    109a:	4603      	mov	r3, r0
	if (*sp == '%') {
    109c:	d033      	beq.n	1106 <extract_conversion+0x7a>
	++sp;
    109e:	3101      	adds	r1, #1
    10a0:	4608      	mov	r0, r1
		switch (*sp) {
    10a2:	f811 2b01 	ldrb.w	r2, [r1], #1
    10a6:	2a2b      	cmp	r2, #43	; 0x2b
    10a8:	d03d      	beq.n	1126 <extract_conversion+0x9a>
    10aa:	d82f      	bhi.n	110c <extract_conversion+0x80>
    10ac:	2a20      	cmp	r2, #32
    10ae:	d03e      	beq.n	112e <extract_conversion+0xa2>
    10b0:	2a23      	cmp	r2, #35	; 0x23
    10b2:	d040      	beq.n	1136 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
    10b4:	781a      	ldrb	r2, [r3, #0]
    10b6:	f002 0144 	and.w	r1, r2, #68	; 0x44
    10ba:	2944      	cmp	r1, #68	; 0x44
    10bc:	d102      	bne.n	10c4 <extract_conversion+0x38>
		conv->flag_zero = false;
    10be:	f36f 1286 	bfc	r2, #6, #1
    10c2:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
    10c4:	7802      	ldrb	r2, [r0, #0]
    10c6:	2a2a      	cmp	r2, #42	; 0x2a
    10c8:	d14c      	bne.n	1164 <extract_conversion+0xd8>
		conv->width_present = true;
    10ca:	8819      	ldrh	r1, [r3, #0]
    10cc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
    10d0:	1c42      	adds	r2, r0, #1
    10d2:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
    10d4:	7811      	ldrb	r1, [r2, #0]
    10d6:	292e      	cmp	r1, #46	; 0x2e
    10d8:	d14f      	bne.n	117a <extract_conversion+0xee>
	if (*sp == '*') {
    10da:	7851      	ldrb	r1, [r2, #1]
    10dc:	292a      	cmp	r1, #42	; 0x2a
    10de:	d045      	beq.n	116c <extract_conversion+0xe0>
    10e0:	3201      	adds	r2, #1
	const char *sp = *str;
    10e2:	4615      	mov	r5, r2
	size_t val = 0;
    10e4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    10e6:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    10e8:	4610      	mov	r0, r2
    10ea:	f810 4b01 	ldrb.w	r4, [r0], #1
    10ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    10f2:	2e09      	cmp	r6, #9
    10f4:	d953      	bls.n	119e <extract_conversion+0x112>
	if (sp != wp) {
    10f6:	42aa      	cmp	r2, r5
		conv->prec_present = true;
    10f8:	bf1f      	itttt	ne
    10fa:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
    10fc:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
    10fe:	f040 0002 	orrne.w	r0, r0, #2
    1102:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
    1104:	e039      	b.n	117a <extract_conversion+0xee>
		conv->specifier = *sp++;
    1106:	1c88      	adds	r0, r1, #2
    1108:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
    110c:	2a2d      	cmp	r2, #45	; 0x2d
    110e:	d005      	beq.n	111c <extract_conversion+0x90>
    1110:	2a30      	cmp	r2, #48	; 0x30
    1112:	d1cf      	bne.n	10b4 <extract_conversion+0x28>
			conv->flag_zero = true;
    1114:	781a      	ldrb	r2, [r3, #0]
    1116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    111a:	e002      	b.n	1122 <extract_conversion+0x96>
			conv->flag_dash = true;
    111c:	781a      	ldrb	r2, [r3, #0]
    111e:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
    1122:	701a      	strb	r2, [r3, #0]
			break;
    1124:	e7bc      	b.n	10a0 <extract_conversion+0x14>
			conv->flag_plus = true;
    1126:	781a      	ldrb	r2, [r3, #0]
    1128:	f042 0208 	orr.w	r2, r2, #8
    112c:	e7f9      	b.n	1122 <extract_conversion+0x96>
			conv->flag_space = true;
    112e:	781a      	ldrb	r2, [r3, #0]
    1130:	f042 0210 	orr.w	r2, r2, #16
    1134:	e7f5      	b.n	1122 <extract_conversion+0x96>
			conv->flag_hash = true;
    1136:	781a      	ldrb	r2, [r3, #0]
    1138:	f042 0220 	orr.w	r2, r2, #32
    113c:	e7f1      	b.n	1122 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
    113e:	fb07 5101 	mla	r1, r7, r1, r5
    1142:	3930      	subs	r1, #48	; 0x30
    1144:	4622      	mov	r2, r4
    1146:	4614      	mov	r4, r2
    1148:	f814 5b01 	ldrb.w	r5, [r4], #1
    114c:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1150:	2e09      	cmp	r6, #9
    1152:	d9f4      	bls.n	113e <extract_conversion+0xb2>
	if (sp != wp) {
    1154:	4290      	cmp	r0, r2
		conv->width_present = true;
    1156:	bf1f      	itttt	ne
    1158:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
    115a:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
    115c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
    1160:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
    1162:	e7b7      	b.n	10d4 <extract_conversion+0x48>
    1164:	4602      	mov	r2, r0
	size_t val = 0;
    1166:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1168:	270a      	movs	r7, #10
    116a:	e7ec      	b.n	1146 <extract_conversion+0xba>
		conv->prec_present = true;
    116c:	7859      	ldrb	r1, [r3, #1]
    116e:	f021 0106 	bic.w	r1, r1, #6
    1172:	f041 0106 	orr.w	r1, r1, #6
    1176:	7059      	strb	r1, [r3, #1]
		return ++sp;
    1178:	3202      	adds	r2, #2
	switch (*sp) {
    117a:	4611      	mov	r1, r2
    117c:	f811 0b01 	ldrb.w	r0, [r1], #1
    1180:	286c      	cmp	r0, #108	; 0x6c
    1182:	d054      	beq.n	122e <extract_conversion+0x1a2>
    1184:	d810      	bhi.n	11a8 <extract_conversion+0x11c>
    1186:	2868      	cmp	r0, #104	; 0x68
    1188:	d016      	beq.n	11b8 <extract_conversion+0x12c>
    118a:	286a      	cmp	r0, #106	; 0x6a
    118c:	d058      	beq.n	1240 <extract_conversion+0x1b4>
    118e:	284c      	cmp	r0, #76	; 0x4c
    1190:	d05c      	beq.n	124c <extract_conversion+0x1c0>
		conv->length_mod = LENGTH_NONE;
    1192:	7859      	ldrb	r1, [r3, #1]
    1194:	f36f 01c6 	bfc	r1, #3, #4
    1198:	7059      	strb	r1, [r3, #1]
		break;
    119a:	4611      	mov	r1, r2
    119c:	e015      	b.n	11ca <extract_conversion+0x13e>
		val = 10U * val + *sp++ - '0';
    119e:	fb07 4101 	mla	r1, r7, r1, r4
    11a2:	3930      	subs	r1, #48	; 0x30
    11a4:	4602      	mov	r2, r0
    11a6:	e79f      	b.n	10e8 <extract_conversion+0x5c>
	switch (*sp) {
    11a8:	2874      	cmp	r0, #116	; 0x74
    11aa:	785c      	ldrb	r4, [r3, #1]
    11ac:	d04b      	beq.n	1246 <extract_conversion+0x1ba>
    11ae:	287a      	cmp	r0, #122	; 0x7a
    11b0:	d1ef      	bne.n	1192 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
    11b2:	4622      	mov	r2, r4
    11b4:	2006      	movs	r0, #6
    11b6:	e036      	b.n	1226 <extract_conversion+0x19a>
		if (*++sp == 'h') {
    11b8:	7850      	ldrb	r0, [r2, #1]
    11ba:	785c      	ldrb	r4, [r3, #1]
    11bc:	2868      	cmp	r0, #104	; 0x68
    11be:	d130      	bne.n	1222 <extract_conversion+0x196>
			conv->length_mod = LENGTH_HH;
    11c0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    11c2:	f361 04c6 	bfi	r4, r1, #3, #4
    11c6:	705c      	strb	r4, [r3, #1]
			++sp;
    11c8:	1c91      	adds	r1, r2, #2
	conv->specifier = *sp++;
    11ca:	4608      	mov	r0, r1
    11cc:	f810 4b01 	ldrb.w	r4, [r0], #1
    11d0:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
    11d2:	2c78      	cmp	r4, #120	; 0x78
    11d4:	f200 80b1 	bhi.w	133a <extract_conversion+0x2ae>
    11d8:	2c57      	cmp	r4, #87	; 0x57
    11da:	d842      	bhi.n	1262 <extract_conversion+0x1d6>
    11dc:	2c41      	cmp	r4, #65	; 0x41
    11de:	d004      	beq.n	11ea <extract_conversion+0x15e>
    11e0:	f1a4 0245 	sub.w	r2, r4, #69	; 0x45
    11e4:	2a02      	cmp	r2, #2
    11e6:	f200 80a8 	bhi.w	133a <extract_conversion+0x2ae>
		conv->specifier_cat = SPECIFIER_FP;
    11ea:	789a      	ldrb	r2, [r3, #2]
			|| (conv->specifier == 'A');
    11ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    11f0:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    11f2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    11f6:	f361 0202 	bfi	r2, r1, #0, #3
			|| (conv->specifier == 'A');
    11fa:	426c      	negs	r4, r5
		conv->specifier_a = (conv->specifier == 'a')
    11fc:	7859      	ldrb	r1, [r3, #1]
		conv->specifier_cat = SPECIFIER_FP;
    11fe:	709a      	strb	r2, [r3, #2]
			|| (conv->specifier == 'A');
    1200:	416c      	adcs	r4, r5
		conv->specifier_a = (conv->specifier == 'a')
    1202:	f364 11c7 	bfi	r1, r4, #7, #1
		if (conv->specifier_a
    1206:	060e      	lsls	r6, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1208:	7059      	strb	r1, [r3, #1]
		if (conv->specifier_a
    120a:	b2ca      	uxtb	r2, r1
    120c:	f100 80b3 	bmi.w	1376 <extract_conversion+0x2ea>
		if (conv->length_mod == LENGTH_L) {
    1210:	f002 0178 	and.w	r1, r2, #120	; 0x78
    1214:	2918      	cmp	r1, #24
    1216:	f040 808d 	bne.w	1334 <extract_conversion+0x2a8>
			conv->length_mod = LENGTH_NONE;
    121a:	f36f 02c6 	bfc	r2, #3, #4
    121e:	705a      	strb	r2, [r3, #1]
    1220:	e078      	b.n	1314 <extract_conversion+0x288>
			conv->length_mod = LENGTH_H;
    1222:	4622      	mov	r2, r4
    1224:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
    1226:	f360 02c6 	bfi	r2, r0, #3, #4
    122a:	705a      	strb	r2, [r3, #1]
    122c:	e7cd      	b.n	11ca <extract_conversion+0x13e>
		if (*++sp == 'l') {
    122e:	7850      	ldrb	r0, [r2, #1]
    1230:	785c      	ldrb	r4, [r3, #1]
    1232:	286c      	cmp	r0, #108	; 0x6c
    1234:	d101      	bne.n	123a <extract_conversion+0x1ae>
			conv->length_mod = LENGTH_LL;
    1236:	2104      	movs	r1, #4
    1238:	e7c3      	b.n	11c2 <extract_conversion+0x136>
			conv->length_mod = LENGTH_L;
    123a:	4622      	mov	r2, r4
    123c:	2003      	movs	r0, #3
    123e:	e7f2      	b.n	1226 <extract_conversion+0x19a>
		conv->length_mod = LENGTH_J;
    1240:	785a      	ldrb	r2, [r3, #1]
    1242:	2005      	movs	r0, #5
    1244:	e7ef      	b.n	1226 <extract_conversion+0x19a>
		conv->length_mod = LENGTH_T;
    1246:	4622      	mov	r2, r4
    1248:	2007      	movs	r0, #7
    124a:	e7ec      	b.n	1226 <extract_conversion+0x19a>
		conv->unsupported = true;
    124c:	881a      	ldrh	r2, [r3, #0]
    124e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1252:	f022 0202 	bic.w	r2, r2, #2
    1256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    125a:	f042 0202 	orr.w	r2, r2, #2
    125e:	801a      	strh	r2, [r3, #0]
		break;
    1260:	e7b3      	b.n	11ca <extract_conversion+0x13e>
    1262:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
    1266:	2a20      	cmp	r2, #32
    1268:	d867      	bhi.n	133a <extract_conversion+0x2ae>
    126a:	a101      	add	r1, pc, #4	; (adr r1, 1270 <extract_conversion+0x1e4>)
    126c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    1270:	00001319 	.word	0x00001319
    1274:	0000133b 	.word	0x0000133b
    1278:	0000133b 	.word	0x0000133b
    127c:	0000133b 	.word	0x0000133b
    1280:	0000133b 	.word	0x0000133b
    1284:	0000133b 	.word	0x0000133b
    1288:	0000133b 	.word	0x0000133b
    128c:	0000133b 	.word	0x0000133b
    1290:	0000133b 	.word	0x0000133b
    1294:	000011eb 	.word	0x000011eb
    1298:	0000133b 	.word	0x0000133b
    129c:	00001319 	.word	0x00001319
    12a0:	000012f5 	.word	0x000012f5
    12a4:	000011eb 	.word	0x000011eb
    12a8:	000011eb 	.word	0x000011eb
    12ac:	000011eb 	.word	0x000011eb
    12b0:	0000133b 	.word	0x0000133b
    12b4:	000012f5 	.word	0x000012f5
    12b8:	0000133b 	.word	0x0000133b
    12bc:	0000133b 	.word	0x0000133b
    12c0:	0000133b 	.word	0x0000133b
    12c4:	0000133b 	.word	0x0000133b
    12c8:	00001345 	.word	0x00001345
    12cc:	00001319 	.word	0x00001319
    12d0:	0000135f 	.word	0x0000135f
    12d4:	0000133b 	.word	0x0000133b
    12d8:	0000133b 	.word	0x0000133b
    12dc:	0000135f 	.word	0x0000135f
    12e0:	0000133b 	.word	0x0000133b
    12e4:	00001319 	.word	0x00001319
    12e8:	0000133b 	.word	0x0000133b
    12ec:	0000133b 	.word	0x0000133b
    12f0:	00001319 	.word	0x00001319
		conv->specifier_cat = SPECIFIER_SINT;
    12f4:	789a      	ldrb	r2, [r3, #2]
    12f6:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    12f8:	f361 0202 	bfi	r2, r1, #0, #3
    12fc:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    12fe:	785a      	ldrb	r2, [r3, #1]
    1300:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1304:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
    1306:	bf02      	ittt	eq
    1308:	7819      	ldrbeq	r1, [r3, #0]
    130a:	f041 0101 	orreq.w	r1, r1, #1
    130e:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
    1310:	2c63      	cmp	r4, #99	; 0x63
    1312:	d004      	beq.n	131e <extract_conversion+0x292>
	bool unsupported = false;
    1314:	2200      	movs	r2, #0
    1316:	e005      	b.n	1324 <extract_conversion+0x298>
		conv->specifier_cat = SPECIFIER_UINT;
    1318:	789a      	ldrb	r2, [r3, #2]
    131a:	2102      	movs	r1, #2
    131c:	e7ec      	b.n	12f8 <extract_conversion+0x26c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    131e:	3a00      	subs	r2, #0
    1320:	bf18      	it	ne
    1322:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
    1324:	7819      	ldrb	r1, [r3, #0]
    1326:	f3c1 0440 	ubfx	r4, r1, #1, #1
    132a:	4322      	orrs	r2, r4
    132c:	f362 0141 	bfi	r1, r2, #1, #1
    1330:	7019      	strb	r1, [r3, #0]
	return sp;
    1332:	e6ea      	b.n	110a <extract_conversion+0x7e>
		} else if ((conv->length_mod != LENGTH_NONE)
    1334:	f012 0f38 	tst.w	r2, #56	; 0x38
    1338:	d0ec      	beq.n	1314 <extract_conversion+0x288>
			conv->invalid = true;
    133a:	781a      	ldrb	r2, [r3, #0]
    133c:	f042 0201 	orr.w	r2, r2, #1
    1340:	701a      	strb	r2, [r3, #0]
    1342:	e7e7      	b.n	1314 <extract_conversion+0x288>
		conv->specifier_cat = SPECIFIER_PTR;
    1344:	789a      	ldrb	r2, [r3, #2]
    1346:	2103      	movs	r1, #3
    1348:	f361 0202 	bfi	r2, r1, #0, #3
    134c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    134e:	785a      	ldrb	r2, [r3, #1]
    1350:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1354:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    1358:	424a      	negs	r2, r1
    135a:	414a      	adcs	r2, r1
    135c:	e7e2      	b.n	1324 <extract_conversion+0x298>
		conv->specifier_cat = SPECIFIER_PTR;
    135e:	789a      	ldrb	r2, [r3, #2]
    1360:	2103      	movs	r1, #3
    1362:	f361 0202 	bfi	r2, r1, #0, #3
    1366:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1368:	785a      	ldrb	r2, [r3, #1]
    136a:	f012 0f78 	tst.w	r2, #120	; 0x78
    136e:	bf14      	ite	ne
    1370:	2201      	movne	r2, #1
    1372:	2200      	moveq	r2, #0
    1374:	e7d6      	b.n	1324 <extract_conversion+0x298>
			unsupported = true;
    1376:	2201      	movs	r2, #1
    1378:	e7d4      	b.n	1324 <extract_conversion+0x298>
    137a:	bf00      	nop

0000137c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    137c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1380:	b0a1      	sub	sp, #132	; 0x84
    1382:	468a      	mov	sl, r1
    1384:	9003      	str	r0, [sp, #12]
    1386:	4614      	mov	r4, r2
    1388:	469b      	mov	fp, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    138a:	f04f 0900 	mov.w	r9, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    138e:	7820      	ldrb	r0, [r4, #0]
    1390:	b908      	cbnz	r0, 1396 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1392:	4648      	mov	r0, r9
    1394:	e189      	b.n	16aa <cbvprintf+0x32e>
		if (*fp != '%') {
    1396:	2825      	cmp	r0, #37	; 0x25
    1398:	d00a      	beq.n	13b0 <cbvprintf+0x34>
			OUTC(*fp++);
    139a:	9b03      	ldr	r3, [sp, #12]
    139c:	4651      	mov	r1, sl
    139e:	4798      	blx	r3
    13a0:	2800      	cmp	r0, #0
    13a2:	f2c0 8182 	blt.w	16aa <cbvprintf+0x32e>
    13a6:	1c63      	adds	r3, r4, #1
    13a8:	930b      	str	r3, [sp, #44]	; 0x2c
			OUTC('%');
    13aa:	f109 0901 	add.w	r9, r9, #1
		if (bps == NULL) {
    13ae:	e068      	b.n	1482 <cbvprintf+0x106>
		fp = extract_conversion(&conv, sp);
    13b0:	4621      	mov	r1, r4
    13b2:	a816      	add	r0, sp, #88	; 0x58
    13b4:	f7ff fe6a 	bl	108c <extract_conversion>
		if (conv.width_star) {
    13b8:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
		fp = extract_conversion(&conv, sp);
    13bc:	900b      	str	r0, [sp, #44]	; 0x2c
		if (conv.width_star) {
    13be:	07d8      	lsls	r0, r3, #31
    13c0:	d51c      	bpl.n	13fc <cbvprintf+0x80>
			width = va_arg(ap, int);
    13c2:	f85b 2b04 	ldr.w	r2, [fp], #4
    13c6:	920a      	str	r2, [sp, #40]	; 0x28
			if (width < 0) {
    13c8:	2a00      	cmp	r2, #0
    13ca:	da08      	bge.n	13de <cbvprintf+0x62>
				conv.flag_dash = true;
    13cc:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    13d0:	f042 0204 	orr.w	r2, r2, #4
    13d4:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
				width = -width;
    13d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    13da:	4252      	negs	r2, r2
		int width = -1;
    13dc:	920a      	str	r2, [sp, #40]	; 0x28
		if (conv.prec_star) {
    13de:	0759      	lsls	r1, r3, #29
    13e0:	d514      	bpl.n	140c <cbvprintf+0x90>
			int arg = va_arg(ap, int);
    13e2:	f85b 5b04 	ldr.w	r5, [fp], #4
			if (arg < 0) {
    13e6:	2d00      	cmp	r5, #0
    13e8:	da13      	bge.n	1412 <cbvprintf+0x96>
				conv.prec_present = false;
    13ea:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
    13ee:	f36f 0341 	bfc	r3, #1, #1
    13f2:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
    13f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    13fa:	e00a      	b.n	1412 <cbvprintf+0x96>
		} else if (conv.width_present) {
    13fc:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
    1400:	2a00      	cmp	r2, #0
			width = conv.width_value;
    1402:	bfb4      	ite	lt
    1404:	9a17      	ldrlt	r2, [sp, #92]	; 0x5c
		int width = -1;
    1406:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    140a:	e7e7      	b.n	13dc <cbvprintf+0x60>
		} else if (conv.prec_present) {
    140c:	079a      	lsls	r2, r3, #30
    140e:	d5f2      	bpl.n	13f6 <cbvprintf+0x7a>
			precision = conv.prec_value;
    1410:	9d18      	ldr	r5, [sp, #96]	; 0x60
		conv.pad0_value = 0;
    1412:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
    1416:	2300      	movs	r3, #0
		conv.pad0_pre_exp = 0;
    1418:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv.specifier_cat == SPECIFIER_FP)
    141c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1420:	f003 0307 	and.w	r3, r3, #7
    1424:	2b04      	cmp	r3, #4
    1426:	d107      	bne.n	1438 <cbvprintf+0xbc>
		    && !conv.prec_present) {
    1428:	0793      	lsls	r3, r2, #30
    142a:	d405      	bmi.n	1438 <cbvprintf+0xbc>
			if (conv.specifier_a) {
    142c:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
    1430:	2b00      	cmp	r3, #0
    1432:	bfb4      	ite	lt
    1434:	250d      	movlt	r5, #13
    1436:	2506      	movge	r5, #6
			= (enum specifier_cat_enum)conv.specifier_cat;
    1438:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		enum specifier_cat_enum specifier_cat
    143c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1440:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv.length_mod;
    1442:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		union argument_value value = (union argument_value){
    1446:	f04f 0000 	mov.w	r0, #0
    144a:	f04f 0100 	mov.w	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
    144e:	d126      	bne.n	149e <cbvprintf+0x122>
			switch (length_mod) {
    1450:	1ed3      	subs	r3, r2, #3
    1452:	2b04      	cmp	r3, #4
    1454:	d817      	bhi.n	1486 <cbvprintf+0x10a>
    1456:	e8df f003 	tbb	[pc, r3]
    145a:	3203      	.short	0x3203
    145c:	1632      	.short	0x1632
    145e:	16          	.byte	0x16
    145f:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
    1460:	f85b 0b04 	ldr.w	r0, [fp], #4
				value.sint = (short)value.sint;
    1464:	17c1      	asrs	r1, r0, #31
		if (conv.invalid || conv.unsupported) {
    1466:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
    146a:	07b7      	lsls	r7, r6, #30
    146c:	d047      	beq.n	14fe <cbvprintf+0x182>
			OUTS(sp, fp);
    146e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1470:	9803      	ldr	r0, [sp, #12]
    1472:	4622      	mov	r2, r4
    1474:	4651      	mov	r1, sl
    1476:	f003 fca7 	bl	4dc8 <outs>
    147a:	2800      	cmp	r0, #0
    147c:	f2c0 8115 	blt.w	16aa <cbvprintf+0x32e>
    1480:	4481      	add	r9, r0
			continue;
    1482:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    1484:	e783      	b.n	138e <cbvprintf+0x12>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1486:	f85b 0b04 	ldr.w	r0, [fp], #4
			if (length_mod == LENGTH_HH) {
    148a:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    148c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			if (length_mod == LENGTH_HH) {
    1490:	d101      	bne.n	1496 <cbvprintf+0x11a>
				value.uint = (unsigned char)value.uint;
    1492:	b2c6      	uxtb	r6, r0
    1494:	e00f      	b.n	14b6 <cbvprintf+0x13a>
			} else if (length_mod == LENGTH_H) {
    1496:	2a02      	cmp	r2, #2
    1498:	d1e5      	bne.n	1466 <cbvprintf+0xea>
				value.sint = (short)value.sint;
    149a:	b200      	sxth	r0, r0
    149c:	e7e2      	b.n	1464 <cbvprintf+0xe8>
		} else if (specifier_cat == SPECIFIER_UINT) {
    149e:	2b02      	cmp	r3, #2
    14a0:	d11f      	bne.n	14e2 <cbvprintf+0x166>
			switch (length_mod) {
    14a2:	1ed3      	subs	r3, r2, #3
    14a4:	2b04      	cmp	r3, #4
    14a6:	d811      	bhi.n	14cc <cbvprintf+0x150>
    14a8:	e8df f003 	tbb	[pc, r3]
    14ac:	10090903 	.word	0x10090903
    14b0:	10          	.byte	0x10
    14b1:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
    14b2:	f85b 6b04 	ldr.w	r6, [fp], #4
				value.uint = (unsigned short)value.uint;
    14b6:	2300      	movs	r3, #0
    14b8:	4630      	mov	r0, r6
    14ba:	4619      	mov	r1, r3
    14bc:	e7d3      	b.n	1466 <cbvprintf+0xea>
					(uint_value_type)va_arg(ap,
    14be:	f10b 0b07 	add.w	fp, fp, #7
    14c2:	f02b 0b07 	bic.w	fp, fp, #7
				value.uint =
    14c6:	e8fb 0102 	ldrd	r0, r1, [fp], #8
				break;
    14ca:	e7cc      	b.n	1466 <cbvprintf+0xea>
				value.uint =
    14cc:	f85b 6b04 	ldr.w	r6, [fp], #4
    14d0:	2300      	movs	r3, #0
			if (length_mod == LENGTH_HH) {
    14d2:	2a01      	cmp	r2, #1
				value.uint =
    14d4:	4630      	mov	r0, r6
    14d6:	4619      	mov	r1, r3
			if (length_mod == LENGTH_HH) {
    14d8:	d0db      	beq.n	1492 <cbvprintf+0x116>
			} else if (length_mod == LENGTH_H) {
    14da:	2a02      	cmp	r2, #2
    14dc:	d1c3      	bne.n	1466 <cbvprintf+0xea>
				value.uint = (unsigned short)value.uint;
    14de:	b2b6      	uxth	r6, r6
    14e0:	e7e9      	b.n	14b6 <cbvprintf+0x13a>
		} else if (specifier_cat == SPECIFIER_FP) {
    14e2:	2b04      	cmp	r3, #4
    14e4:	d106      	bne.n	14f4 <cbvprintf+0x178>
			if (length_mod == LENGTH_UPPER_L) {
    14e6:	f10b 0b07 	add.w	fp, fp, #7
    14ea:	f02b 0b07 	bic.w	fp, fp, #7
    14ee:	e8fb 0102 	ldrd	r0, r1, [fp], #8
    14f2:	e7b8      	b.n	1466 <cbvprintf+0xea>
		} else if (specifier_cat == SPECIFIER_PTR) {
    14f4:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
    14f6:	bf08      	it	eq
    14f8:	f85b 0b04 	ldreq.w	r0, [fp], #4
    14fc:	e7b3      	b.n	1466 <cbvprintf+0xea>
		switch (conv.specifier) {
    14fe:	f89d 705b 	ldrb.w	r7, [sp, #91]	; 0x5b
    1502:	2f78      	cmp	r7, #120	; 0x78
    1504:	d8bd      	bhi.n	1482 <cbvprintf+0x106>
    1506:	2f57      	cmp	r7, #87	; 0x57
    1508:	d87e      	bhi.n	1608 <cbvprintf+0x28c>
    150a:	2f25      	cmp	r7, #37	; 0x25
    150c:	f000 80c6 	beq.w	169c <cbvprintf+0x320>
    1510:	2f24      	cmp	r7, #36	; 0x24
    1512:	d9b6      	bls.n	1482 <cbvprintf+0x106>
    1514:	2f41      	cmp	r7, #65	; 0x41
    1516:	d003      	beq.n	1520 <cbvprintf+0x1a4>
    1518:	f1a7 0345 	sub.w	r3, r7, #69	; 0x45
    151c:	2b02      	cmp	r3, #2
    151e:	d8b0      	bhi.n	1482 <cbvprintf+0x106>
	if ((u.u64 & SIGN_MASK) != 0U) {
    1520:	2800      	cmp	r0, #0
    1522:	f171 0300 	sbcs.w	r3, r1, #0
    1526:	f2c0 815c 	blt.w	17e2 <cbvprintf+0x466>
	} else if (conv->flag_plus) {
    152a:	0732      	lsls	r2, r6, #28
    152c:	f100 815b 	bmi.w	17e6 <cbvprintf+0x46a>
		*sign = ' ';
    1530:	f016 0610 	ands.w	r6, r6, #16
    1534:	bf18      	it	ne
    1536:	2620      	movne	r6, #32
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1538:	f3c1 0313 	ubfx	r3, r1, #0, #20
    153c:	9006      	str	r0, [sp, #24]
    153e:	9307      	str	r3, [sp, #28]
    1540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    1544:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    1548:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
    154c:	2c00      	cmp	r4, #0
    154e:	f040 814c 	bne.w	17ea <cbvprintf+0x46e>
    1552:	9a07      	ldr	r2, [sp, #28]
    1554:	4603      	mov	r3, r0
    1556:	4313      	orrs	r3, r2
    1558:	bf14      	ite	ne
    155a:	f04f 0c01 	movne.w	ip, #1
    155e:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    1562:	9907      	ldr	r1, [sp, #28]
    1564:	02cb      	lsls	r3, r1, #11
    1566:	9906      	ldr	r1, [sp, #24]
    1568:	02ca      	lsls	r2, r1, #11
    156a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
    156e:	ea44 0102 	orr.w	r1, r4, r2
    1572:	910c      	str	r1, [sp, #48]	; 0x30
    1574:	17e1      	asrs	r1, r4, #31
    1576:	4319      	orrs	r1, r3
    1578:	910d      	str	r1, [sp, #52]	; 0x34
    157a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
    157e:	2f46      	cmp	r7, #70	; 0x46
    1580:	bf08      	it	eq
    1582:	2766      	moveq	r7, #102	; 0x66
	if ((exp | fract) != 0) {
    1584:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    1586:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
    158a:	f000 81d0 	beq.w	192e <cbvprintf+0x5b2>
		if (is_subnormal) {
    158e:	f1bc 0f00 	cmp.w	ip, #0
    1592:	f040 815e 	bne.w	1852 <cbvprintf+0x4d6>
		fract |= BIT_63;
    1596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    159c:	f2a4 38fe 	subw	r8, r4, #1022	; 0x3fe
		fract |= BIT_63;
    15a0:	9313      	str	r3, [sp, #76]	; 0x4c
    15a2:	2400      	movs	r4, #0
	while (exp <= -3) {
    15a4:	f118 0f02 	cmn.w	r8, #2
    15a8:	f2c0 815f 	blt.w	186a <cbvprintf+0x4ee>
	while (exp > 0) {
    15ac:	f1b8 0f00 	cmp.w	r8, #0
    15b0:	f300 8197 	bgt.w	18e2 <cbvprintf+0x566>
		_rlrshift(&fract);
    15b4:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    15b6:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    15ba:	f003 fb6f 	bl	4c9c <_rlrshift>
	while (exp < (0 + 4)) {
    15be:	f1b8 0f04 	cmp.w	r8, #4
    15c2:	d1f7      	bne.n	15b4 <cbvprintf+0x238>
	if ((c == 'g') || (c == 'G')) {
    15c4:	f007 03df 	and.w	r3, r7, #223	; 0xdf
    15c8:	2b47      	cmp	r3, #71	; 0x47
    15ca:	f040 81b6 	bne.w	193a <cbvprintf+0x5be>
		if (decexp < (-4 + 1) || decexp > precision) {
    15ce:	1ce3      	adds	r3, r4, #3
    15d0:	db02      	blt.n	15d8 <cbvprintf+0x25c>
    15d2:	42a5      	cmp	r5, r4
    15d4:	f280 81ae 	bge.w	1934 <cbvprintf+0x5b8>
			c += 'e' - 'g';  /* e or E */
    15d8:	3f02      	subs	r7, #2
			if (precision > 0) {
    15da:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
    15dc:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
    15de:	dd00      	ble.n	15e2 <cbvprintf+0x266>
				precision--;
    15e0:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
    15e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    15e6:	0698      	lsls	r0, r3, #26
    15e8:	f100 81a7 	bmi.w	193a <cbvprintf+0x5be>
    15ec:	2d00      	cmp	r5, #0
    15ee:	bfd4      	ite	le
    15f0:	2300      	movle	r3, #0
    15f2:	2301      	movgt	r3, #1
	if (c == 'f') {
    15f4:	2f66      	cmp	r7, #102	; 0x66
	bool prune_zero = false;
    15f6:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
    15f8:	f040 81a1 	bne.w	193e <cbvprintf+0x5c2>
		if (exp < 0) {
    15fc:	1963      	adds	r3, r4, r5
    15fe:	f140 819f 	bpl.w	1940 <cbvprintf+0x5c4>
			exp = 0;
    1602:	f04f 0800 	mov.w	r8, #0
    1606:	e19f      	b.n	1948 <cbvprintf+0x5cc>
    1608:	f1a7 0358 	sub.w	r3, r7, #88	; 0x58
    160c:	2b20      	cmp	r3, #32
    160e:	f63f af38 	bhi.w	1482 <cbvprintf+0x106>
    1612:	a401      	add	r4, pc, #4	; (adr r4, 1618 <cbvprintf+0x29c>)
    1614:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
    1618:	00001781 	.word	0x00001781
    161c:	00001483 	.word	0x00001483
    1620:	00001483 	.word	0x00001483
    1624:	00001483 	.word	0x00001483
    1628:	00001483 	.word	0x00001483
    162c:	00001483 	.word	0x00001483
    1630:	00001483 	.word	0x00001483
    1634:	00001483 	.word	0x00001483
    1638:	00001483 	.word	0x00001483
    163c:	00001521 	.word	0x00001521
    1640:	00001483 	.word	0x00001483
    1644:	000016cb 	.word	0x000016cb
    1648:	0000172f 	.word	0x0000172f
    164c:	00001521 	.word	0x00001521
    1650:	00001521 	.word	0x00001521
    1654:	00001521 	.word	0x00001521
    1658:	00001483 	.word	0x00001483
    165c:	0000172f 	.word	0x0000172f
    1660:	00001483 	.word	0x00001483
    1664:	00001483 	.word	0x00001483
    1668:	00001483 	.word	0x00001483
    166c:	00001483 	.word	0x00001483
    1670:	000017b5 	.word	0x000017b5
    1674:	00001781 	.word	0x00001781
    1678:	00001785 	.word	0x00001785
    167c:	00001483 	.word	0x00001483
    1680:	00001483 	.word	0x00001483
    1684:	000016b1 	.word	0x000016b1
    1688:	00001483 	.word	0x00001483
    168c:	00001781 	.word	0x00001781
    1690:	00001483 	.word	0x00001483
    1694:	00001483 	.word	0x00001483
    1698:	00001781 	.word	0x00001781
			OUTC('%');
    169c:	9b03      	ldr	r3, [sp, #12]
    169e:	4651      	mov	r1, sl
    16a0:	4638      	mov	r0, r7
    16a2:	4798      	blx	r3
    16a4:	2800      	cmp	r0, #0
    16a6:	f6bf ae80 	bge.w	13aa <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    16aa:	b021      	add	sp, #132	; 0x84
    16ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value.ptr;
    16b0:	4604      	mov	r4, r0
			size_t len = strlen(bps);
    16b2:	f003 fc55 	bl	4f60 <strlen>
			if ((precision >= 0)
    16b6:	2d00      	cmp	r5, #0
    16b8:	db02      	blt.n	16c0 <cbvprintf+0x344>
    16ba:	42a8      	cmp	r0, r5
    16bc:	bf28      	it	cs
    16be:	4628      	movcs	r0, r5
			bpe = bps + len;
    16c0:	eb04 0800 	add.w	r8, r4, r0
		char sign = 0;
    16c4:	2600      	movs	r6, #0
		if (bps == NULL) {
    16c6:	b934      	cbnz	r4, 16d6 <cbvprintf+0x35a>
    16c8:	e6db      	b.n	1482 <cbvprintf+0x106>
			buf[0] = value.uint;
    16ca:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		char sign = 0;
    16ce:	2600      	movs	r6, #0
			bpe = buf + 1;
    16d0:	f10d 0865 	add.w	r8, sp, #101	; 0x65
				bps = encode_float(value.dbl, &conv, precision,
    16d4:	ac19      	add	r4, sp, #100	; 0x64
		size_t nj_len = (bpe - bps);
    16d6:	eba8 0704 	sub.w	r7, r8, r4
		if (sign != 0) {
    16da:	b106      	cbz	r6, 16de <cbvprintf+0x362>
			nj_len += 1U;
    16dc:	3701      	adds	r7, #1
		if (conv.altform_0c) {
    16de:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    16e2:	06cb      	lsls	r3, r1, #27
    16e4:	f140 8206 	bpl.w	1af4 <cbvprintf+0x778>
			nj_len += 2U;
    16e8:	3702      	adds	r7, #2
		nj_len += conv.pad0_value;
    16ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
		if (width > 0) {
    16ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		if (conv.pad_fp) {
    16ee:	0648      	lsls	r0, r1, #25
		nj_len += conv.pad0_value;
    16f0:	4417      	add	r7, r2
			nj_len += conv.pad0_pre_exp;
    16f2:	bf44      	itt	mi
    16f4:	9a18      	ldrmi	r2, [sp, #96]	; 0x60
    16f6:	18bf      	addmi	r7, r7, r2
		if (width > 0) {
    16f8:	2b00      	cmp	r3, #0
    16fa:	f340 820e 	ble.w	1b1a <cbvprintf+0x79e>
			if (!conv.flag_dash) {
    16fe:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    1702:	0751      	lsls	r1, r2, #29
			width -= (int)nj_len;
    1704:	eba3 0707 	sub.w	r7, r3, r7
			if (!conv.flag_dash) {
    1708:	f3c2 0580 	ubfx	r5, r2, #2, #1
    170c:	f100 8244 	bmi.w	1b98 <cbvprintf+0x81c>
				if (conv.flag_zero) {
    1710:	0653      	lsls	r3, r2, #25
    1712:	f140 823d 	bpl.w	1b90 <cbvprintf+0x814>
					if (sign != 0) {
    1716:	b146      	cbz	r6, 172a <cbvprintf+0x3ae>
						OUTC(sign);
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	4651      	mov	r1, sl
    171c:	4630      	mov	r0, r6
    171e:	4798      	blx	r3
    1720:	2800      	cmp	r0, #0
    1722:	dbc2      	blt.n	16aa <cbvprintf+0x32e>
    1724:	f109 0901 	add.w	r9, r9, #1
						sign = 0;
    1728:	462e      	mov	r6, r5
					pad = '0';
    172a:	2530      	movs	r5, #48	; 0x30
    172c:	e231      	b.n	1b92 <cbvprintf+0x816>
			if (conv.flag_plus) {
    172e:	0734      	lsls	r4, r6, #28
    1730:	d424      	bmi.n	177c <cbvprintf+0x400>
				sign = ' ';
    1732:	f016 0610 	ands.w	r6, r6, #16
    1736:	bf18      	it	ne
    1738:	2620      	movne	r6, #32
			if (value.sint < 0) {
    173a:	2800      	cmp	r0, #0
    173c:	f171 0300 	sbcs.w	r3, r1, #0
    1740:	da03      	bge.n	174a <cbvprintf+0x3ce>
				value.uint = -value.sint;
    1742:	4240      	negs	r0, r0
    1744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
				sign = '-';
    1748:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value.uint, &conv, buf, bpe);
    174a:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
    174e:	9300      	str	r3, [sp, #0]
    1750:	aa16      	add	r2, sp, #88	; 0x58
    1752:	ab19      	add	r3, sp, #100	; 0x64
    1754:	f003 faed 	bl	4d32 <encode_uint>
    1758:	4604      	mov	r4, r0
			if (precision >= 0) {
    175a:	2d00      	cmp	r5, #0
    175c:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
    1760:	db0a      	blt.n	1778 <cbvprintf+0x3fc>
				conv.flag_zero = false;
    1762:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
    1766:	1b1a      	subs	r2, r3, r4
				conv.flag_zero = false;
    1768:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    176c:	4295      	cmp	r5, r2
				conv.flag_zero = false;
    176e:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
    1772:	d901      	bls.n	1778 <cbvprintf+0x3fc>
					conv.pad0_value = precision - (int)len;
    1774:	1aad      	subs	r5, r5, r2
    1776:	9517      	str	r5, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
    1778:	4698      	mov	r8, r3
    177a:	e7a4      	b.n	16c6 <cbvprintf+0x34a>
				sign = '+';
    177c:	262b      	movs	r6, #43	; 0x2b
    177e:	e7dc      	b.n	173a <cbvprintf+0x3be>
		switch (conv.specifier) {
    1780:	2600      	movs	r6, #0
    1782:	e7e2      	b.n	174a <cbvprintf+0x3ce>
			if (value.ptr != NULL) {
    1784:	2800      	cmp	r0, #0
    1786:	f000 81af 	beq.w	1ae8 <cbvprintf+0x76c>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    178a:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
    178e:	9300      	str	r3, [sp, #0]
    1790:	aa16      	add	r2, sp, #88	; 0x58
    1792:	ab19      	add	r3, sp, #100	; 0x64
    1794:	2100      	movs	r1, #0
    1796:	f003 facc 	bl	4d32 <encode_uint>
				conv.altform_0c = true;
    179a:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    179e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    17a2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    17a6:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    17aa:	4604      	mov	r4, r0
				conv.altform_0c = true;
    17ac:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
		char sign = 0;
    17b0:	2600      	movs	r6, #0
				goto prec_int_pad0;
    17b2:	e7d2      	b.n	175a <cbvprintf+0x3de>
	switch ((enum length_mod_enum)conv->length_mod) {
    17b4:	2a07      	cmp	r2, #7
    17b6:	f63f ae64 	bhi.w	1482 <cbvprintf+0x106>
    17ba:	e8df f002 	tbb	[pc, r2]
    17be:	040f      	.short	0x040f
    17c0:	0a0a0f07 	.word	0x0a0a0f07
    17c4:	0f0f      	.short	0x0f0f
		*(signed char *)dp = (signed char)count;
    17c6:	f880 9000 	strb.w	r9, [r0]
		break;
    17ca:	e65a      	b.n	1482 <cbvprintf+0x106>
		*(short *)dp = (short)count;
    17cc:	f8a0 9000 	strh.w	r9, [r0]
		break;
    17d0:	e657      	b.n	1482 <cbvprintf+0x106>
		*(intmax_t *)dp = (intmax_t)count;
    17d2:	464a      	mov	r2, r9
    17d4:	17d3      	asrs	r3, r2, #31
    17d6:	e9c0 2300 	strd	r2, r3, [r0]
		break;
    17da:	e652      	b.n	1482 <cbvprintf+0x106>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    17dc:	f8c0 9000 	str.w	r9, [r0]
		break;
    17e0:	e64f      	b.n	1482 <cbvprintf+0x106>
		*sign = '-';
    17e2:	262d      	movs	r6, #45	; 0x2d
    17e4:	e6a8      	b.n	1538 <cbvprintf+0x1bc>
		*sign = '+';
    17e6:	262b      	movs	r6, #43	; 0x2b
    17e8:	e6a6      	b.n	1538 <cbvprintf+0x1bc>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    17ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
    17ee:	429c      	cmp	r4, r3
    17f0:	d12b      	bne.n	184a <cbvprintf+0x4ce>
		if (fract == 0) {
    17f2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    17f6:	4323      	orrs	r3, r4
    17f8:	f1a7 0741 	sub.w	r7, r7, #65	; 0x41
    17fc:	d117      	bne.n	182e <cbvprintf+0x4b2>
			if (isupper((int)c)) {
    17fe:	2f19      	cmp	r7, #25
				*buf++ = 'I';
    1800:	bf95      	itete	ls
    1802:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    1806:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    180a:	f8ad 3064 	strhls.w	r3, [sp, #100]	; 0x64
				*buf++ = 'i';
    180e:	f8ad 3064 	strhhi.w	r3, [sp, #100]	; 0x64
				*buf++ = 'F';
    1812:	bf94      	ite	ls
    1814:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    1816:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    1818:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
		conv->flag_zero = false;
    181c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    1820:	f36f 1386 	bfc	r3, #6, #1
    1824:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
    1828:	f10d 0867 	add.w	r8, sp, #103	; 0x67
		return bps;
    182c:	e752      	b.n	16d4 <cbvprintf+0x358>
			if (isupper((int)c)) {
    182e:	2f19      	cmp	r7, #25
				*buf++ = 'N';
    1830:	bf95      	itete	ls
    1832:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    1836:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    183a:	f8ad 3064 	strhls.w	r3, [sp, #100]	; 0x64
				*buf++ = 'n';
    183e:	f8ad 3064 	strhhi.w	r3, [sp, #100]	; 0x64
				*buf++ = 'N';
    1842:	bf94      	ite	ls
    1844:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    1846:	236e      	movhi	r3, #110	; 0x6e
    1848:	e7e6      	b.n	1818 <cbvprintf+0x49c>
	bool is_subnormal = (exp == 0) && (fract != 0);
    184a:	f04f 0c00 	mov.w	ip, #0
    184e:	e688      	b.n	1562 <cbvprintf+0x1e6>
				exp--;
    1850:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1852:	1892      	adds	r2, r2, r2
    1854:	415b      	adcs	r3, r3
    1856:	2a00      	cmp	r2, #0
    1858:	f173 0100 	sbcs.w	r1, r3, #0
    185c:	daf8      	bge.n	1850 <cbvprintf+0x4d4>
    185e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    1862:	e698      	b.n	1596 <cbvprintf+0x21a>
			_rlrshift(&fract);
    1864:	a812      	add	r0, sp, #72	; 0x48
    1866:	f003 fa19 	bl	4c9c <_rlrshift>
		while ((fract >> 32) >= (MAX_FP1 / 5)) {
    186a:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    186e:	2300      	movs	r3, #0
    1870:	f8cd c020 	str.w	ip, [sp, #32]
    1874:	9309      	str	r3, [sp, #36]	; 0x24
    1876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    187a:	2900      	cmp	r1, #0
    187c:	bf08      	it	eq
    187e:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    1882:	f108 0801 	add.w	r8, r8, #1
    1886:	d2ed      	bcs.n	1864 <cbvprintf+0x4e8>
		fract *= 5U;
    1888:	2005      	movs	r0, #5
    188a:	fba2 2300 	umull	r2, r3, r2, r0
    188e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1892:	9b05      	ldr	r3, [sp, #20]
    1894:	fb00 330c 	mla	r3, r0, ip, r3
    1898:	9305      	str	r3, [sp, #20]
    189a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    189e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    18a2:	3c01      	subs	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
    18a4:	f04f 0c00 	mov.w	ip, #0
    18a8:	9805      	ldr	r0, [sp, #20]
    18aa:	2100      	movs	r1, #0
    18ac:	2300      	movs	r3, #0
    18ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    18b2:	428b      	cmp	r3, r1
    18b4:	bf08      	it	eq
    18b6:	4282      	cmpeq	r2, r0
    18b8:	d208      	bcs.n	18cc <cbvprintf+0x550>
    18ba:	f1bc 0f00 	cmp.w	ip, #0
    18be:	f43f ae71 	beq.w	15a4 <cbvprintf+0x228>
    18c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    18c6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    18ca:	e66b      	b.n	15a4 <cbvprintf+0x228>
			fract <<= 1;
    18cc:	9b04      	ldr	r3, [sp, #16]
    18ce:	18db      	adds	r3, r3, r3
    18d0:	9304      	str	r3, [sp, #16]
    18d2:	9b05      	ldr	r3, [sp, #20]
    18d4:	415b      	adcs	r3, r3
    18d6:	9305      	str	r3, [sp, #20]
			exp--;
    18d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    18dc:	f04f 0c01 	mov.w	ip, #1
    18e0:	e7e2      	b.n	18a8 <cbvprintf+0x52c>
		_ldiv5(&fract);
    18e2:	a812      	add	r0, sp, #72	; 0x48
    18e4:	f003 f9ec 	bl	4cc0 <_ldiv5>
		exp--;
    18e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18ea:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    18ee:	9304      	str	r3, [sp, #16]
    18f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    18f4:	3401      	adds	r4, #1
		while ((fract >> 32) <= (MAX_FP1 / 2)) {
    18f6:	f04f 0c00 	mov.w	ip, #0
    18fa:	2300      	movs	r3, #0
    18fc:	2100      	movs	r1, #0
    18fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    1902:	4299      	cmp	r1, r3
    1904:	bf08      	it	eq
    1906:	4570      	cmpeq	r0, lr
    1908:	d207      	bcs.n	191a <cbvprintf+0x59e>
    190a:	f1bc 0f00 	cmp.w	ip, #0
    190e:	f43f ae4d 	beq.w	15ac <cbvprintf+0x230>
    1912:	9b04      	ldr	r3, [sp, #16]
    1914:	e9cd 3e12 	strd	r3, lr, [sp, #72]	; 0x48
    1918:	e648      	b.n	15ac <cbvprintf+0x230>
			fract <<= 1;
    191a:	9b04      	ldr	r3, [sp, #16]
    191c:	18db      	adds	r3, r3, r3
    191e:	9304      	str	r3, [sp, #16]
    1920:	eb4e 0e0e 	adc.w	lr, lr, lr
			exp--;
    1924:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1928:	f04f 0c01 	mov.w	ip, #1
    192c:	e7e5      	b.n	18fa <cbvprintf+0x57e>
    192e:	2400      	movs	r4, #0
    1930:	46a0      	mov	r8, r4
    1932:	e63f      	b.n	15b4 <cbvprintf+0x238>
			precision -= decexp;
    1934:	1b2d      	subs	r5, r5, r4
			c = 'f';
    1936:	2766      	movs	r7, #102	; 0x66
    1938:	e653      	b.n	15e2 <cbvprintf+0x266>
	bool prune_zero = false;
    193a:	2300      	movs	r3, #0
    193c:	e65a      	b.n	15f4 <cbvprintf+0x278>
		exp = precision + 1;
    193e:	1c6b      	adds	r3, r5, #1
	if (exp > 16) {
    1940:	2b10      	cmp	r3, #16
    1942:	bfa8      	it	ge
    1944:	2310      	movge	r3, #16
    1946:	4698      	mov	r8, r3
    1948:	2210      	movs	r2, #16
    194a:	9211      	str	r2, [sp, #68]	; 0x44
	uint64_t ltemp = BIT64(59);
    194c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1950:	2200      	movs	r2, #0
    1952:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    1956:	f1b8 0801 	subs.w	r8, r8, #1
    195a:	d222      	bcs.n	19a2 <cbvprintf+0x626>
	fract += ltemp;
    195c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    195e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1960:	9915      	ldr	r1, [sp, #84]	; 0x54
    1962:	189b      	adds	r3, r3, r2
    1964:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1966:	eb41 0202 	adc.w	r2, r1, r2
    196a:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & (0x0FU << 28)) {
    196e:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    1972:	930e      	str	r3, [sp, #56]	; 0x38
    1974:	2300      	movs	r3, #0
    1976:	930f      	str	r3, [sp, #60]	; 0x3c
    1978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    197c:	4313      	orrs	r3, r2
    197e:	d006      	beq.n	198e <cbvprintf+0x612>
		_ldiv5(&fract);
    1980:	a812      	add	r0, sp, #72	; 0x48
    1982:	f003 f99d 	bl	4cc0 <_ldiv5>
		_rlrshift(&fract);
    1986:	a812      	add	r0, sp, #72	; 0x48
    1988:	f003 f988 	bl	4c9c <_rlrshift>
		decexp++;
    198c:	3401      	adds	r4, #1
	if (c == 'f') {
    198e:	2f66      	cmp	r7, #102	; 0x66
    1990:	d17c      	bne.n	1a8c <cbvprintf+0x710>
		if (decexp > 0) {
    1992:	2c00      	cmp	r4, #0
    1994:	dc0c      	bgt.n	19b0 <cbvprintf+0x634>
			*buf++ = '0';
    1996:	2330      	movs	r3, #48	; 0x30
    1998:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    199c:	f10d 0865 	add.w	r8, sp, #101	; 0x65
    19a0:	e015      	b.n	19ce <cbvprintf+0x652>
		_ldiv5(&ltemp);
    19a2:	a814      	add	r0, sp, #80	; 0x50
    19a4:	f003 f98c 	bl	4cc0 <_ldiv5>
		_rlrshift(&ltemp);
    19a8:	a814      	add	r0, sp, #80	; 0x50
    19aa:	f003 f977 	bl	4c9c <_rlrshift>
    19ae:	e7d2      	b.n	1956 <cbvprintf+0x5da>
	char *buf = bps;
    19b0:	f10d 0864 	add.w	r8, sp, #100	; 0x64
			while (decexp > 0 && digit_count > 0) {
    19b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    19b6:	2a00      	cmp	r2, #0
    19b8:	dd07      	ble.n	19ca <cbvprintf+0x64e>
				*buf++ = _get_digit(&fract, &digit_count);
    19ba:	a911      	add	r1, sp, #68	; 0x44
    19bc:	a812      	add	r0, sp, #72	; 0x48
    19be:	f003 f9a1 	bl	4d04 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    19c2:	3c01      	subs	r4, #1
				*buf++ = _get_digit(&fract, &digit_count);
    19c4:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    19c8:	d1f4      	bne.n	19b4 <cbvprintf+0x638>
			conv->pad0_value = decexp;
    19ca:	9417      	str	r4, [sp, #92]	; 0x5c
			decexp = 0;
    19cc:	2400      	movs	r4, #0
		if (conv->flag_hash || (precision > 0)) {
    19ce:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    19d2:	0691      	lsls	r1, r2, #26
    19d4:	d401      	bmi.n	19da <cbvprintf+0x65e>
    19d6:	2d00      	cmp	r5, #0
    19d8:	dd1b      	ble.n	1a12 <cbvprintf+0x696>
			*buf++ = '.';
    19da:	222e      	movs	r2, #46	; 0x2e
    19dc:	f808 2b01 	strb.w	r2, [r8], #1
		if (decexp < 0 && precision > 0) {
    19e0:	b194      	cbz	r4, 1a08 <cbvprintf+0x68c>
    19e2:	2d00      	cmp	r5, #0
    19e4:	dd15      	ble.n	1a12 <cbvprintf+0x696>
			conv->pad0_value = -decexp;
    19e6:	4262      	negs	r2, r4
    19e8:	42aa      	cmp	r2, r5
    19ea:	bfa8      	it	ge
    19ec:	462a      	movge	r2, r5
			conv->pad_postdp = (conv->pad0_value > 0);
    19ee:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
			conv->pad0_value = -decexp;
    19f2:	9217      	str	r2, [sp, #92]	; 0x5c
			conv->pad_postdp = (conv->pad0_value > 0);
    19f4:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    19f6:	eba5 0502 	sub.w	r5, r5, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    19fa:	bfd4      	ite	le
    19fc:	2200      	movle	r2, #0
    19fe:	2201      	movgt	r2, #1
    1a00:	f362 1145 	bfi	r1, r2, #5, #1
    1a04:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	while (precision > 0 && digit_count > 0) {
    1a08:	2d00      	cmp	r5, #0
    1a0a:	dd02      	ble.n	1a12 <cbvprintf+0x696>
    1a0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    1a0e:	2a00      	cmp	r2, #0
    1a10:	dc52      	bgt.n	1ab8 <cbvprintf+0x73c>
	if (prune_zero) {
    1a12:	9b04      	ldr	r3, [sp, #16]
    1a14:	2b00      	cmp	r3, #0
    1a16:	d15a      	bne.n	1ace <cbvprintf+0x752>
	conv->pad0_pre_exp = precision;
    1a18:	9518      	str	r5, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
    1a1a:	f007 02df 	and.w	r2, r7, #223	; 0xdf
    1a1e:	2a45      	cmp	r2, #69	; 0x45
    1a20:	d122      	bne.n	1a68 <cbvprintf+0x6ec>
		if (decexp < 0) {
    1a22:	2c00      	cmp	r4, #0
		*buf++ = c;
    1a24:	4641      	mov	r1, r8
			decexp = -decexp;
    1a26:	bfba      	itte	lt
    1a28:	4264      	neglt	r4, r4
			*buf++ = '-';
    1a2a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    1a2c:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    1a2e:	2c63      	cmp	r4, #99	; 0x63
		*buf++ = c;
    1a30:	f801 7b02 	strb.w	r7, [r1], #2
			*buf++ = '-';
    1a34:	f888 2001 	strb.w	r2, [r8, #1]
		if (decexp >= 100) {
    1a38:	dd0a      	ble.n	1a50 <cbvprintf+0x6d4>
			*buf++ = (decexp / 100) + '0';
    1a3a:	2064      	movs	r0, #100	; 0x64
    1a3c:	fb94 f2f0 	sdiv	r2, r4, r0
    1a40:	f102 0530 	add.w	r5, r2, #48	; 0x30
    1a44:	f108 0103 	add.w	r1, r8, #3
    1a48:	f888 5002 	strb.w	r5, [r8, #2]
			decexp %= 100;
    1a4c:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
    1a50:	200a      	movs	r0, #10
    1a52:	4688      	mov	r8, r1
    1a54:	fb94 f2f0 	sdiv	r2, r4, r0
		*buf++ = (decexp % 10) + '0';
    1a58:	fb00 4412 	mls	r4, r0, r2, r4
		*buf++ = (decexp / 10) + '0';
    1a5c:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1a60:	3430      	adds	r4, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1a62:	f808 5b02 	strb.w	r5, [r8], #2
		*buf++ = (decexp % 10) + '0';
    1a66:	704c      	strb	r4, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1a68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    1a6a:	2a00      	cmp	r2, #0
    1a6c:	dc3a      	bgt.n	1ae4 <cbvprintf+0x768>
    1a6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a70:	2a00      	cmp	r2, #0
    1a72:	bfd4      	ite	le
    1a74:	2200      	movle	r2, #0
    1a76:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1a78:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
    1a7c:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    1a80:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1a82:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
    1a86:	f888 2000 	strb.w	r2, [r8]
	return bps;
    1a8a:	e623      	b.n	16d4 <cbvprintf+0x358>
		*buf = _get_digit(&fract, &digit_count);
    1a8c:	a911      	add	r1, sp, #68	; 0x44
    1a8e:	a812      	add	r0, sp, #72	; 0x48
    1a90:	f003 f938 	bl	4d04 <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
    1a94:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*buf = _get_digit(&fract, &digit_count);
    1a98:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
		if (*buf++ != '0') {
    1a9c:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1a9e:	bf18      	it	ne
    1aa0:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1aa4:	069a      	lsls	r2, r3, #26
    1aa6:	d401      	bmi.n	1aac <cbvprintf+0x730>
    1aa8:	2d00      	cmp	r5, #0
    1aaa:	dd0d      	ble.n	1ac8 <cbvprintf+0x74c>
			*buf++ = '.';
    1aac:	232e      	movs	r3, #46	; 0x2e
    1aae:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
    1ab2:	f10d 0866 	add.w	r8, sp, #102	; 0x66
    1ab6:	e7a7      	b.n	1a08 <cbvprintf+0x68c>
		*buf++ = _get_digit(&fract, &digit_count);
    1ab8:	a911      	add	r1, sp, #68	; 0x44
    1aba:	a812      	add	r0, sp, #72	; 0x48
    1abc:	f003 f922 	bl	4d04 <_get_digit>
		precision--;
    1ac0:	3d01      	subs	r5, #1
		*buf++ = _get_digit(&fract, &digit_count);
    1ac2:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    1ac6:	e79f      	b.n	1a08 <cbvprintf+0x68c>
		if (*buf++ != '0') {
    1ac8:	f10d 0865 	add.w	r8, sp, #101	; 0x65
    1acc:	e7a1      	b.n	1a12 <cbvprintf+0x696>
		conv->pad0_pre_exp = 0;
    1ace:	2200      	movs	r2, #0
    1ad0:	9218      	str	r2, [sp, #96]	; 0x60
		while (*--buf == '0') {
    1ad2:	4641      	mov	r1, r8
    1ad4:	f818 2d01 	ldrb.w	r2, [r8, #-1]!
    1ad8:	2a30      	cmp	r2, #48	; 0x30
    1ada:	d0fa      	beq.n	1ad2 <cbvprintf+0x756>
		if (*buf != '.') {
    1adc:	2a2e      	cmp	r2, #46	; 0x2e
    1ade:	bf18      	it	ne
    1ae0:	4688      	movne	r8, r1
    1ae2:	e79a      	b.n	1a1a <cbvprintf+0x69e>
		|| (conv->pad0_pre_exp > 0);
    1ae4:	2201      	movs	r2, #1
    1ae6:	e7c7      	b.n	1a78 <cbvprintf+0x6fc>
			bpe = bps + 5;
    1ae8:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 1cc4 <cbvprintf+0x948>
		char sign = 0;
    1aec:	4606      	mov	r6, r0
			bps = "(nil)";
    1aee:	f1a8 0405 	sub.w	r4, r8, #5
    1af2:	e5f0      	b.n	16d6 <cbvprintf+0x35a>
		} else if (conv.altform_0) {
    1af4:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
    1af6:	bf48      	it	mi
    1af8:	3701      	addmi	r7, #1
    1afa:	e5f6      	b.n	16ea <cbvprintf+0x36e>
					OUTC(pad);
    1afc:	9b03      	ldr	r3, [sp, #12]
    1afe:	4651      	mov	r1, sl
    1b00:	4628      	mov	r0, r5
    1b02:	4798      	blx	r3
    1b04:	2800      	cmp	r0, #0
    1b06:	f6ff add0 	blt.w	16aa <cbvprintf+0x32e>
    1b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b0c:	eba7 0903 	sub.w	r9, r7, r3
				while (width-- > 0) {
    1b10:	2b00      	cmp	r3, #0
    1b12:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1b16:	930a      	str	r3, [sp, #40]	; 0x28
    1b18:	dcf0      	bgt.n	1afc <cbvprintf+0x780>
		if (sign != 0) {
    1b1a:	b146      	cbz	r6, 1b2e <cbvprintf+0x7b2>
			OUTC(sign);
    1b1c:	9b03      	ldr	r3, [sp, #12]
    1b1e:	4651      	mov	r1, sl
    1b20:	4630      	mov	r0, r6
    1b22:	4798      	blx	r3
    1b24:	2800      	cmp	r0, #0
    1b26:	f6ff adc0 	blt.w	16aa <cbvprintf+0x32e>
    1b2a:	f109 0901 	add.w	r9, r9, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv.pad_fp) {
    1b2e:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    1b32:	0655      	lsls	r5, r2, #25
    1b34:	f140 8081 	bpl.w	1c3a <cbvprintf+0x8be>
			if (conv.specifier_a) {
    1b38:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
    1b3c:	2a00      	cmp	r2, #0
    1b3e:	db2d      	blt.n	1b9c <cbvprintf+0x820>
    1b40:	eba9 0904 	sub.w	r9, r9, r4
				while (isdigit((int)*cp)) {
    1b44:	7820      	ldrb	r0, [r4, #0]
    1b46:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1b4a:	2a09      	cmp	r2, #9
    1b4c:	4625      	mov	r5, r4
    1b4e:	eb09 0604 	add.w	r6, r9, r4
    1b52:	f104 0401 	add.w	r4, r4, #1
    1b56:	d945      	bls.n	1be4 <cbvprintf+0x868>
				if (!conv.pad_postdp) {
    1b58:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv.pad0_value;
    1b5c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
				if (!conv.pad_postdp) {
    1b5e:	0690      	lsls	r0, r2, #26
    1b60:	d406      	bmi.n	1b70 <cbvprintf+0x7f4>
    1b62:	19a7      	adds	r7, r4, r6
					while (pad_len-- > 0) {
    1b64:	2c00      	cmp	r4, #0
    1b66:	eba7 0604 	sub.w	r6, r7, r4
    1b6a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    1b6e:	dc3f      	bgt.n	1bf0 <cbvprintf+0x874>
				if (*cp == '.') {
    1b70:	7828      	ldrb	r0, [r5, #0]
    1b72:	282e      	cmp	r0, #46	; 0x2e
    1b74:	d10a      	bne.n	1b8c <cbvprintf+0x810>
					OUTC(*cp++);
    1b76:	9b03      	ldr	r3, [sp, #12]
    1b78:	4651      	mov	r1, sl
    1b7a:	4798      	blx	r3
						OUTC('0');
    1b7c:	2800      	cmp	r0, #0
    1b7e:	f6ff ad94 	blt.w	16aa <cbvprintf+0x32e>
					while (pad_len-- > 0) {
    1b82:	2c00      	cmp	r4, #0
						OUTC('0');
    1b84:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    1b88:	dc39      	bgt.n	1bfe <cbvprintf+0x882>
					OUTC(*cp++);
    1b8a:	3501      	adds	r5, #1
    1b8c:	1b76      	subs	r6, r6, r5
    1b8e:	e042      	b.n	1c16 <cbvprintf+0x89a>
				char pad = ' ';
    1b90:	2520      	movs	r5, #32
					pad = '0';
    1b92:	970a      	str	r7, [sp, #40]	; 0x28
    1b94:	444f      	add	r7, r9
    1b96:	e7b8      	b.n	1b0a <cbvprintf+0x78e>
			width -= (int)nj_len;
    1b98:	970a      	str	r7, [sp, #40]	; 0x28
    1b9a:	e7be      	b.n	1b1a <cbvprintf+0x79e>
			if (conv.specifier_a) {
    1b9c:	4625      	mov	r5, r4
    1b9e:	eba9 0904 	sub.w	r9, r9, r4
    1ba2:	462f      	mov	r7, r5
    1ba4:	eb09 0405 	add.w	r4, r9, r5
				while (*cp != 'p') {
    1ba8:	f815 0b01 	ldrb.w	r0, [r5], #1
    1bac:	2870      	cmp	r0, #112	; 0x70
    1bae:	d113      	bne.n	1bd8 <cbvprintf+0x85c>
			while (pad_len-- > 0) {
    1bb0:	9d18      	ldr	r5, [sp, #96]	; 0x60
    1bb2:	4425      	add	r5, r4
    1bb4:	1b2a      	subs	r2, r5, r4
    1bb6:	2a00      	cmp	r2, #0
    1bb8:	dc36      	bgt.n	1c28 <cbvprintf+0x8ac>
			OUTS(cp, bpe);
    1bba:	9803      	ldr	r0, [sp, #12]
    1bbc:	4643      	mov	r3, r8
    1bbe:	463a      	mov	r2, r7
    1bc0:	4651      	mov	r1, sl
    1bc2:	f003 f901 	bl	4dc8 <outs>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	f6ff ad6f 	blt.w	16aa <cbvprintf+0x32e>
    1bcc:	4420      	add	r0, r4
    1bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bd0:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    1bd2:	4681      	mov	r9, r0
    1bd4:	461d      	mov	r5, r3
    1bd6:	e06f      	b.n	1cb8 <cbvprintf+0x93c>
					OUTC(*cp++);
    1bd8:	9b03      	ldr	r3, [sp, #12]
    1bda:	4651      	mov	r1, sl
    1bdc:	4798      	blx	r3
    1bde:	2800      	cmp	r0, #0
    1be0:	dadf      	bge.n	1ba2 <cbvprintf+0x826>
    1be2:	e562      	b.n	16aa <cbvprintf+0x32e>
					OUTC(*cp++);
    1be4:	9b03      	ldr	r3, [sp, #12]
    1be6:	4651      	mov	r1, sl
    1be8:	4798      	blx	r3
    1bea:	2800      	cmp	r0, #0
    1bec:	daaa      	bge.n	1b44 <cbvprintf+0x7c8>
    1bee:	e55c      	b.n	16aa <cbvprintf+0x32e>
						OUTC('0');
    1bf0:	9b03      	ldr	r3, [sp, #12]
    1bf2:	4651      	mov	r1, sl
    1bf4:	2030      	movs	r0, #48	; 0x30
    1bf6:	4798      	blx	r3
    1bf8:	2800      	cmp	r0, #0
    1bfa:	dab3      	bge.n	1b64 <cbvprintf+0x7e8>
    1bfc:	e555      	b.n	16aa <cbvprintf+0x32e>
						OUTC('0');
    1bfe:	9b03      	ldr	r3, [sp, #12]
    1c00:	4651      	mov	r1, sl
    1c02:	2030      	movs	r0, #48	; 0x30
    1c04:	4798      	blx	r3
    1c06:	3c01      	subs	r4, #1
    1c08:	e7b8      	b.n	1b7c <cbvprintf+0x800>
					OUTC(*cp++);
    1c0a:	9b03      	ldr	r3, [sp, #12]
    1c0c:	4651      	mov	r1, sl
    1c0e:	4798      	blx	r3
    1c10:	2800      	cmp	r0, #0
    1c12:	f6ff ad4a 	blt.w	16aa <cbvprintf+0x32e>
    1c16:	462f      	mov	r7, r5
    1c18:	1974      	adds	r4, r6, r5
				while (isdigit((int)*cp)) {
    1c1a:	f815 0b01 	ldrb.w	r0, [r5], #1
    1c1e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1c22:	2a09      	cmp	r2, #9
    1c24:	d9f1      	bls.n	1c0a <cbvprintf+0x88e>
    1c26:	e7c3      	b.n	1bb0 <cbvprintf+0x834>
				OUTC('0');
    1c28:	9b03      	ldr	r3, [sp, #12]
    1c2a:	4651      	mov	r1, sl
    1c2c:	2030      	movs	r0, #48	; 0x30
    1c2e:	4798      	blx	r3
    1c30:	2800      	cmp	r0, #0
    1c32:	f6ff ad3a 	blt.w	16aa <cbvprintf+0x32e>
    1c36:	3401      	adds	r4, #1
    1c38:	e7bc      	b.n	1bb4 <cbvprintf+0x838>
			if (conv.altform_0c | conv.altform_0) {
    1c3a:	06d1      	lsls	r1, r2, #27
    1c3c:	d401      	bmi.n	1c42 <cbvprintf+0x8c6>
    1c3e:	0712      	lsls	r2, r2, #28
    1c40:	d508      	bpl.n	1c54 <cbvprintf+0x8d8>
				OUTC('0');
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	4651      	mov	r1, sl
    1c46:	2030      	movs	r0, #48	; 0x30
    1c48:	4798      	blx	r3
    1c4a:	2800      	cmp	r0, #0
    1c4c:	f6ff ad2d 	blt.w	16aa <cbvprintf+0x32e>
    1c50:	f109 0901 	add.w	r9, r9, #1
			if (conv.altform_0c) {
    1c54:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
    1c58:	06d3      	lsls	r3, r2, #27
    1c5a:	d509      	bpl.n	1c70 <cbvprintf+0x8f4>
				OUTC(conv.specifier);
    1c5c:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
    1c60:	9b03      	ldr	r3, [sp, #12]
    1c62:	4651      	mov	r1, sl
    1c64:	4798      	blx	r3
    1c66:	2800      	cmp	r0, #0
    1c68:	f6ff ad1f 	blt.w	16aa <cbvprintf+0x32e>
    1c6c:	f109 0901 	add.w	r9, r9, #1
			while (pad_len-- > 0) {
    1c70:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    1c72:	444d      	add	r5, r9
    1c74:	eba5 0209 	sub.w	r2, r5, r9
    1c78:	2a00      	cmp	r2, #0
    1c7a:	dc0a      	bgt.n	1c92 <cbvprintf+0x916>
			OUTS(bps, bpe);
    1c7c:	9803      	ldr	r0, [sp, #12]
    1c7e:	4643      	mov	r3, r8
    1c80:	4622      	mov	r2, r4
    1c82:	4651      	mov	r1, sl
    1c84:	f003 f8a0 	bl	4dc8 <outs>
    1c88:	2800      	cmp	r0, #0
    1c8a:	f6ff ad0e 	blt.w	16aa <cbvprintf+0x32e>
    1c8e:	4448      	add	r0, r9
    1c90:	e79d      	b.n	1bce <cbvprintf+0x852>
				OUTC('0');
    1c92:	9b03      	ldr	r3, [sp, #12]
    1c94:	4651      	mov	r1, sl
    1c96:	2030      	movs	r0, #48	; 0x30
    1c98:	4798      	blx	r3
    1c9a:	2800      	cmp	r0, #0
    1c9c:	f6ff ad05 	blt.w	16aa <cbvprintf+0x32e>
    1ca0:	f109 0901 	add.w	r9, r9, #1
    1ca4:	e7e6      	b.n	1c74 <cbvprintf+0x8f8>
			OUTC(' ');
    1ca6:	9b03      	ldr	r3, [sp, #12]
    1ca8:	4651      	mov	r1, sl
    1caa:	2020      	movs	r0, #32
    1cac:	4798      	blx	r3
    1cae:	2800      	cmp	r0, #0
    1cb0:	f6ff acfb 	blt.w	16aa <cbvprintf+0x32e>
    1cb4:	f109 0901 	add.w	r9, r9, #1
		while (width > 0) {
    1cb8:	eba5 0309 	sub.w	r3, r5, r9
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	dcf2      	bgt.n	1ca6 <cbvprintf+0x92a>
    1cc0:	f7ff bbdf 	b.w	1482 <cbvprintf+0x106>
    1cc4:	00005860 	.word	0x00005860

00001cc8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1cc8:	b510      	push	{r4, lr}
    1cca:	4807      	ldr	r0, [pc, #28]	; (1ce8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    1ccc:	4c07      	ldr	r4, [pc, #28]	; (1cec <uart_console_init+0x24>)
    1cce:	f001 ff41 	bl	3b54 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1cd2:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <uart_console_init+0x28>)
    1cd4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1cd6:	4620      	mov	r0, r4
    1cd8:	f000 fe18 	bl	290c <__stdout_hook_install>
	__printk_hook_install(console_out);
    1cdc:	4620      	mov	r0, r4
    1cde:	f7ff f8db 	bl	e98 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1ce2:	2000      	movs	r0, #0
    1ce4:	bd10      	pop	{r4, pc}
    1ce6:	bf00      	nop
    1ce8:	00005861 	.word	0x00005861
    1cec:	00001cf5 	.word	0x00001cf5
    1cf0:	200001ac 	.word	0x200001ac

00001cf4 <console_out>:
	if ('\n' == c) {
    1cf4:	280a      	cmp	r0, #10
{
    1cf6:	b538      	push	{r3, r4, r5, lr}
    1cf8:	4d07      	ldr	r5, [pc, #28]	; (1d18 <console_out+0x24>)
    1cfa:	4604      	mov	r4, r0
	if ('\n' == c) {
    1cfc:	d104      	bne.n	1d08 <console_out+0x14>
    1cfe:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1d00:	6883      	ldr	r3, [r0, #8]
    1d02:	210d      	movs	r1, #13
    1d04:	685b      	ldr	r3, [r3, #4]
    1d06:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1d08:	6828      	ldr	r0, [r5, #0]
    1d0a:	6883      	ldr	r3, [r0, #8]
    1d0c:	b2e1      	uxtb	r1, r4
    1d0e:	685b      	ldr	r3, [r3, #4]
    1d10:	4798      	blx	r3
}
    1d12:	4620      	mov	r0, r4
    1d14:	bd38      	pop	{r3, r4, r5, pc}
    1d16:	bf00      	nop
    1d18:	200001ac 	.word	0x200001ac

00001d1c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1d1c:	4a0e      	ldr	r2, [pc, #56]	; (1d58 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d1e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d20:	1a84      	subs	r4, r0, r2
    1d22:	10a3      	asrs	r3, r4, #2
    1d24:	4c0d      	ldr	r4, [pc, #52]	; (1d5c <onoff_stop+0x40>)
    1d26:	435c      	muls	r4, r3
{
    1d28:	4605      	mov	r5, r0
    1d2a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    1d2c:	200c      	movs	r0, #12
    1d2e:	fb00 2004 	mla	r0, r0, r4, r2
{
    1d32:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    1d34:	2140      	movs	r1, #64	; 0x40
    1d36:	4408      	add	r0, r1
    1d38:	f003 f866 	bl	4e08 <set_off_state>
	if (err < 0) {
    1d3c:	1e01      	subs	r1, r0, #0
    1d3e:	db05      	blt.n	1d4c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1d40:	4b07      	ldr	r3, [pc, #28]	; (1d60 <onoff_stop+0x44>)
    1d42:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1d46:	6863      	ldr	r3, [r4, #4]
    1d48:	4798      	blx	r3
	return 0;
    1d4a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1d4c:	4628      	mov	r0, r5
    1d4e:	4633      	mov	r3, r6
}
    1d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1d54:	4718      	bx	r3
    1d56:	bf00      	nop
    1d58:	200001c0 	.word	0x200001c0
    1d5c:	b6db6db7 	.word	0xb6db6db7
    1d60:	0000572c 	.word	0x0000572c

00001d64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d68:	4e10      	ldr	r6, [pc, #64]	; (1dac <onoff_start+0x48>)
    1d6a:	1b84      	subs	r4, r0, r6
    1d6c:	10a3      	asrs	r3, r4, #2
    1d6e:	4c10      	ldr	r4, [pc, #64]	; (1db0 <onoff_start+0x4c>)
    1d70:	435c      	muls	r4, r3
    1d72:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    1d74:	250c      	movs	r5, #12
    1d76:	4365      	muls	r5, r4
{
    1d78:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    1d7a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    1d7e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    1d80:	4430      	add	r0, r6
    1d82:	2140      	movs	r1, #64	; 0x40
    1d84:	f003 f859 	bl	4e3a <set_starting_state>
	if (err < 0) {
    1d88:	1e01      	subs	r1, r0, #0
    1d8a:	db09      	blt.n	1da0 <onoff_start+0x3c>
	subdata->cb = cb;
    1d8c:	4a09      	ldr	r2, [pc, #36]	; (1db4 <onoff_start+0x50>)
    1d8e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    1d90:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1d94:	4b08      	ldr	r3, [pc, #32]	; (1db8 <onoff_start+0x54>)
    1d96:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1d9e:	4718      	bx	r3
		notify(mgr, err);
    1da0:	4640      	mov	r0, r8
    1da2:	463b      	mov	r3, r7
}
    1da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1da8:	4718      	bx	r3
    1daa:	bf00      	nop
    1dac:	200001c0 	.word	0x200001c0
    1db0:	b6db6db7 	.word	0xb6db6db7
    1db4:	00004e9d 	.word	0x00004e9d
    1db8:	0000572c 	.word	0x0000572c

00001dbc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dbc:	2200      	movs	r2, #0
{
    1dbe:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dc0:	2101      	movs	r1, #1
{
    1dc2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dc4:	4610      	mov	r0, r2
    1dc6:	f000 fa87 	bl	22d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1dca:	2000      	movs	r0, #0
    1dcc:	f000 fa66 	bl	229c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1dd0:	480f      	ldr	r0, [pc, #60]	; (1e10 <clk_init+0x54>)
    1dd2:	f001 fb5b 	bl	348c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1dd6:	4b0f      	ldr	r3, [pc, #60]	; (1e14 <clk_init+0x58>)
    1dd8:	4298      	cmp	r0, r3
    1dda:	d115      	bne.n	1e08 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1ddc:	f003 f9f9 	bl	51d2 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1de0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1de2:	490d      	ldr	r1, [pc, #52]	; (1e18 <clk_init+0x5c>)
    1de4:	4630      	mov	r0, r6
    1de6:	f002 fe17 	bl	4a18 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1dea:	2800      	cmp	r0, #0
    1dec:	db0b      	blt.n	1e06 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dee:	2501      	movs	r5, #1
    1df0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1df2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1df4:	4908      	ldr	r1, [pc, #32]	; (1e18 <clk_init+0x5c>)
    1df6:	f104 001c 	add.w	r0, r4, #28
    1dfa:	f002 fe0d 	bl	4a18 <onoff_manager_init>
		if (err < 0) {
    1dfe:	2800      	cmp	r0, #0
    1e00:	db01      	blt.n	1e06 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e02:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1e04:	2000      	movs	r0, #0
}
    1e06:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1e08:	f06f 0004 	mvn.w	r0, #4
    1e0c:	e7fb      	b.n	1e06 <clk_init+0x4a>
    1e0e:	bf00      	nop
    1e10:	00001e51 	.word	0x00001e51
    1e14:	0bad0000 	.word	0x0bad0000
    1e18:	0000573c 	.word	0x0000573c

00001e1c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1e1c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1e1e:	230c      	movs	r3, #12
    1e20:	4809      	ldr	r0, [pc, #36]	; (1e48 <clkstarted_handle.constprop.0+0x2c>)
    1e22:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1e24:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1e26:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1e28:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1e2c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1e2e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1e30:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1e32:	4418      	add	r0, r3
    1e34:	f003 f81f 	bl	4e76 <set_on_state>
	if (callback) {
    1e38:	b12d      	cbz	r5, 1e46 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e3a:	4632      	mov	r2, r6
    1e3c:	462b      	mov	r3, r5
    1e3e:	4803      	ldr	r0, [pc, #12]	; (1e4c <clkstarted_handle.constprop.0+0x30>)
}
    1e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e44:	4718      	bx	r3
}
    1e46:	bd70      	pop	{r4, r5, r6, pc}
    1e48:	200001c0 	.word	0x200001c0
    1e4c:	2000004c 	.word	0x2000004c

00001e50 <clock_event_handler>:
	switch (event) {
    1e50:	b110      	cbz	r0, 1e58 <clock_event_handler+0x8>
    1e52:	2801      	cmp	r0, #1
    1e54:	d004      	beq.n	1e60 <clock_event_handler+0x10>
    1e56:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e58:	4b03      	ldr	r3, [pc, #12]	; (1e68 <clock_event_handler+0x18>)
    1e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1e5c:	075b      	lsls	r3, r3, #29
    1e5e:	d101      	bne.n	1e64 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e60:	f7ff bfdc 	b.w	1e1c <clkstarted_handle.constprop.0>
}
    1e64:	4770      	bx	lr
    1e66:	bf00      	nop
    1e68:	200001c0 	.word	0x200001c0

00001e6c <generic_hfclk_start>:
{
    1e6c:	b508      	push	{r3, lr}
    1e6e:	f04f 0320 	mov.w	r3, #32
    1e72:	f3ef 8111 	mrs	r1, BASEPRI
    1e76:	f383 8811 	msr	BASEPRI, r3
    1e7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1e7e:	4a12      	ldr	r2, [pc, #72]	; (1ec8 <generic_hfclk_start+0x5c>)
    1e80:	6813      	ldr	r3, [r2, #0]
    1e82:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1e86:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1e8a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1e8c:	d00c      	beq.n	1ea8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1e92:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e96:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1e9a:	f013 0301 	ands.w	r3, r3, #1
    1e9e:	d003      	beq.n	1ea8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1ea0:	480a      	ldr	r0, [pc, #40]	; (1ecc <generic_hfclk_start+0x60>)
    1ea2:	f002 ffe8 	bl	4e76 <set_on_state>
			already_started = true;
    1ea6:	2301      	movs	r3, #1
	__asm__ volatile(
    1ea8:	f381 8811 	msr	BASEPRI, r1
    1eac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1eb0:	b123      	cbz	r3, 1ebc <generic_hfclk_start+0x50>
}
    1eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    1eb6:	2000      	movs	r0, #0
    1eb8:	f7ff bfb0 	b.w	1e1c <clkstarted_handle.constprop.0>
}
    1ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1ec0:	2001      	movs	r0, #1
    1ec2:	f001 baf3 	b.w	34ac <nrfx_clock_start>
    1ec6:	bf00      	nop
    1ec8:	20000210 	.word	0x20000210
    1ecc:	20000200 	.word	0x20000200

00001ed0 <lfclk_start>:
{
    1ed0:	b510      	push	{r4, lr}
	if (!once) {
    1ed2:	4c07      	ldr	r4, [pc, #28]	; (1ef0 <lfclk_start+0x20>)
    1ed4:	7823      	ldrb	r3, [r4, #0]
    1ed6:	b92b      	cbnz	r3, 1ee4 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1ed8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1edc:	f003 fafb 	bl	54d6 <z_impl_k_busy_wait>
		once = true;
    1ee0:	2301      	movs	r3, #1
    1ee2:	7023      	strb	r3, [r4, #0]
}
    1ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1ee8:	2000      	movs	r0, #0
    1eea:	f001 badf 	b.w	34ac <nrfx_clock_start>
    1eee:	bf00      	nop
    1ef0:	20000370 	.word	0x20000370

00001ef4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ef4:	4b09      	ldr	r3, [pc, #36]	; (1f1c <generic_hfclk_stop+0x28>)
    1ef6:	f3bf 8f5b 	dmb	ish
    1efa:	e853 2f00 	ldrex	r2, [r3]
    1efe:	f022 0102 	bic.w	r1, r2, #2
    1f02:	e843 1000 	strex	r0, r1, [r3]
    1f06:	2800      	cmp	r0, #0
    1f08:	d1f7      	bne.n	1efa <generic_hfclk_stop+0x6>
    1f0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1f0e:	07d3      	lsls	r3, r2, #31
    1f10:	d402      	bmi.n	1f18 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1f12:	2001      	movs	r0, #1
    1f14:	f001 bb16 	b.w	3544 <nrfx_clock_stop>
}
    1f18:	4770      	bx	lr
    1f1a:	bf00      	nop
    1f1c:	20000210 	.word	0x20000210

00001f20 <api_blocking_start>:
{
    1f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f22:	2200      	movs	r2, #0
    1f24:	2301      	movs	r3, #1
    1f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f2a:	4a09      	ldr	r2, [pc, #36]	; (1f50 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f2c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f30:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f32:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f36:	f002 ffd4 	bl	4ee2 <api_start>
	if (err < 0) {
    1f3a:	2800      	cmp	r0, #0
    1f3c:	db05      	blt.n	1f4a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f42:	2300      	movs	r3, #0
    1f44:	4668      	mov	r0, sp
    1f46:	f002 fa9f 	bl	4488 <z_impl_k_sem_take>
}
    1f4a:	b005      	add	sp, #20
    1f4c:	f85d fb04 	ldr.w	pc, [sp], #4
    1f50:	00004eaf 	.word	0x00004eaf

00001f54 <z_nrf_clock_control_lf_on>:
{
    1f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f58:	493a      	ldr	r1, [pc, #232]	; (2044 <z_nrf_clock_control_lf_on+0xf0>)
    1f5a:	f3bf 8f5b 	dmb	ish
    1f5e:	4606      	mov	r6, r0
    1f60:	2201      	movs	r2, #1
    1f62:	e851 3f00 	ldrex	r3, [r1]
    1f66:	e841 2000 	strex	r0, r2, [r1]
    1f6a:	2800      	cmp	r0, #0
    1f6c:	d1f9      	bne.n	1f62 <z_nrf_clock_control_lf_on+0xe>
    1f6e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1f72:	b933      	cbnz	r3, 1f82 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f74:	4934      	ldr	r1, [pc, #208]	; (2048 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1f76:	4835      	ldr	r0, [pc, #212]	; (204c <z_nrf_clock_control_lf_on+0xf8>)
    1f78:	604b      	str	r3, [r1, #4]
    1f7a:	60cb      	str	r3, [r1, #12]
    1f7c:	608a      	str	r2, [r1, #8]
    1f7e:	f002 fd5e 	bl	4a3e <onoff_request>
	switch (start_mode) {
    1f82:	1e73      	subs	r3, r6, #1
    1f84:	2b01      	cmp	r3, #1
    1f86:	d832      	bhi.n	1fee <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1f88:	2e01      	cmp	r6, #1
    1f8a:	d107      	bne.n	1f9c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1f94:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1f98:	2b01      	cmp	r3, #1
    1f9a:	d028      	beq.n	1fee <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f9c:	f003 fa95 	bl	54ca <k_is_in_isr>
    1fa0:	4604      	mov	r4, r0
    1fa2:	b918      	cbnz	r0, 1fac <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1fa4:	4b2a      	ldr	r3, [pc, #168]	; (2050 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d144      	bne.n	2036 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    1fac:	f04f 0320 	mov.w	r3, #32
    1fb0:	f3ef 8511 	mrs	r5, BASEPRI
    1fb4:	f383 8811 	msr	BASEPRI, r3
    1fb8:	f3bf 8f6f 	isb	sy
    1fbc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1fbe:	4f25      	ldr	r7, [pc, #148]	; (2054 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fc0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2058 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fc4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 205c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1fcc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1fd0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1fd4:	03d2      	lsls	r2, r2, #15
    1fd6:	d50c      	bpl.n	1ff2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1fd8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d001      	beq.n	1fe4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1fe0:	2e01      	cmp	r6, #1
    1fe2:	d106      	bne.n	1ff2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    1fe4:	b30c      	cbz	r4, 202a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    1fe6:	f385 8811 	msr	BASEPRI, r5
    1fea:	f3bf 8f6f 	isb	sy
}
    1fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1ff2:	b1ac      	cbz	r4, 2020 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1ff4:	4628      	mov	r0, r5
    1ff6:	f000 fa47 	bl	2488 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ffe:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2002:	2b00      	cmp	r3, #0
    2004:	d1e0      	bne.n	1fc8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2006:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2008:	2900      	cmp	r1, #0
    200a:	d0dd      	beq.n	1fc8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    200c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    200e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2010:	2301      	movs	r3, #1
    2012:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2016:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    201a:	f8c9 3000 	str.w	r3, [r9]
}
    201e:	e7d3      	b.n	1fc8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    2020:	2100      	movs	r1, #0
    2022:	2021      	movs	r0, #33	; 0x21
    2024:	f002 f9ea 	bl	43fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2028:	e7e7      	b.n	1ffa <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    202a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    202e:	2202      	movs	r2, #2
    2030:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2034:	e7db      	b.n	1fee <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    2036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    203a:	2202      	movs	r2, #2
    203c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2040:	4605      	mov	r5, r0
}
    2042:	e7bc      	b.n	1fbe <z_nrf_clock_control_lf_on+0x6a>
    2044:	20000214 	.word	0x20000214
    2048:	200001b0 	.word	0x200001b0
    204c:	200001dc 	.word	0x200001dc
    2050:	20000783 	.word	0x20000783
    2054:	40000104 	.word	0x40000104
    2058:	e000e100 	.word	0xe000e100
    205c:	40000008 	.word	0x40000008

00002060 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    2060:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2062:	4b08      	ldr	r3, [pc, #32]	; (2084 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2064:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2068:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    206c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    2070:	4290      	cmp	r0, r2
    2072:	d100      	bne.n	2076 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    2074:	4770      	bx	lr
    2076:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    207a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    207c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2080:	e7f2      	b.n	2068 <handle_next_cycle_case+0x8>
    2082:	bf00      	nop
    2084:	40011000 	.word	0x40011000

00002088 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <rtc_nrf_isr+0x20>)
    208a:	2200      	movs	r2, #0
    208c:	601a      	str	r2, [r3, #0]
    208e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    2090:	4a06      	ldr	r2, [pc, #24]	; (20ac <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    2092:	4b07      	ldr	r3, [pc, #28]	; (20b0 <rtc_nrf_isr+0x28>)
    2094:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    2098:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    209a:	1ac0      	subs	r0, r0, r3
    209c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    20a0:	4403      	add	r3, r0
    20a2:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    20a4:	f002 bb96 	b.w	47d4 <z_clock_announce>
    20a8:	40011140 	.word	0x40011140
    20ac:	20000218 	.word	0x20000218
    20b0:	40011000 	.word	0x40011000

000020b4 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    20b4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    20b6:	4d10      	ldr	r5, [pc, #64]	; (20f8 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    20b8:	4b10      	ldr	r3, [pc, #64]	; (20fc <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    20ba:	2400      	movs	r4, #0
    20bc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    20c0:	601c      	str	r4, [r3, #0]
    20c2:	681b      	ldr	r3, [r3, #0]
    20c4:	4b0e      	ldr	r3, [pc, #56]	; (2100 <z_clock_driver_init+0x4c>)
    20c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    20ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    20ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    20d2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    20d6:	4622      	mov	r2, r4
    20d8:	2101      	movs	r1, #1
    20da:	2011      	movs	r0, #17
    20dc:	f000 f8fc 	bl	22d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    20e0:	2011      	movs	r0, #17
    20e2:	f000 f8db 	bl	229c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    20e6:	4a07      	ldr	r2, [pc, #28]	; (2104 <z_clock_driver_init+0x50>)
    20e8:	2301      	movs	r3, #1
    20ea:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    20ec:	2002      	movs	r0, #2
    20ee:	602b      	str	r3, [r5, #0]
    20f0:	f7ff ff30 	bl	1f54 <z_nrf_clock_control_lf_on>

	return 0;
}
    20f4:	4620      	mov	r0, r4
    20f6:	bd38      	pop	{r3, r4, r5, pc}
    20f8:	40011000 	.word	0x40011000
    20fc:	40011140 	.word	0x40011140
    2100:	e000e100 	.word	0xe000e100
    2104:	40011008 	.word	0x40011008

00002108 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    2108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    210a:	4b2d      	ldr	r3, [pc, #180]	; (21c0 <z_clock_set_timeout+0xb8>)
    210c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2110:	bf08      	it	eq
    2112:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2114:	3801      	subs	r0, #1
    2116:	2800      	cmp	r0, #0
    2118:	dd40      	ble.n	219c <z_clock_set_timeout+0x94>
    211a:	4298      	cmp	r0, r3
    211c:	bfa8      	it	ge
    211e:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    2120:	4c28      	ldr	r4, [pc, #160]	; (21c4 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    2122:	4a29      	ldr	r2, [pc, #164]	; (21c8 <z_clock_set_timeout+0xc0>)
    2124:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    2128:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    212a:	4e28      	ldr	r6, [pc, #160]	; (21cc <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
    212c:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    212e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    2132:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
    2136:	bf18      	it	ne
    2138:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    213a:	3501      	adds	r5, #1
    213c:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
    213e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    2142:	4d1f      	ldr	r5, [pc, #124]	; (21c0 <z_clock_set_timeout+0xb8>)
    2144:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
    2148:	42a8      	cmp	r0, r5
    214a:	bf94      	ite	ls
    214c:	1815      	addls	r5, r2, r0
    214e:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
    2150:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    2154:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2158:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    215a:	1a9b      	subs	r3, r3, r2
    215c:	6037      	str	r7, [r6, #0]
    215e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2162:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    2164:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    2166:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    216a:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    216e:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    2172:	d104      	bne.n	217e <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
    2174:	200f      	movs	r0, #15
    2176:	f003 f9ae 	bl	54d6 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    217a:	6037      	str	r7, [r6, #0]
    217c:	6833      	ldr	r3, [r6, #0]
    217e:	4b14      	ldr	r3, [pc, #80]	; (21d0 <z_clock_set_timeout+0xc8>)
    2180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2184:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    2188:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    218c:	1a2b      	subs	r3, r5, r0
    218e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    2192:	2b01      	cmp	r3, #1
    2194:	d104      	bne.n	21a0 <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
    2196:	f7ff ff63 	bl	2060 <handle_next_cycle_case>
    219a:	e00b      	b.n	21b4 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    219c:	2000      	movs	r0, #0
    219e:	e7bf      	b.n	2120 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    21a0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    21a4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    21a8:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    21ac:	1a2d      	subs	r5, r5, r0
    21ae:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    21b0:	022b      	lsls	r3, r5, #8
    21b2:	d4f0      	bmi.n	2196 <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
    21b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    21b8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    21bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21be:	bf00      	nop
    21c0:	007fffff 	.word	0x007fffff
    21c4:	40011000 	.word	0x40011000
    21c8:	20000218 	.word	0x20000218
    21cc:	40011140 	.word	0x40011140
    21d0:	e000e100 	.word	0xe000e100

000021d4 <z_clock_elapsed>:
	__asm__ volatile(
    21d4:	f04f 0220 	mov.w	r2, #32
    21d8:	f3ef 8311 	mrs	r3, BASEPRI
    21dc:	f382 8811 	msr	BASEPRI, r2
    21e0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    21e4:	4a06      	ldr	r2, [pc, #24]	; (2200 <z_clock_elapsed+0x2c>)
    21e6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    21ea:	4a06      	ldr	r2, [pc, #24]	; (2204 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    21ec:	6812      	ldr	r2, [r2, #0]
    21ee:	1a80      	subs	r0, r0, r2
    21f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    21f4:	f383 8811 	msr	BASEPRI, r3
    21f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop
    2200:	40011000 	.word	0x40011000
    2204:	20000218 	.word	0x20000218

00002208 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2208:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    220a:	4c11      	ldr	r4, [pc, #68]	; (2250 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    220c:	4a11      	ldr	r2, [pc, #68]	; (2254 <_DoInit+0x4c>)
    220e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2210:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2212:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2216:	4b10      	ldr	r3, [pc, #64]	; (2258 <_DoInit+0x50>)
    2218:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    221a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    2220:	4a0e      	ldr	r2, [pc, #56]	; (225c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2222:	490f      	ldr	r1, [pc, #60]	; (2260 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2224:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    2226:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    2228:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    222a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    222c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    222e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2230:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2232:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    2234:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2236:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2238:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    223a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    223c:	f002 fe86 	bl	4f4c <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    2240:	4908      	ldr	r1, [pc, #32]	; (2264 <_DoInit+0x5c>)
    2242:	4620      	mov	r0, r4
    2244:	f002 fe82 	bl	4f4c <strcpy>
  p->acID[6] = ' ';
    2248:	2320      	movs	r3, #32
    224a:	71a3      	strb	r3, [r4, #6]
}
    224c:	bd10      	pop	{r4, pc}
    224e:	bf00      	nop
    2250:	2000021c 	.word	0x2000021c
    2254:	00005878 	.word	0x00005878
    2258:	20000381 	.word	0x20000381
    225c:	20000371 	.word	0x20000371
    2260:	00005881 	.word	0x00005881
    2264:	00005885 	.word	0x00005885

00002268 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2268:	4a09      	ldr	r2, [pc, #36]	; (2290 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    226a:	490a      	ldr	r1, [pc, #40]	; (2294 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    226c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    226e:	6809      	ldr	r1, [r1, #0]
    2270:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2272:	4909      	ldr	r1, [pc, #36]	; (2298 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2274:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2276:	684b      	ldr	r3, [r1, #4]
    2278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    227c:	604b      	str	r3, [r1, #4]
    227e:	2300      	movs	r3, #0
    2280:	f383 8811 	msr	BASEPRI, r3
    2284:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2288:	6893      	ldr	r3, [r2, #8]
}
    228a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    228c:	4770      	bx	lr
    228e:	bf00      	nop
    2290:	2000032c 	.word	0x2000032c
    2294:	000057f4 	.word	0x000057f4
    2298:	e000ed00 	.word	0xe000ed00

0000229c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    229c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    229e:	2b00      	cmp	r3, #0
    22a0:	db08      	blt.n	22b4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22a2:	2201      	movs	r2, #1
    22a4:	f000 001f 	and.w	r0, r0, #31
    22a8:	fa02 f000 	lsl.w	r0, r2, r0
    22ac:	095b      	lsrs	r3, r3, #5
    22ae:	4a02      	ldr	r2, [pc, #8]	; (22b8 <arch_irq_enable+0x1c>)
    22b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    22b4:	4770      	bx	lr
    22b6:	bf00      	nop
    22b8:	e000e100 	.word	0xe000e100

000022bc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <arch_irq_is_enabled+0x18>)
    22be:	0942      	lsrs	r2, r0, #5
    22c0:	f000 001f 	and.w	r0, r0, #31
    22c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22c8:	2301      	movs	r3, #1
    22ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    22ce:	4010      	ands	r0, r2
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	e000e100 	.word	0xe000e100

000022d8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22d8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22da:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22dc:	bfa8      	it	ge
    22de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    22e2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e6:	bfb8      	it	lt
    22e8:	4b06      	ldrlt	r3, [pc, #24]	; (2304 <z_arm_irq_priority_set+0x2c>)
    22ea:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22ee:	bfac      	ite	ge
    22f0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f4:	f000 000f 	andlt.w	r0, r0, #15
    22f8:	b2c9      	uxtb	r1, r1
    22fa:	bfb4      	ite	lt
    22fc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22fe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2302:	4770      	bx	lr
    2304:	e000ed14 	.word	0xe000ed14

00002308 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2308:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    230c:	9b00      	ldr	r3, [sp, #0]
    230e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2312:	490a      	ldr	r1, [pc, #40]	; (233c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2314:	9b01      	ldr	r3, [sp, #4]
    2316:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    231a:	9b02      	ldr	r3, [sp, #8]
    231c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2320:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2328:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    232c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2330:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2332:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2334:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    2336:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2338:	4770      	bx	lr
    233a:	bf00      	nop
    233c:	00004ad1 	.word	0x00004ad1

00002340 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2340:	4a0b      	ldr	r2, [pc, #44]	; (2370 <z_check_thread_stack_fail+0x30>)
{
    2342:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2344:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    2346:	b190      	cbz	r0, 236e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2348:	f113 0f16 	cmn.w	r3, #22
    234c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    234e:	d005      	beq.n	235c <z_check_thread_stack_fail+0x1c>
    2350:	f1a0 0220 	sub.w	r2, r0, #32
    2354:	429a      	cmp	r2, r3
    2356:	d806      	bhi.n	2366 <z_check_thread_stack_fail+0x26>
    2358:	4283      	cmp	r3, r0
    235a:	d204      	bcs.n	2366 <z_check_thread_stack_fail+0x26>
    235c:	4281      	cmp	r1, r0
    235e:	bf2c      	ite	cs
    2360:	2100      	movcs	r1, #0
    2362:	2101      	movcc	r1, #1
    2364:	e000      	b.n	2368 <z_check_thread_stack_fail+0x28>
    2366:	2100      	movs	r1, #0
    2368:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    236a:	bf08      	it	eq
    236c:	2000      	moveq	r0, #0
}
    236e:	4770      	bx	lr
    2370:	2000032c 	.word	0x2000032c

00002374 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2374:	b508      	push	{r3, lr}
    2376:	4604      	mov	r4, r0
    2378:	460e      	mov	r6, r1
    237a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    237c:	f000 f9f0 	bl	2760 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2380:	4b08      	ldr	r3, [pc, #32]	; (23a4 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2382:	4620      	mov	r0, r4
	_current = main_thread;
    2384:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2386:	f000 fa07 	bl	2798 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    238a:	4628      	mov	r0, r5
    238c:	f386 8809 	msr	PSP, r6
    2390:	2100      	movs	r1, #0
    2392:	b663      	cpsie	if
    2394:	f381 8811 	msr	BASEPRI, r1
    2398:	f3bf 8f6f 	isb	sy
    239c:	2200      	movs	r2, #0
    239e:	2300      	movs	r3, #0
    23a0:	f002 fb96 	bl	4ad0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    23a4:	2000032c 	.word	0x2000032c

000023a8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23a8:	4a0e      	ldr	r2, [pc, #56]	; (23e4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    23aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23ac:	4b0e      	ldr	r3, [pc, #56]	; (23e8 <z_arm_prep_c+0x40>)
    23ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    23b2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    23b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    23bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    23c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    23c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    23c8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    23cc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    23d0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    23d4:	f001 fc22 	bl	3c1c <z_bss_zero>
	z_data_copy();
    23d8:	f001 fc2a 	bl	3c30 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    23dc:	f000 f992 	bl	2704 <z_arm_interrupt_init>
	z_cstart();
    23e0:	f001 fc64 	bl	3cac <z_cstart>
    23e4:	00000000 	.word	0x00000000
    23e8:	e000ed00 	.word	0xe000ed00

000023ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    23ec:	4912      	ldr	r1, [pc, #72]	; (2438 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    23ee:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    23f0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    23f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    23f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    23fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    23fe:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2400:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2404:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2408:	4f0c      	ldr	r7, [pc, #48]	; (243c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    240a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    240e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    2410:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2412:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2414:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2416:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2418:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    241a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    241e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2420:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2422:	f000 f9b9 	bl	2798 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2426:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    242a:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    242e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2432:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2436:	4770      	bx	lr
    ldr r1, =_kernel
    2438:	2000032c 	.word	0x2000032c
    ldr v4, =_SCS_ICSR
    243c:	e000ed04 	.word	0xe000ed04

00002440 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2440:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2444:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2446:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    244a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    244e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2450:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2454:	2902      	cmp	r1, #2
    beq _oops
    2456:	d0ff      	beq.n	2458 <_oops>

00002458 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2458:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    245a:	f002 fd6c 	bl	4f36 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    245e:	bd01      	pop	{r0, pc}

00002460 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2460:	4901      	ldr	r1, [pc, #4]	; (2468 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2462:	2210      	movs	r2, #16
	str	r2, [r1]
    2464:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2466:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2468:	e000ed10 	.word	0xe000ed10

0000246c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    246c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    246e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2470:	f380 8811 	msr	BASEPRI, r0
	isb
    2474:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2478:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    247c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    247e:	b662      	cpsie	i
	isb
    2480:	f3bf 8f6f 	isb	sy

	bx	lr
    2484:	4770      	bx	lr
    2486:	bf00      	nop

00002488 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2488:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    248a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    248c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2490:	bf20      	wfe

	msr	BASEPRI, r0
    2492:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2496:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2498:	4770      	bx	lr
    249a:	bf00      	nop

0000249c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    249c:	bf30      	wfi
    b z_SysNmiOnReset
    249e:	f7ff bffd 	b.w	249c <z_SysNmiOnReset>
    24a2:	bf00      	nop

000024a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    24a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    24a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    24a8:	4a0b      	ldr	r2, [pc, #44]	; (24d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    24aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    24ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    24ae:	bf1e      	ittt	ne
	movne	r1, #0
    24b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    24b2:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    24b4:	f002 ff5b 	blne	536e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    24b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    24ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    24be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    24c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    24c6:	4905      	ldr	r1, [pc, #20]	; (24dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    24c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    24ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    24cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    24ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    24d2:	4903      	ldr	r1, [pc, #12]	; (24e0 <_isr_wrapper+0x3c>)
	bx r1
    24d4:	4708      	bx	r1
    24d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    24d8:	2000032c 	.word	0x2000032c
	ldr r1, =_sw_isr_table
    24dc:	000055d0 	.word	0x000055d0
	ldr r1, =z_arm_int_exit
    24e0:	00002529 	.word	0x00002529

000024e4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    24e4:	f002 fda2 	bl	502c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    24e8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    24ee:	4808      	ldr	r0, [pc, #32]	; (2510 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    24f0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    24f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    24f6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    24fa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    24fe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2500:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2502:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2506:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    250a:	f7ff ff4d 	bl	23a8 <z_arm_prep_c>
    250e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2510:	20000d20 	.word	0x20000d20

00002514 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2514:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2518:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    251c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    251e:	4672      	mov	r2, lr
	bl z_arm_fault
    2520:	f000 f872 	bl	2608 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2524:	bd01      	pop	{r0, pc}
    2526:	bf00      	nop

00002528 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2528:	4b04      	ldr	r3, [pc, #16]	; (253c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    252a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    252c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    252e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2530:	d003      	beq.n	253a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2532:	4903      	ldr	r1, [pc, #12]	; (2540 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2538:	600a      	str	r2, [r1, #0]

0000253a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    253a:	4770      	bx	lr
	ldr r3, =_kernel
    253c:	2000032c 	.word	0x2000032c
	ldr r1, =_SCS_ICSR
    2540:	e000ed04 	.word	0xe000ed04

00002544 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2544:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2546:	4b17      	ldr	r3, [pc, #92]	; (25a4 <mem_manage_fault+0x60>)
{
    2548:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    254a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    254c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    254e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2550:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2552:	0790      	lsls	r0, r2, #30
    2554:	d516      	bpl.n	2584 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    2556:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    255a:	0612      	lsls	r2, r2, #24
    255c:	d504      	bpl.n	2568 <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    255e:	b119      	cbz	r1, 2568 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2566:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    256a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    256c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    256e:	06d2      	lsls	r2, r2, #27
    2570:	d40b      	bmi.n	258a <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2572:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2574:	4a0b      	ldr	r2, [pc, #44]	; (25a4 <mem_manage_fault+0x60>)
    2576:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2578:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    257c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    257e:	2300      	movs	r3, #0
    2580:	7023      	strb	r3, [r4, #0]

	return reason;
}
    2582:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    2584:	f06f 0015 	mvn.w	r0, #21
    2588:	e7ee      	b.n	2568 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    258a:	685b      	ldr	r3, [r3, #4]
    258c:	051b      	lsls	r3, r3, #20
    258e:	d5f0      	bpl.n	2572 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2590:	4629      	mov	r1, r5
    2592:	f7ff fed5 	bl	2340 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2596:	2800      	cmp	r0, #0
    2598:	d0eb      	beq.n	2572 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    259a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    259e:	2002      	movs	r0, #2
    25a0:	e7e8      	b.n	2574 <mem_manage_fault+0x30>
    25a2:	bf00      	nop
    25a4:	e000ed00 	.word	0xe000ed00

000025a8 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25a8:	4b0d      	ldr	r3, [pc, #52]	; (25e0 <bus_fault.isra.0+0x38>)
    25aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    25ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    25ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25b0:	0592      	lsls	r2, r2, #22
    25b2:	d508      	bpl.n	25c6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    25b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    25b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25b8:	0412      	lsls	r2, r2, #16
    25ba:	d504      	bpl.n	25c6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    25bc:	b118      	cbz	r0, 25c6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    25be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    25c4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    25c6:	4b06      	ldr	r3, [pc, #24]	; (25e0 <bus_fault.isra.0+0x38>)
    25c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    25ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25cc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25ce:	bf58      	it	pl
    25d0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    25d4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25d6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    25da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    25dc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    25de:	4770      	bx	lr
    25e0:	e000ed00 	.word	0xe000ed00

000025e4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25e4:	4b07      	ldr	r3, [pc, #28]	; (2604 <usage_fault.isra.0+0x20>)
    25e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    25ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    25f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    25f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25f4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    25f8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    25fc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    25fe:	2000      	movs	r0, #0
    2600:	4770      	bx	lr
    2602:	bf00      	nop
    2604:	e000ed00 	.word	0xe000ed00

00002608 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2608:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    260a:	4b37      	ldr	r3, [pc, #220]	; (26e8 <z_arm_fault+0xe0>)
    260c:	685b      	ldr	r3, [r3, #4]
{
    260e:	b08a      	sub	sp, #40	; 0x28
    2610:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2612:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2616:	2500      	movs	r5, #0
    2618:	f385 8811 	msr	BASEPRI, r5
    261c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2620:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2624:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    2628:	d111      	bne.n	264e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    262a:	f002 010c 	and.w	r1, r2, #12
    262e:	2908      	cmp	r1, #8
    2630:	d00d      	beq.n	264e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2632:	0711      	lsls	r1, r2, #28
    2634:	d401      	bmi.n	263a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2636:	4606      	mov	r6, r0
			*nested_exc = true;
    2638:	2501      	movs	r5, #1
	*recoverable = false;
    263a:	2200      	movs	r2, #0
    263c:	3b03      	subs	r3, #3
    263e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2642:	2b03      	cmp	r3, #3
    2644:	d848      	bhi.n	26d8 <z_arm_fault+0xd0>
    2646:	e8df f003 	tbb	[pc, r3]
    264a:	3f04      	.short	0x3f04
    264c:	3c43      	.short	0x3c43
		return NULL;
    264e:	462e      	mov	r6, r5
    2650:	e7f3      	b.n	263a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2652:	4b25      	ldr	r3, [pc, #148]	; (26e8 <z_arm_fault+0xe0>)
    2654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2656:	0792      	lsls	r2, r2, #30
    2658:	d43e      	bmi.n	26d8 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    265a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    265c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    2660:	d009      	beq.n	2676 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    2662:	3328      	adds	r3, #40	; 0x28
    2664:	781b      	ldrb	r3, [r3, #0]
    2666:	b1f3      	cbz	r3, 26a6 <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    2668:	f10d 0207 	add.w	r2, sp, #7
    266c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    266e:	4630      	mov	r0, r6
    2670:	f7ff ff68 	bl	2544 <mem_manage_fault>
		reason = usage_fault(esf);
    2674:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2676:	f89d 3007 	ldrb.w	r3, [sp, #7]
    267a:	b993      	cbnz	r3, 26a2 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    267c:	2220      	movs	r2, #32
    267e:	4631      	mov	r1, r6
    2680:	a802      	add	r0, sp, #8
    2682:	f002 fc80 	bl	4f86 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2686:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2688:	b345      	cbz	r5, 26dc <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    268a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    268e:	b922      	cbnz	r2, 269a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2690:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2694:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2698:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    269a:	a902      	add	r1, sp, #8
    269c:	4620      	mov	r0, r4
    269e:	f002 fc48 	bl	4f32 <z_arm_fatal_error>
}
    26a2:	b00a      	add	sp, #40	; 0x28
    26a4:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    26a6:	4b11      	ldr	r3, [pc, #68]	; (26ec <z_arm_fault+0xe4>)
    26a8:	781b      	ldrb	r3, [r3, #0]
    26aa:	b12b      	cbz	r3, 26b8 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    26ac:	f10d 0107 	add.w	r1, sp, #7
    26b0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    26b2:	f7ff ff79 	bl	25a8 <bus_fault.isra.0>
    26b6:	e7dd      	b.n	2674 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    26b8:	4b0d      	ldr	r3, [pc, #52]	; (26f0 <z_arm_fault+0xe8>)
    26ba:	8818      	ldrh	r0, [r3, #0]
    26bc:	b284      	uxth	r4, r0
    26be:	2c00      	cmp	r4, #0
    26c0:	d0d9      	beq.n	2676 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    26c2:	f7ff ff8f 	bl	25e4 <usage_fault.isra.0>
    26c6:	e7d5      	b.n	2674 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    26c8:	f10d 0207 	add.w	r2, sp, #7
    26cc:	2100      	movs	r1, #0
    26ce:	e7ce      	b.n	266e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    26d0:	f10d 0107 	add.w	r1, sp, #7
    26d4:	2000      	movs	r0, #0
    26d6:	e7ec      	b.n	26b2 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    26d8:	2400      	movs	r4, #0
    26da:	e7cc      	b.n	2676 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    26e0:	f023 0301 	bic.w	r3, r3, #1
    26e4:	e7d8      	b.n	2698 <z_arm_fault+0x90>
    26e6:	bf00      	nop
    26e8:	e000ed00 	.word	0xe000ed00
    26ec:	e000ed29 	.word	0xe000ed29
    26f0:	e000ed2a 	.word	0xe000ed2a

000026f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    26f4:	4a02      	ldr	r2, [pc, #8]	; (2700 <z_arm_fault_init+0xc>)
    26f6:	6953      	ldr	r3, [r2, #20]
    26f8:	f043 0310 	orr.w	r3, r3, #16
    26fc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    26fe:	4770      	bx	lr
    2700:	e000ed00 	.word	0xe000ed00

00002704 <z_arm_interrupt_init>:
    2704:	4804      	ldr	r0, [pc, #16]	; (2718 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2706:	2300      	movs	r3, #0
    2708:	2120      	movs	r1, #32
    270a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    270c:	3301      	adds	r3, #1
    270e:	2b27      	cmp	r3, #39	; 0x27
    2710:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2714:	d1f9      	bne.n	270a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2716:	4770      	bx	lr
    2718:	e000e100 	.word	0xe000e100

0000271c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    271c:	b508      	push	{r3, lr}
	if (_current == thread) {
    271e:	4b0e      	ldr	r3, [pc, #56]	; (2758 <z_impl_k_thread_abort+0x3c>)
    2720:	689b      	ldr	r3, [r3, #8]
    2722:	4283      	cmp	r3, r0
    2724:	d107      	bne.n	2736 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2726:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    272a:	b193      	cbz	r3, 2752 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    272c:	4a0b      	ldr	r2, [pc, #44]	; (275c <z_impl_k_thread_abort+0x40>)
    272e:	6853      	ldr	r3, [r2, #4]
    2730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2734:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    2736:	f001 fd03 	bl	4140 <z_thread_single_abort>
	__asm__ volatile(
    273a:	f04f 0320 	mov.w	r3, #32
    273e:	f3ef 8011 	mrs	r0, BASEPRI
    2742:	f383 8811 	msr	BASEPRI, r3
    2746:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    274a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    274e:	f002 be10 	b.w	5372 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    2752:	f001 ff53 	bl	45fc <z_self_abort>
    2756:	bf00      	nop
    2758:	2000032c 	.word	0x2000032c
    275c:	e000ed00 	.word	0xe000ed00

00002760 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    2762:	4b08      	ldr	r3, [pc, #32]	; (2784 <z_arm_configure_static_mpu_regions+0x24>)
    2764:	9301      	str	r3, [sp, #4]
    2766:	4b08      	ldr	r3, [pc, #32]	; (2788 <z_arm_configure_static_mpu_regions+0x28>)
    2768:	9302      	str	r3, [sp, #8]
    276a:	4b08      	ldr	r3, [pc, #32]	; (278c <z_arm_configure_static_mpu_regions+0x2c>)
    276c:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    276e:	ab01      	add	r3, sp, #4
    2770:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2772:	4a07      	ldr	r2, [pc, #28]	; (2790 <z_arm_configure_static_mpu_regions+0x30>)
    2774:	4b07      	ldr	r3, [pc, #28]	; (2794 <z_arm_configure_static_mpu_regions+0x34>)
    2776:	2101      	movs	r1, #1
    2778:	4668      	mov	r0, sp
    277a:	f000 f8a7 	bl	28cc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    277e:	b005      	add	sp, #20
    2780:	f85d fb04 	ldr.w	pc, [sp], #4
    2784:	20000000 	.word	0x20000000
    2788:	00000000 	.word	0x00000000
    278c:	060b0000 	.word	0x060b0000
    2790:	20000000 	.word	0x20000000
    2794:	20010000 	.word	0x20010000

00002798 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
    279a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    279c:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
    279e:	9301      	str	r3, [sp, #4]
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <z_arm_configure_dynamic_mpu_regions+0x24>)
    27a2:	2220      	movs	r2, #32
    27a4:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    27a8:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
    27aa:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
    27ac:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
    27ae:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
    27b0:	f000 f896 	bl	28e0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    27b4:	b005      	add	sp, #20
    27b6:	f85d fb04 	ldr.w	pc, [sp], #4
    27ba:	bf00      	nop
    27bc:	150b0000 	.word	0x150b0000

000027c0 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    27c0:	f8df c084 	ldr.w	ip, [pc, #132]	; 2848 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    27c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c6:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    27c8:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    27ca:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    27cc:	428f      	cmp	r7, r1
    27ce:	db00      	blt.n	27d2 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    27d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    27d2:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    27d6:	f8de 4004 	ldr.w	r4, [lr, #4]
    27da:	b394      	cbz	r4, 2842 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    27dc:	b143      	cbz	r3, 27f0 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    27de:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    27e0:	422c      	tst	r4, r5
    27e2:	d119      	bne.n	2818 <mpu_configure_regions+0x58>
		&&
    27e4:	2c1f      	cmp	r4, #31
    27e6:	d917      	bls.n	2818 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
    27e8:	f8de 2000 	ldr.w	r2, [lr]
		&&
    27ec:	4215      	tst	r5, r2
    27ee:	d113      	bne.n	2818 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    27f0:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    27f2:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    27f4:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    27f8:	f8de 0008 	ldr.w	r0, [lr, #8]
    27fc:	d90f      	bls.n	281e <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    27fe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2802:	d80e      	bhi.n	2822 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2804:	3c01      	subs	r4, #1
    2806:	fab4 f484 	clz	r4, r4
    280a:	f1c4 041f 	rsb	r4, r4, #31
    280e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2810:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2812:	ea44 0400 	orr.w	r4, r4, r0
    2816:	d906      	bls.n	2826 <mpu_configure_regions+0x66>
			return -EINVAL;
    2818:	f06f 0015 	mvn.w	r0, #21
    281c:	e7d8      	b.n	27d0 <mpu_configure_regions+0x10>
		return REGION_32B;
    281e:	2408      	movs	r4, #8
    2820:	e7f6      	b.n	2810 <mpu_configure_regions+0x50>
		return REGION_4G;
    2822:	243e      	movs	r4, #62	; 0x3e
    2824:	e7f4      	b.n	2810 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2826:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    282a:	4315      	orrs	r5, r2
    282c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2830:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    2834:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    2838:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    283a:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    283e:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    2842:	3701      	adds	r7, #1
    2844:	e7c2      	b.n	27cc <mpu_configure_regions+0xc>
    2846:	bf00      	nop
    2848:	e000ed90 	.word	0xe000ed90

0000284c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    284c:	4b03      	ldr	r3, [pc, #12]	; (285c <arm_core_mpu_enable+0x10>)
    284e:	2205      	movs	r2, #5
    2850:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2852:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2856:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    285a:	4770      	bx	lr
    285c:	e000ed90 	.word	0xe000ed90

00002860 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2860:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2864:	4b01      	ldr	r3, [pc, #4]	; (286c <arm_core_mpu_disable+0xc>)
    2866:	2200      	movs	r2, #0
    2868:	605a      	str	r2, [r3, #4]
}
    286a:	4770      	bx	lr
    286c:	e000ed90 	.word	0xe000ed90

00002870 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2870:	4913      	ldr	r1, [pc, #76]	; (28c0 <arm_mpu_init+0x50>)
    2872:	6808      	ldr	r0, [r1, #0]
    2874:	2808      	cmp	r0, #8
{
    2876:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2878:	d81e      	bhi.n	28b8 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    287a:	f7ff fff1 	bl	2860 <arm_core_mpu_disable>
	MPU->RNR = index;
    287e:	4c11      	ldr	r4, [pc, #68]	; (28c4 <arm_mpu_init+0x54>)
    2880:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2882:	2200      	movs	r2, #0
    2884:	4290      	cmp	r0, r2
    2886:	f101 010c 	add.w	r1, r1, #12
    288a:	d105      	bne.n	2898 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    288c:	4b0e      	ldr	r3, [pc, #56]	; (28c8 <arm_mpu_init+0x58>)
    288e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2890:	f7ff ffdc 	bl	284c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2894:	2000      	movs	r0, #0
}
    2896:	bd10      	pop	{r4, pc}
    2898:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    289a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    289e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    28a2:	4313      	orrs	r3, r2
    28a4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28a8:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28ae:	f043 0301 	orr.w	r3, r3, #1
    28b2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    28b4:	3201      	adds	r2, #1
    28b6:	e7e5      	b.n	2884 <arm_mpu_init+0x14>
		return -1;
    28b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28bc:	e7eb      	b.n	2896 <arm_mpu_init+0x26>
    28be:	bf00      	nop
    28c0:	00005748 	.word	0x00005748
    28c4:	e000ed90 	.word	0xe000ed90
    28c8:	20000781 	.word	0x20000781

000028cc <arm_core_mpu_configure_static_mpu_regions>:
{
    28cc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    28ce:	4c03      	ldr	r4, [pc, #12]	; (28dc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    28d0:	2301      	movs	r3, #1
    28d2:	7822      	ldrb	r2, [r4, #0]
    28d4:	f7ff ff74 	bl	27c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    28d8:	7020      	strb	r0, [r4, #0]
}
    28da:	bd10      	pop	{r4, pc}
    28dc:	20000781 	.word	0x20000781

000028e0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    28e0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    28e2:	4a08      	ldr	r2, [pc, #32]	; (2904 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    28e4:	2300      	movs	r3, #0
    28e6:	7812      	ldrb	r2, [r2, #0]
    28e8:	f7ff ff6a 	bl	27c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    28ec:	f110 0f16 	cmn.w	r0, #22
    28f0:	d003      	beq.n	28fa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    28f2:	4b05      	ldr	r3, [pc, #20]	; (2908 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    28f4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    28f6:	2807      	cmp	r0, #7
    28f8:	dd00      	ble.n	28fc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    28fa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    28fc:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    28fe:	611a      	str	r2, [r3, #16]
    2900:	3001      	adds	r0, #1
    2902:	e7f8      	b.n	28f6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2904:	20000781 	.word	0x20000781
    2908:	e000ed90 	.word	0xe000ed90

0000290c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    290c:	4b01      	ldr	r3, [pc, #4]	; (2914 <__stdout_hook_install+0x8>)
    290e:	6018      	str	r0, [r3, #0]
}
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	20000004 	.word	0x20000004

00002918 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2918:	3902      	subs	r1, #2
    291a:	2901      	cmp	r1, #1
    291c:	d802      	bhi.n	2924 <z_impl_zephyr_fputc+0xc>
    291e:	4b03      	ldr	r3, [pc, #12]	; (292c <z_impl_zephyr_fputc+0x14>)
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	4718      	bx	r3
}
    2924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	20000004 	.word	0x20000004

00002930 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    2930:	b40f      	push	{r0, r1, r2, r3}
    2932:	b507      	push	{r0, r1, r2, lr}
    2934:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2936:	2102      	movs	r1, #2
{
    2938:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    293c:	4804      	ldr	r0, [pc, #16]	; (2950 <printf+0x20>)
	va_start(vargs, format);
    293e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2940:	f7fe fd1c 	bl	137c <cbvprintf>
	va_end(vargs);

	return r;
}
    2944:	b003      	add	sp, #12
    2946:	f85d eb04 	ldr.w	lr, [sp], #4
    294a:	b004      	add	sp, #16
    294c:	4770      	bx	lr
    294e:	bf00      	nop
    2950:	00005029 	.word	0x00005029

00002954 <nordicsemi_nrf52_init>:
    2954:	f04f 0320 	mov.w	r3, #32
    2958:	f3ef 8211 	mrs	r2, BASEPRI
    295c:	f383 8811 	msr	BASEPRI, r3
    2960:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2964:	4906      	ldr	r1, [pc, #24]	; (2980 <nordicsemi_nrf52_init+0x2c>)
    2966:	2301      	movs	r3, #1
    2968:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    296c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2970:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2974:	f382 8811 	msr	BASEPRI, r2
    2978:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    297c:	2000      	movs	r0, #0
    297e:	4770      	bx	lr
    2980:	4001e000 	.word	0x4001e000

00002984 <sys_arch_reboot>:
    *p_gpregret = val;
    2984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2988:	b2c0      	uxtb	r0, r0
    298a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    298e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2992:	4905      	ldr	r1, [pc, #20]	; (29a8 <sys_arch_reboot+0x24>)
    2994:	4b05      	ldr	r3, [pc, #20]	; (29ac <sys_arch_reboot+0x28>)
    2996:	68ca      	ldr	r2, [r1, #12]
    2998:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    299c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    299e:	60cb      	str	r3, [r1, #12]
    29a0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    29a4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    29a6:	e7fd      	b.n	29a4 <sys_arch_reboot+0x20>
    29a8:	e000ed00 	.word	0xe000ed00
    29ac:	05fa0004 	.word	0x05fa0004

000029b0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    29b0:	b120      	cbz	r0, 29bc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    29b2:	4b03      	ldr	r3, [pc, #12]	; (29c0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    29b4:	0180      	lsls	r0, r0, #6
    29b6:	f043 0301 	orr.w	r3, r3, #1
    29ba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	00005710 	.word	0x00005710

000029c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    29c4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    29c6:	4b09      	ldr	r3, [pc, #36]	; (29ec <gpio_nrfx_init+0x28>)
    29c8:	781a      	ldrb	r2, [r3, #0]
    29ca:	b96a      	cbnz	r2, 29e8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    29cc:	2101      	movs	r1, #1
    29ce:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29d0:	2006      	movs	r0, #6
    29d2:	2105      	movs	r1, #5
    29d4:	f7ff fc80 	bl	22d8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    29d8:	2006      	movs	r0, #6
    29da:	f7ff fc5f 	bl	229c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    29de:	4b04      	ldr	r3, [pc, #16]	; (29f0 <gpio_nrfx_init+0x2c>)
    29e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    29e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    29e8:	2000      	movs	r0, #0
    29ea:	bd08      	pop	{r3, pc}
    29ec:	20000782 	.word	0x20000782
    29f0:	40006000 	.word	0x40006000

000029f4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29f4:	4b2a      	ldr	r3, [pc, #168]	; (2aa0 <gpio_nrfx_config+0xac>)
{
    29f6:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    29f8:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29fa:	482a      	ldr	r0, [pc, #168]	; (2aa4 <gpio_nrfx_config+0xb0>)
    29fc:	4013      	ands	r3, r2
    29fe:	4283      	cmp	r3, r0
    2a00:	d03e      	beq.n	2a80 <gpio_nrfx_config+0x8c>
    2a02:	d80d      	bhi.n	2a20 <gpio_nrfx_config+0x2c>
    2a04:	2b06      	cmp	r3, #6
    2a06:	d015      	beq.n	2a34 <gpio_nrfx_config+0x40>
    2a08:	d805      	bhi.n	2a16 <gpio_nrfx_config+0x22>
    2a0a:	b19b      	cbz	r3, 2a34 <gpio_nrfx_config+0x40>
    2a0c:	2b02      	cmp	r3, #2
    2a0e:	d039      	beq.n	2a84 <gpio_nrfx_config+0x90>
    2a10:	f06f 0015 	mvn.w	r0, #21
    2a14:	e033      	b.n	2a7e <gpio_nrfx_config+0x8a>
    2a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a1a:	d1f9      	bne.n	2a10 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    2a1c:	2301      	movs	r3, #1
    2a1e:	e009      	b.n	2a34 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a20:	4821      	ldr	r0, [pc, #132]	; (2aa8 <gpio_nrfx_config+0xb4>)
    2a22:	4283      	cmp	r3, r0
    2a24:	d030      	beq.n	2a88 <gpio_nrfx_config+0x94>
    2a26:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2a2a:	d02f      	beq.n	2a8c <gpio_nrfx_config+0x98>
    2a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a30:	d1ee      	bne.n	2a10 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2a32:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2a34:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    2a36:	bf54      	ite	pl
    2a38:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    2a3c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a3e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2a42:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    2a46:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a4a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2a4e:	d007      	beq.n	2a60 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2a50:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2a54:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2a56:	d01b      	beq.n	2a90 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2a58:	2201      	movs	r2, #1
    2a5a:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2a5c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2a60:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2a64:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2a68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a6c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2a74:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2a7c:	2000      	movs	r0, #0
}
    2a7e:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2a80:	2307      	movs	r3, #7
    2a82:	e7d7      	b.n	2a34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2a84:	2304      	movs	r3, #4
    2a86:	e7d5      	b.n	2a34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    2a88:	2305      	movs	r3, #5
    2a8a:	e7d3      	b.n	2a34 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2a8c:	2303      	movs	r3, #3
    2a8e:	e7d1      	b.n	2a34 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2a90:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2a92:	bf42      	ittt	mi
    2a94:	2201      	movmi	r2, #1
    2a96:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    2a98:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    2a9c:	e7e0      	b.n	2a60 <gpio_nrfx_config+0x6c>
    2a9e:	bf00      	nop
    2aa0:	00f00006 	.word	0x00f00006
    2aa4:	00100006 	.word	0x00100006
    2aa8:	00400002 	.word	0x00400002

00002aac <gpio_nrfx_pin_interrupt_configure>:
{
    2aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aae:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ab0:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    2ab2:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ab4:	7a08      	ldrb	r0, [r1, #8]
    2ab6:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    2aba:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2abe:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    2ac2:	d10c      	bne.n	2ade <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
    2ac4:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2ac8:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    2ad0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2ad4:	07cf      	lsls	r7, r1, #31
    2ad6:	d507      	bpl.n	2ae8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    2ad8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2adc:	e0bd      	b.n	2c5a <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2ade:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2ae2:	68f1      	ldr	r1, [r6, #12]
    2ae4:	f000 80aa 	beq.w	2c3c <gpio_nrfx_pin_interrupt_configure+0x190>
    2ae8:	68f0      	ldr	r0, [r6, #12]
    2aea:	2101      	movs	r1, #1
    2aec:	40a1      	lsls	r1, r4
    2aee:	4301      	orrs	r1, r0
    2af0:	6970      	ldr	r0, [r6, #20]
    2af2:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2af4:	2101      	movs	r1, #1
    2af6:	40a1      	lsls	r1, r4
    2af8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2afc:	69b2      	ldr	r2, [r6, #24]
    2afe:	bf0c      	ite	eq
    2b00:	4308      	orreq	r0, r1
    2b02:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2b04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2b08:	bf0c      	ite	eq
    2b0a:	430a      	orreq	r2, r1
    2b0c:	438a      	bicne	r2, r1
    2b0e:	61b2      	str	r2, [r6, #24]
    2b10:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2b12:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    2b18:	bf0c      	ite	eq
    2b1a:	4311      	orreq	r1, r2
    2b1c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2b20:	4a54      	ldr	r2, [pc, #336]	; (2c74 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    2b22:	6131      	str	r1, [r6, #16]
    2b24:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2b28:	2300      	movs	r3, #0
    2b2a:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2b2c:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    2b30:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    2b34:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2b38:	4285      	cmp	r5, r0
    2b3a:	f040 8084 	bne.w	2c46 <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
    2b3e:	fa21 f003 	lsr.w	r0, r1, r3
    2b42:	07c0      	lsls	r0, r0, #31
    2b44:	d57f      	bpl.n	2c46 <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
    2b46:	2101      	movs	r1, #1
    2b48:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b4a:	484b      	ldr	r0, [pc, #300]	; (2c78 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    2b4c:	f3bf 8f5b 	dmb	ish
    2b50:	43cf      	mvns	r7, r1
    2b52:	e850 cf00 	ldrex	ip, [r0]
    2b56:	ea0c 0c07 	and.w	ip, ip, r7
    2b5a:	e840 ce00 	strex	lr, ip, [r0]
    2b5e:	f1be 0f00 	cmp.w	lr, #0
    2b62:	d1f6      	bne.n	2b52 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2b64:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2b68:	009b      	lsls	r3, r3, #2
    2b6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2b6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2b72:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    2b76:	f020 0001 	bic.w	r0, r0, #1
    2b7a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    2b7e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2b82:	2100      	movs	r1, #0
    2b84:	4628      	mov	r0, r5
    2b86:	f002 fa53 	bl	5030 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2b8a:	68f3      	ldr	r3, [r6, #12]
    2b8c:	40e3      	lsrs	r3, r4
    2b8e:	f013 0301 	ands.w	r3, r3, #1
    2b92:	d051      	beq.n	2c38 <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
    2b94:	6973      	ldr	r3, [r6, #20]
    2b96:	40e3      	lsrs	r3, r4
    2b98:	f013 0201 	ands.w	r2, r3, #1
    2b9c:	d05e      	beq.n	2c5c <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
    2b9e:	69b3      	ldr	r3, [r6, #24]
    2ba0:	40e3      	lsrs	r3, r4
    2ba2:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2ba4:	bf5f      	itttt	pl
    2ba6:	6931      	ldrpl	r1, [r6, #16]
    2ba8:	fa21 f404 	lsrpl.w	r4, r1, r4
    2bac:	f004 0401 	andpl.w	r4, r4, #1
    2bb0:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2bb4:	4930      	ldr	r1, [pc, #192]	; (2c78 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    2bb6:	bf54      	ite	pl
    2bb8:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2bba:	2403      	movmi	r4, #3
    2bbc:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    2bbe:	2701      	movs	r7, #1
    2bc0:	fa07 f602 	lsl.w	r6, r7, r2
    2bc4:	f3bf 8f5b 	dmb	ish
    2bc8:	e851 0f00 	ldrex	r0, [r1]
    2bcc:	ea40 0306 	orr.w	r3, r0, r6
    2bd0:	e841 3c00 	strex	ip, r3, [r1]
    2bd4:	f1bc 0f00 	cmp.w	ip, #0
    2bd8:	d1f6      	bne.n	2bc8 <gpio_nrfx_pin_interrupt_configure+0x11c>
    2bda:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    2bde:	40d0      	lsrs	r0, r2
    2be0:	f010 0301 	ands.w	r3, r0, #1
    2be4:	d134      	bne.n	2c50 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2be6:	0091      	lsls	r1, r2, #2
    2be8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2bec:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    2bf0:	3240      	adds	r2, #64	; 0x40
    2bf2:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2bf6:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    2bfa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2bfe:	0092      	lsls	r2, r2, #2
    2c00:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c04:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
    2c06:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c08:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2c0c:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    2c10:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2c14:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    2c1c:	4305      	orrs	r5, r0
    2c1e:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c22:	6013      	str	r3, [r2, #0]
    2c24:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2c26:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    2c2a:	f042 0201 	orr.w	r2, r2, #1
    2c2e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2c32:	4a10      	ldr	r2, [pc, #64]	; (2c74 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    2c34:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
    2c38:	4618      	mov	r0, r3
    2c3a:	e00e      	b.n	2c5a <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2c3c:	2001      	movs	r0, #1
    2c3e:	40a0      	lsls	r0, r4
    2c40:	ea21 0100 	bic.w	r1, r1, r0
    2c44:	e754      	b.n	2af0 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2c46:	3301      	adds	r3, #1
    2c48:	2b08      	cmp	r3, #8
    2c4a:	f47f af6f 	bne.w	2b2c <gpio_nrfx_pin_interrupt_configure+0x80>
    2c4e:	e798      	b.n	2b82 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2c50:	3201      	adds	r2, #1
    2c52:	2a08      	cmp	r2, #8
    2c54:	d1b4      	bne.n	2bc0 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
    2c56:	f06f 0012 	mvn.w	r0, #18
}
    2c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2c5c:	6931      	ldr	r1, [r6, #16]
    2c5e:	40e1      	lsrs	r1, r4
    2c60:	f001 0101 	and.w	r1, r1, #1
    2c64:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2c68:	4628      	mov	r0, r5
    2c6a:	b2c9      	uxtb	r1, r1
    2c6c:	f002 f9e0 	bl	5030 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2c70:	4610      	mov	r0, r2
    2c72:	e7f2      	b.n	2c5a <gpio_nrfx_pin_interrupt_configure+0x1ae>
    2c74:	40006000 	.word	0x40006000
    2c78:	200002e0 	.word	0x200002e0

00002c7c <gpiote_event_handler>:
{
    2c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c80:	4d3f      	ldr	r5, [pc, #252]	; (2d80 <gpiote_event_handler+0x104>)
    2c82:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    2c84:	2e00      	cmp	r6, #0
    2c86:	d04e      	beq.n	2d26 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
    2c88:	4b3e      	ldr	r3, [pc, #248]	; (2d84 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    2c8a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    2c8e:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2c90:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    2c92:	4301      	orrs	r1, r0
    2c94:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    2c98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    2c9c:	2701      	movs	r7, #1
    2c9e:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2ca2:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2ca4:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
    2ca8:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
    2cac:	bb72      	cbnz	r2, 2d0c <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2cae:	602a      	str	r2, [r5, #0]
    2cb0:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    2cb2:	4835      	ldr	r0, [pc, #212]	; (2d88 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2cb4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2cb6:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2cb8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2cba:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2cbe:	fa05 f103 	lsl.w	r1, r5, r3
    2cc2:	4211      	tst	r1, r2
    2cc4:	d011      	beq.n	2cea <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cc6:	009a      	lsls	r2, r3, #2
    2cc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2ccc:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2cd0:	6811      	ldr	r1, [r2, #0]
    2cd2:	b151      	cbz	r1, 2cea <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2cd4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2cd8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2cdc:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2cde:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2ce2:	fa05 f101 	lsl.w	r1, r5, r1
    2ce6:	6812      	ldr	r2, [r2, #0]
    2ce8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2cea:	3301      	adds	r3, #1
    2cec:	2b08      	cmp	r3, #8
    2cee:	d1e4      	bne.n	2cba <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    2cf0:	b9dc      	cbnz	r4, 2d2a <gpiote_event_handler+0xae>
	if (port_event) {
    2cf2:	b14e      	cbz	r6, 2d08 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
    2cf4:	4c23      	ldr	r4, [pc, #140]	; (2d84 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    2cf6:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    2cfa:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2cfc:	4301      	orrs	r1, r0
    2cfe:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    2d02:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    2d04:	2600      	movs	r6, #0
	while (level_pins) {
    2d06:	bb42      	cbnz	r2, 2d5a <gpiote_event_handler+0xde>
}
    2d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    2d0c:	423a      	tst	r2, r7
    2d0e:	d006      	beq.n	2d1e <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2d10:	2100      	movs	r1, #0
    2d12:	f008 001f 	and.w	r0, r8, #31
    2d16:	f002 f98b 	bl	5030 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2d1a:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    2d1e:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    2d22:	007f      	lsls	r7, r7, #1
    2d24:	e7c2      	b.n	2cac <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2d26:	4634      	mov	r4, r6
    2d28:	e7c3      	b.n	2cb2 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d2a:	4b16      	ldr	r3, [pc, #88]	; (2d84 <gpiote_event_handler+0x108>)
    2d2c:	6859      	ldr	r1, [r3, #4]
    2d2e:	2900      	cmp	r1, #0
    2d30:	d0df      	beq.n	2cf2 <gpiote_event_handler+0x76>
	return node->next;
    2d32:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2d34:	4f15      	ldr	r7, [pc, #84]	; (2d8c <gpiote_event_handler+0x110>)
    2d36:	2d00      	cmp	r5, #0
    2d38:	bf38      	it	cc
    2d3a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2d3c:	688a      	ldr	r2, [r1, #8]
    2d3e:	4022      	ands	r2, r4
    2d40:	d002      	beq.n	2d48 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
    2d42:	684b      	ldr	r3, [r1, #4]
    2d44:	4638      	mov	r0, r7
    2d46:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d48:	2d00      	cmp	r5, #0
    2d4a:	d0d2      	beq.n	2cf2 <gpiote_event_handler+0x76>
    2d4c:	682b      	ldr	r3, [r5, #0]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	bf38      	it	cc
    2d52:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2d54:	4629      	mov	r1, r5
    2d56:	461d      	mov	r5, r3
    2d58:	e7f0      	b.n	2d3c <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
    2d5a:	4215      	tst	r5, r2
    2d5c:	d00c      	beq.n	2d78 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d5e:	6921      	ldr	r1, [r4, #16]
    2d60:	40f1      	lsrs	r1, r6
    2d62:	f001 0101 	and.w	r1, r1, #1
    2d66:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d6a:	b2c9      	uxtb	r1, r1
    2d6c:	f006 001f 	and.w	r0, r6, #31
    2d70:	f002 f95e 	bl	5030 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2d74:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    2d78:	3601      	adds	r6, #1
		bit <<= 1;
    2d7a:	006d      	lsls	r5, r5, #1
    2d7c:	e7c3      	b.n	2d06 <gpiote_event_handler+0x8a>
    2d7e:	bf00      	nop
    2d80:	4000617c 	.word	0x4000617c
    2d84:	200002c4 	.word	0x200002c4
    2d88:	40006000 	.word	0x40006000
    2d8c:	2000007c 	.word	0x2000007c

00002d90 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2d90:	b510      	push	{r4, lr}
    2d92:	4604      	mov	r4, r0
    2d94:	2200      	movs	r2, #0
    2d96:	2101      	movs	r1, #1
    2d98:	2003      	movs	r0, #3
    2d9a:	f7ff fa9d 	bl	22d8 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    2d9e:	6860      	ldr	r0, [r4, #4]
    2da0:	68e3      	ldr	r3, [r4, #12]
    2da2:	4a06      	ldr	r2, [pc, #24]	; (2dbc <twi_0_init+0x2c>)
    2da4:	f100 0108 	add.w	r1, r0, #8
    2da8:	f000 fd5a 	bl	3860 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2dac:	4b04      	ldr	r3, [pc, #16]	; (2dc0 <twi_0_init+0x30>)
    2dae:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    2db0:	bf14      	ite	ne
    2db2:	f06f 000f 	mvnne.w	r0, #15
    2db6:	2000      	moveq	r0, #0
    2db8:	bd10      	pop	{r4, pc}
    2dba:	bf00      	nop
    2dbc:	00002dc5 	.word	0x00002dc5
    2dc0:	0bad0000 	.word	0x0bad0000

00002dc4 <event_handler>:
	switch (p_event->type) {
    2dc4:	7803      	ldrb	r3, [r0, #0]
    2dc6:	2b01      	cmp	r3, #1
    2dc8:	d008      	beq.n	2ddc <event_handler+0x18>
    2dca:	2b02      	cmp	r3, #2
    2dcc:	d008      	beq.n	2de0 <event_handler+0x1c>
    2dce:	b94b      	cbnz	r3, 2de4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2dd0:	4b05      	ldr	r3, [pc, #20]	; (2de8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2dd2:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2dd4:	f101 0010 	add.w	r0, r1, #16
    2dd8:	f001 bb36 	b.w	4448 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2ddc:	4b03      	ldr	r3, [pc, #12]	; (2dec <event_handler+0x28>)
    2dde:	e7f8      	b.n	2dd2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2de0:	4b03      	ldr	r3, [pc, #12]	; (2df0 <event_handler+0x2c>)
    2de2:	e7f6      	b.n	2dd2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2de4:	4b03      	ldr	r3, [pc, #12]	; (2df4 <event_handler+0x30>)
    2de6:	e7f4      	b.n	2dd2 <event_handler+0xe>
    2de8:	0bad0000 	.word	0x0bad0000
    2dec:	0bae0001 	.word	0x0bae0001
    2df0:	0bae0002 	.word	0x0bae0002
    2df4:	0bad0001 	.word	0x0bad0001

00002df8 <i2c_nrfx_twi_transfer>:
{
    2df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dfc:	4604      	mov	r4, r0
    2dfe:	b087      	sub	sp, #28
    2e00:	460d      	mov	r5, r1
    2e02:	4617      	mov	r7, r2
    2e04:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    2e06:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
    2e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e10:	f001 fb3a 	bl	4488 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    2e14:	68e0      	ldr	r0, [r4, #12]
    2e16:	3010      	adds	r0, #16
    2e18:	2200      	movs	r2, #0
    2e1a:	2300      	movs	r3, #0
    2e1c:	f001 fb34 	bl	4488 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    2e20:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
    2e22:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2edc <i2c_nrfx_twi_transfer+0xe4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    2e26:	f000 fd63 	bl	38f0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    2e2a:	f04f 0800 	mov.w	r8, #0
    2e2e:	45b8      	cmp	r8, r7
    2e30:	d301      	bcc.n	2e36 <i2c_nrfx_twi_transfer+0x3e>
    2e32:	2500      	movs	r5, #0
    2e34:	e029      	b.n	2e8a <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2e36:	f895 b008 	ldrb.w	fp, [r5, #8]
    2e3a:	f01b 0608 	ands.w	r6, fp, #8
    2e3e:	d144      	bne.n	2eca <i2c_nrfx_twi_transfer+0xd2>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2e40:	2214      	movs	r2, #20
    2e42:	4631      	mov	r1, r6
    2e44:	a801      	add	r0, sp, #4
    2e46:	f002 f8c9 	bl	4fdc <memset>
    2e4a:	686a      	ldr	r2, [r5, #4]
    2e4c:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2e4e:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2e52:	682a      	ldr	r2, [r5, #0]
    2e54:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2e58:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    2e5c:	f88d 9005 	strb.w	r9, [sp, #5]
    2e60:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2e62:	d11c      	bne.n	2e9e <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
    2e64:	1e7a      	subs	r2, r7, #1
    2e66:	4542      	cmp	r2, r8
    2e68:	d902      	bls.n	2e70 <i2c_nrfx_twi_transfer+0x78>
    2e6a:	7d2a      	ldrb	r2, [r5, #20]
    2e6c:	0752      	lsls	r2, r2, #29
    2e6e:	d518      	bpl.n	2ea2 <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2e70:	bb5b      	cbnz	r3, 2eca <i2c_nrfx_twi_transfer+0xd2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2e72:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    2e74:	6860      	ldr	r0, [r4, #4]
    2e76:	a901      	add	r1, sp, #4
    2e78:	f000 fd64 	bl	3944 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2e7c:	4550      	cmp	r0, sl
    2e7e:	d012      	beq.n	2ea6 <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
    2e80:	4b15      	ldr	r3, [pc, #84]	; (2ed8 <i2c_nrfx_twi_transfer+0xe0>)
    2e82:	4298      	cmp	r0, r3
    2e84:	d024      	beq.n	2ed0 <i2c_nrfx_twi_transfer+0xd8>
				ret = -EIO;
    2e86:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    2e8a:	6860      	ldr	r0, [r4, #4]
    2e8c:	f000 fd40 	bl	3910 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    2e90:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
    2e92:	f001 fad9 	bl	4448 <z_impl_k_sem_give>
}
    2e96:	4628      	mov	r0, r5
    2e98:	b007      	add	sp, #28
    2e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2e9e:	4632      	mov	r2, r6
    2ea0:	e7e8      	b.n	2e74 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2ea2:	2240      	movs	r2, #64	; 0x40
    2ea4:	e7e6      	b.n	2e74 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    2ea6:	68e0      	ldr	r0, [r4, #12]
    2ea8:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    2eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2eae:	2300      	movs	r3, #0
    2eb0:	f001 faea 	bl	4488 <z_impl_k_sem_take>
		if (ret != 0) {
    2eb4:	2800      	cmp	r0, #0
    2eb6:	d1e6      	bne.n	2e86 <i2c_nrfx_twi_transfer+0x8e>
		res = get_dev_data(dev)->res;
    2eb8:	68e3      	ldr	r3, [r4, #12]
    2eba:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    2ebc:	4553      	cmp	r3, sl
    2ebe:	f105 050c 	add.w	r5, r5, #12
    2ec2:	d1e0      	bne.n	2e86 <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
    2ec4:	f108 0801 	add.w	r8, r8, #1
    2ec8:	e7b1      	b.n	2e2e <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
    2eca:	f06f 0522 	mvn.w	r5, #34	; 0x22
    2ece:	e7dc      	b.n	2e8a <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
    2ed0:	f06f 050f 	mvn.w	r5, #15
    2ed4:	e7d9      	b.n	2e8a <i2c_nrfx_twi_transfer+0x92>
    2ed6:	bf00      	nop
    2ed8:	0bad000b 	.word	0x0bad000b
    2edc:	0bad0000 	.word	0x0bad0000

00002ee0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2ee2:	794b      	ldrb	r3, [r1, #5]
    2ee4:	2b01      	cmp	r3, #1
    2ee6:	d123      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2ee8:	798b      	ldrb	r3, [r1, #6]
    2eea:	2b03      	cmp	r3, #3
    2eec:	d120      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2eee:	79ca      	ldrb	r2, [r1, #7]
    2ef0:	b122      	cbz	r2, 2efc <uarte_nrfx_configure+0x1c>
    2ef2:	2a01      	cmp	r2, #1
    2ef4:	d11c      	bne.n	2f30 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2ef6:	6843      	ldr	r3, [r0, #4]
    2ef8:	791b      	ldrb	r3, [r3, #4]
    2efa:	b1cb      	cbz	r3, 2f30 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2efc:	790c      	ldrb	r4, [r1, #4]
    2efe:	b114      	cbz	r4, 2f06 <uarte_nrfx_configure+0x26>
    2f00:	2c02      	cmp	r4, #2
    2f02:	d115      	bne.n	2f30 <uarte_nrfx_configure+0x50>
    2f04:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2f06:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2f08:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2f0a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2f0e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2f10:	d062      	beq.n	2fd8 <uarte_nrfx_configure+0xf8>
    2f12:	d82b      	bhi.n	2f6c <uarte_nrfx_configure+0x8c>
    2f14:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2f18:	d061      	beq.n	2fde <uarte_nrfx_configure+0xfe>
    2f1a:	d814      	bhi.n	2f46 <uarte_nrfx_configure+0x66>
    2f1c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2f20:	d05f      	beq.n	2fe2 <uarte_nrfx_configure+0x102>
    2f22:	d808      	bhi.n	2f36 <uarte_nrfx_configure+0x56>
    2f24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2f28:	d05e      	beq.n	2fe8 <uarte_nrfx_configure+0x108>
    2f2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2f2e:	d05e      	beq.n	2fee <uarte_nrfx_configure+0x10e>
    2f30:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2f34:	e04f      	b.n	2fd6 <uarte_nrfx_configure+0xf6>
    2f36:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f3a:	d05b      	beq.n	2ff4 <uarte_nrfx_configure+0x114>
    2f3c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2f40:	d1f6      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2f42:	4b37      	ldr	r3, [pc, #220]	; (3020 <uarte_nrfx_configure+0x140>)
    2f44:	e03c      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2f46:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2f4a:	d056      	beq.n	2ffa <uarte_nrfx_configure+0x11a>
    2f4c:	d807      	bhi.n	2f5e <uarte_nrfx_configure+0x7e>
    2f4e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2f52:	d054      	beq.n	2ffe <uarte_nrfx_configure+0x11e>
    2f54:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f58:	d1ea      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2f5a:	4b32      	ldr	r3, [pc, #200]	; (3024 <uarte_nrfx_configure+0x144>)
    2f5c:	e030      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2f5e:	f647 2612 	movw	r6, #31250	; 0x7a12
    2f62:	42b3      	cmp	r3, r6
    2f64:	d1e4      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f6a:	e029      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2f6c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f70:	d047      	beq.n	3002 <uarte_nrfx_configure+0x122>
    2f72:	d813      	bhi.n	2f9c <uarte_nrfx_configure+0xbc>
    2f74:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f78:	d046      	beq.n	3008 <uarte_nrfx_configure+0x128>
    2f7a:	d809      	bhi.n	2f90 <uarte_nrfx_configure+0xb0>
    2f7c:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    2f80:	42b3      	cmp	r3, r6
    2f82:	d043      	beq.n	300c <uarte_nrfx_configure+0x12c>
    2f84:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f88:	d1d2      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f8a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f8e:	e017      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2f90:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f94:	d1cc      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f96:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f9a:	e011      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2f9c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2fa0:	d037      	beq.n	3012 <uarte_nrfx_configure+0x132>
    2fa2:	d808      	bhi.n	2fb6 <uarte_nrfx_configure+0xd6>
    2fa4:	4e20      	ldr	r6, [pc, #128]	; (3028 <uarte_nrfx_configure+0x148>)
    2fa6:	42b3      	cmp	r3, r6
    2fa8:	d036      	beq.n	3018 <uarte_nrfx_configure+0x138>
    2faa:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2fae:	d1bf      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2fb0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2fb4:	e004      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2fb6:	4e1d      	ldr	r6, [pc, #116]	; (302c <uarte_nrfx_configure+0x14c>)
    2fb8:	42b3      	cmp	r3, r6
    2fba:	d1b9      	bne.n	2f30 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2fc0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2fc4:	68c3      	ldr	r3, [r0, #12]
    2fc6:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2fc8:	4322      	orrs	r2, r4
    2fca:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2fcc:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2fd0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2fd4:	2000      	movs	r0, #0
}
    2fd6:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2fd8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2fdc:	e7f0      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2fde:	4b14      	ldr	r3, [pc, #80]	; (3030 <uarte_nrfx_configure+0x150>)
    2fe0:	e7ee      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2fe2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2fe6:	e7eb      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    2fe8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2fec:	e7e8      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    2fee:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2ff2:	e7e5      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2ff4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2ff8:	e7e2      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2ffa:	4b0e      	ldr	r3, [pc, #56]	; (3034 <uarte_nrfx_configure+0x154>)
    2ffc:	e7e0      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2ffe:	4b0e      	ldr	r3, [pc, #56]	; (3038 <uarte_nrfx_configure+0x158>)
    3000:	e7de      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3002:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3006:	e7db      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3008:	4b0c      	ldr	r3, [pc, #48]	; (303c <uarte_nrfx_configure+0x15c>)
    300a:	e7d9      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    300c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3010:	e7d6      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3012:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3016:	e7d3      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3018:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    301c:	e7d0      	b.n	2fc0 <uarte_nrfx_configure+0xe0>
    301e:	bf00      	nop
    3020:	0013b000 	.word	0x0013b000
    3024:	004ea000 	.word	0x004ea000
    3028:	0003d090 	.word	0x0003d090
    302c:	000f4240 	.word	0x000f4240
    3030:	00275000 	.word	0x00275000
    3034:	0075c000 	.word	0x0075c000
    3038:	003af000 	.word	0x003af000
    303c:	013a9000 	.word	0x013a9000

00003040 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3044:	68c7      	ldr	r7, [r0, #12]
{
    3046:	4606      	mov	r6, r0
    3048:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    304a:	f002 fa3e 	bl	54ca <k_is_in_isr>
    304e:	b9b8      	cbnz	r0, 3080 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    3050:	4b28      	ldr	r3, [pc, #160]	; (30f4 <uarte_nrfx_poll_out+0xb4>)
    3052:	781b      	ldrb	r3, [r3, #0]
    3054:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    3058:	6872      	ldr	r2, [r6, #4]
    305a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    305c:	b193      	cbz	r3, 3084 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    305e:	f04f 0320 	mov.w	r3, #32
    3062:	f3ef 8411 	mrs	r4, BASEPRI
    3066:	f383 8811 	msr	BASEPRI, r3
    306a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    306e:	4630      	mov	r0, r6
    3070:	f002 f886 	bl	5180 <is_tx_ready>
    3074:	bb38      	cbnz	r0, 30c6 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    3076:	f384 8811 	msr	BASEPRI, r4
    307a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    307e:	e7ee      	b.n	305e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3080:	2301      	movs	r3, #1
    3082:	e7e9      	b.n	3058 <uarte_nrfx_poll_out+0x18>
    3084:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3086:	4630      	mov	r0, r6
    3088:	f002 f87a 	bl	5180 <is_tx_ready>
    308c:	b970      	cbnz	r0, 30ac <uarte_nrfx_poll_out+0x6c>
    308e:	2001      	movs	r0, #1
    3090:	f002 f89d 	bl	51ce <nrfx_busy_wait>
    3094:	3c01      	subs	r4, #1
    3096:	d1f6      	bne.n	3086 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    3098:	2100      	movs	r1, #0
    309a:	2021      	movs	r0, #33	; 0x21
    309c:	f001 f9ae 	bl	43fc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    30a0:	e7f0      	b.n	3084 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    30a2:	f384 8811 	msr	BASEPRI, r4
    30a6:	f3bf 8f6f 	isb	sy
}
    30aa:	e7f5      	b.n	3098 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    30ac:	f04f 0320 	mov.w	r3, #32
    30b0:	f3ef 8411 	mrs	r4, BASEPRI
    30b4:	f383 8811 	msr	BASEPRI, r3
    30b8:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
    30bc:	4630      	mov	r0, r6
    30be:	f002 f85f 	bl	5180 <is_tx_ready>
    30c2:	2800      	cmp	r0, #0
    30c4:	d0ed      	beq.n	30a2 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    30c6:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    30ca:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30cc:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    30ce:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    30d2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30d6:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    30da:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    30de:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    30e2:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30e6:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    30e8:	f384 8811 	msr	BASEPRI, r4
    30ec:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    30f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30f4:	20000783 	.word	0x20000783

000030f8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30fa:	2200      	movs	r2, #0
    30fc:	4605      	mov	r5, r0
    30fe:	2101      	movs	r1, #1
    3100:	2002      	movs	r0, #2
    3102:	f7ff f8e9 	bl	22d8 <z_arm_irq_priority_set>
    3106:	2002      	movs	r0, #2
    3108:	f7ff f8c8 	bl	229c <arch_irq_enable>
	return config->uarte_regs;
    310c:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    310e:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    3110:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    3112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3116:	2200      	movs	r2, #0
    3118:	2140      	movs	r1, #64	; 0x40
    311a:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
    311e:	2006      	movs	r0, #6
	data->dev = dev;
    3120:	6035      	str	r5, [r6, #0]
    3122:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3126:	2103      	movs	r1, #3
    3128:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    312c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    3130:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3134:	2008      	movs	r0, #8
    3136:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    313a:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    313e:	2220      	movs	r2, #32
    3140:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3144:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3148:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
    314a:	2305      	movs	r3, #5
    314c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3150:	2307      	movs	r3, #7
    3152:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    3156:	3104      	adds	r1, #4
    3158:	4628      	mov	r0, r5
    315a:	f7ff fec1 	bl	2ee0 <uarte_nrfx_configure>
	if (err) {
    315e:	4607      	mov	r7, r0
    3160:	2800      	cmp	r0, #0
    3162:	d13c      	bne.n	31de <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
    3164:	686b      	ldr	r3, [r5, #4]
    3166:	799b      	ldrb	r3, [r3, #6]
    3168:	b1cb      	cbz	r3, 319e <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    316a:	f106 000e 	add.w	r0, r6, #14
    316e:	f000 fa63 	bl	3638 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3172:	4b1d      	ldr	r3, [pc, #116]	; (31e8 <uarte_0_init+0xf0>)
    3174:	4298      	cmp	r0, r3
    3176:	d134      	bne.n	31e2 <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3178:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    317a:	00c3      	lsls	r3, r0, #3
    317c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3180:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3184:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3188:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    318c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3190:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3194:	4a15      	ldr	r2, [pc, #84]	; (31ec <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3196:	2301      	movs	r3, #1
    3198:	4083      	lsls	r3, r0
    319a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    319e:	2308      	movs	r3, #8
    31a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31a4:	2300      	movs	r3, #0
    31a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    31aa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    31ae:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    31b2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    31b6:	2301      	movs	r3, #1
    31b8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31bc:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    31be:	686b      	ldr	r3, [r5, #4]
    31c0:	799b      	ldrb	r3, [r3, #6]
    31c2:	b91b      	cbnz	r3, 31cc <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
    31c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    31c8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    31cc:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    31ce:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    31d0:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    31d4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31d8:	2301      	movs	r3, #1
    31da:	60a3      	str	r3, [r4, #8]
    31dc:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    31de:	4638      	mov	r0, r7
    31e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    31e2:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    31e6:	e7fa      	b.n	31de <uarte_0_init+0xe6>
    31e8:	0bad0000 	.word	0x0bad0000
    31ec:	4001f000 	.word	0x4001f000

000031f0 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    31f0:	4b04      	ldr	r3, [pc, #16]	; (3204 <nrf52_errata_108+0x14>)
    31f2:	6818      	ldr	r0, [r3, #0]
    31f4:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    31f6:	bf04      	itt	eq
    31f8:	4b03      	ldreq	r3, [pc, #12]	; (3208 <nrf52_errata_108+0x18>)
    31fa:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    31fc:	1f83      	subs	r3, r0, #6
    31fe:	4258      	negs	r0, r3
    3200:	4158      	adcs	r0, r3
    3202:	4770      	bx	lr
    3204:	10000130 	.word	0x10000130
    3208:	f0000fe0 	.word	0xf0000fe0

0000320c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    320c:	4b07      	ldr	r3, [pc, #28]	; (322c <nrf52_errata_16+0x20>)
    320e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3210:	2b06      	cmp	r3, #6
    3212:	d109      	bne.n	3228 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3214:	4b06      	ldr	r3, [pc, #24]	; (3230 <nrf52_errata_16+0x24>)
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	f3c3 1303 	ubfx	r3, r3, #4, #4
    321c:	3b03      	subs	r3, #3
    321e:	2b03      	cmp	r3, #3
    3220:	d802      	bhi.n	3228 <nrf52_errata_16+0x1c>
    3222:	4a04      	ldr	r2, [pc, #16]	; (3234 <nrf52_errata_16+0x28>)
    3224:	5cd0      	ldrb	r0, [r2, r3]
    3226:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3228:	2000      	movs	r0, #0
    #endif
}
    322a:	4770      	bx	lr
    322c:	f0000fe0 	.word	0xf0000fe0
    3230:	f0000fe8 	.word	0xf0000fe8
    3234:	000058aa 	.word	0x000058aa

00003238 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3238:	4a02      	ldr	r2, [pc, #8]	; (3244 <nvmc_wait+0xc>)
    323a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    323e:	2b00      	cmp	r3, #0
    3240:	d0fb      	beq.n	323a <nvmc_wait+0x2>
}
    3242:	4770      	bx	lr
    3244:	4001e000 	.word	0x4001e000

00003248 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3248:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    324a:	f7ff ffd1 	bl	31f0 <nrf52_errata_108>
    324e:	b128      	cbz	r0, 325c <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3250:	4b77      	ldr	r3, [pc, #476]	; (3430 <SystemInit+0x1e8>)
    3252:	4a78      	ldr	r2, [pc, #480]	; (3434 <SystemInit+0x1ec>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	f3c3 2304 	ubfx	r3, r3, #8, #5
    325a:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    325c:	f7ff ffd6 	bl	320c <nrf52_errata_16>
    3260:	b110      	cbz	r0, 3268 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3262:	4b75      	ldr	r3, [pc, #468]	; (3438 <SystemInit+0x1f0>)
    3264:	4a75      	ldr	r2, [pc, #468]	; (343c <SystemInit+0x1f4>)
    3266:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3268:	f7ff ffc2 	bl	31f0 <nrf52_errata_108>
    326c:	b128      	cbz	r0, 327a <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    326e:	4b74      	ldr	r3, [pc, #464]	; (3440 <SystemInit+0x1f8>)
    3270:	4a74      	ldr	r2, [pc, #464]	; (3444 <SystemInit+0x1fc>)
    3272:	681b      	ldr	r3, [r3, #0]
    3274:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3278:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    327a:	f7ff ffc7 	bl	320c <nrf52_errata_16>
    327e:	b120      	cbz	r0, 328a <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3280:	4a71      	ldr	r2, [pc, #452]	; (3448 <SystemInit+0x200>)
    3282:	68d3      	ldr	r3, [r2, #12]
    3284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3288:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    328a:	f7ff ffb1 	bl	31f0 <nrf52_errata_108>
    328e:	b140      	cbz	r0, 32a2 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3294:	2200      	movs	r2, #0
    3296:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    329a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    329e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    32a2:	f7ff ffb3 	bl	320c <nrf52_errata_16>
    32a6:	b110      	cbz	r0, 32ae <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    32a8:	4b68      	ldr	r3, [pc, #416]	; (344c <SystemInit+0x204>)
    32aa:	2203      	movs	r2, #3
    32ac:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    32ae:	f7ff ffad 	bl	320c <nrf52_errata_16>
    32b2:	b140      	cbz	r0, 32c6 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    32b4:	4b66      	ldr	r3, [pc, #408]	; (3450 <SystemInit+0x208>)
    32b6:	2205      	movs	r2, #5
    32b8:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    32ba:	2201      	movs	r2, #1
    32bc:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    32be:	2200      	movs	r2, #0
    32c0:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    32c2:	223f      	movs	r2, #63	; 0x3f
    32c4:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    32c6:	4b63      	ldr	r3, [pc, #396]	; (3454 <SystemInit+0x20c>)
    32c8:	681a      	ldr	r2, [r3, #0]
    32ca:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    32cc:	bf0b      	itete	eq
    32ce:	4b62      	ldreq	r3, [pc, #392]	; (3458 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    32d0:	4b62      	ldrne	r3, [pc, #392]	; (345c <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    32d2:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    32d4:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    32d6:	bf02      	ittt	eq
    32d8:	3308      	addeq	r3, #8
    32da:	681b      	ldreq	r3, [r3, #0]
    32dc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    32e0:	2a06      	cmp	r2, #6
    32e2:	d14d      	bne.n	3380 <SystemInit+0x138>
            {
                switch(var2)
    32e4:	3b03      	subs	r3, #3
    32e6:	2b03      	cmp	r3, #3
    32e8:	d803      	bhi.n	32f2 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    32ea:	4a5d      	ldr	r2, [pc, #372]	; (3460 <SystemInit+0x218>)
    32ec:	5cd3      	ldrb	r3, [r2, r3]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d046      	beq.n	3380 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    32f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    32f6:	4b5b      	ldr	r3, [pc, #364]	; (3464 <SystemInit+0x21c>)
    32f8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    32fc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3300:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3304:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3308:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    330c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3310:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3314:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3318:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    331c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3320:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3324:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3328:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    332c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3330:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3334:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3338:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    333c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3340:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3344:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3348:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    334c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3350:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3354:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3358:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    335c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3360:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3364:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3368:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    336c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3370:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3374:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3378:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    337c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3380:	f7ff ff36 	bl	31f0 <nrf52_errata_108>
    3384:	b128      	cbz	r0, 3392 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    3386:	4b38      	ldr	r3, [pc, #224]	; (3468 <SystemInit+0x220>)
    3388:	4a38      	ldr	r2, [pc, #224]	; (346c <SystemInit+0x224>)
    338a:	681b      	ldr	r3, [r3, #0]
    338c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3390:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3392:	f7ff ff2d 	bl	31f0 <nrf52_errata_108>
    3396:	b148      	cbz	r0, 33ac <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    339c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    33a0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    33a2:	bf44      	itt	mi
    33a4:	f06f 0201 	mvnmi.w	r2, #1
    33a8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    33ac:	4b29      	ldr	r3, [pc, #164]	; (3454 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	2b06      	cmp	r3, #6
    33b2:	d10c      	bne.n	33ce <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    33b4:	4b29      	ldr	r3, [pc, #164]	; (345c <SystemInit+0x214>)
    33b6:	681b      	ldr	r3, [r3, #0]
    33b8:	3b03      	subs	r3, #3
    33ba:	2b03      	cmp	r3, #3
    33bc:	d802      	bhi.n	33c4 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    33be:	4a2c      	ldr	r2, [pc, #176]	; (3470 <SystemInit+0x228>)
    33c0:	5cd3      	ldrb	r3, [r2, r3]
    33c2:	b123      	cbz	r3, 33ce <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    33c4:	4a2b      	ldr	r2, [pc, #172]	; (3474 <SystemInit+0x22c>)
    33c6:	6813      	ldr	r3, [r2, #0]
    33c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    33cc:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    33ce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    33d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    33d6:	2a00      	cmp	r2, #0
    33d8:	db03      	blt.n	33e2 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    33da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    33de:	2b00      	cmp	r3, #0
    33e0:	da22      	bge.n	3428 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    33e2:	4925      	ldr	r1, [pc, #148]	; (3478 <SystemInit+0x230>)
    33e4:	2301      	movs	r3, #1
    33e6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    33ea:	f7ff ff25 	bl	3238 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    33ee:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    33f2:	2415      	movs	r4, #21
    33f4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    33f8:	f7ff ff1e 	bl	3238 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    33fc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3400:	f7ff ff1a 	bl	3238 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3404:	2300      	movs	r3, #0
    3406:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    340a:	f7ff ff15 	bl	3238 <nvmc_wait>
    340e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3412:	491a      	ldr	r1, [pc, #104]	; (347c <SystemInit+0x234>)
    3414:	4b1a      	ldr	r3, [pc, #104]	; (3480 <SystemInit+0x238>)
    3416:	68ca      	ldr	r2, [r1, #12]
    3418:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    341c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    341e:	60cb      	str	r3, [r1, #12]
    3420:	f3bf 8f4f 	dsb	sy
    __NOP();
    3424:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3426:	e7fd      	b.n	3424 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3428:	4b16      	ldr	r3, [pc, #88]	; (3484 <SystemInit+0x23c>)
    342a:	4a17      	ldr	r2, [pc, #92]	; (3488 <SystemInit+0x240>)
    342c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    342e:	bd10      	pop	{r4, pc}
    3430:	10000324 	.word	0x10000324
    3434:	40013540 	.word	0x40013540
    3438:	4007c074 	.word	0x4007c074
    343c:	baadf00d 	.word	0xbaadf00d
    3440:	10000244 	.word	0x10000244
    3444:	4000053c 	.word	0x4000053c
    3448:	e000edf0 	.word	0xe000edf0
    344c:	400005a0 	.word	0x400005a0
    3450:	40005610 	.word	0x40005610
    3454:	10000130 	.word	0x10000130
    3458:	f0000fe0 	.word	0xf0000fe0
    345c:	10000134 	.word	0x10000134
    3460:	000058a2 	.word	0x000058a2
    3464:	4000c000 	.word	0x4000c000
    3468:	10000258 	.word	0x10000258
    346c:	40000ee4 	.word	0x40000ee4
    3470:	000058a6 	.word	0x000058a6
    3474:	4000173c 	.word	0x4000173c
    3478:	4001e000 	.word	0x4001e000
    347c:	e000ed00 	.word	0xe000ed00
    3480:	05fa0004 	.word	0x05fa0004
    3484:	20000040 	.word	0x20000040
    3488:	03d09000 	.word	0x03d09000

0000348c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    348c:	4b04      	ldr	r3, [pc, #16]	; (34a0 <nrfx_clock_init+0x14>)
    348e:	791a      	ldrb	r2, [r3, #4]
    3490:	b922      	cbnz	r2, 349c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3492:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3494:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3496:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3498:	4802      	ldr	r0, [pc, #8]	; (34a4 <nrfx_clock_init+0x18>)
    349a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    349c:	4802      	ldr	r0, [pc, #8]	; (34a8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    349e:	4770      	bx	lr
    34a0:	200002e4 	.word	0x200002e4
    34a4:	0bad0000 	.word	0x0bad0000
    34a8:	0bad000c 	.word	0x0bad000c

000034ac <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    34ac:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    34ae:	b110      	cbz	r0, 34b6 <nrfx_clock_start+0xa>
    34b0:	2801      	cmp	r0, #1
    34b2:	d033      	beq.n	351c <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    34b4:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    34b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34ba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    34be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    34c2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    34c6:	4619      	mov	r1, r3
    34c8:	d024      	beq.n	3514 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    34ca:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    34ce:	2a01      	cmp	r2, #1
    34d0:	d120      	bne.n	3514 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
    34d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34d6:	4b16      	ldr	r3, [pc, #88]	; (3530 <nrfx_clock_start+0x84>)
    34d8:	2200      	movs	r2, #0
    34da:	601a      	str	r2, [r3, #0]
    34dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    34de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34e2:	2202      	movs	r2, #2
    34e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    34e8:	4a12      	ldr	r2, [pc, #72]	; (3534 <nrfx_clock_start+0x88>)
    34ea:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    34ec:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    34f0:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    34f2:	4b11      	ldr	r3, [pc, #68]	; (3538 <nrfx_clock_start+0x8c>)
    34f4:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    34f6:	f044 0101 	orr.w	r1, r4, #1
    34fa:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    34fc:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    34fe:	6859      	ldr	r1, [r3, #4]
    3500:	1b49      	subs	r1, r1, r5
    3502:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    3506:	d3fa      	bcc.n	34fe <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
    3508:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    350a:	4b0c      	ldr	r3, [pc, #48]	; (353c <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
    350c:	60d0      	str	r0, [r2, #12]
    350e:	2201      	movs	r2, #1
    3510:	601a      	str	r2, [r3, #0]
}
    3512:	e7cf      	b.n	34b4 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3514:	2300      	movs	r3, #0
    3516:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    351a:	e7dc      	b.n	34d6 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    351c:	4b08      	ldr	r3, [pc, #32]	; (3540 <nrfx_clock_start+0x94>)
    351e:	2200      	movs	r2, #0
    3520:	601a      	str	r2, [r3, #0]
    3522:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3528:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    352c:	6018      	str	r0, [r3, #0]
}
    352e:	e7c1      	b.n	34b4 <nrfx_clock_start+0x8>
    3530:	40000104 	.word	0x40000104
    3534:	e000edf0 	.word	0xe000edf0
    3538:	e0001000 	.word	0xe0001000
    353c:	40000008 	.word	0x40000008
    3540:	40000100 	.word	0x40000100

00003544 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3544:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3546:	b110      	cbz	r0, 354e <nrfx_clock_stop+0xa>
    3548:	2801      	cmp	r0, #1
    354a:	d018      	beq.n	357e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    354c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    354e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3552:	2202      	movs	r2, #2
    3554:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3558:	4a18      	ldr	r2, [pc, #96]	; (35bc <nrfx_clock_stop+0x78>)
    355a:	6010      	str	r0, [r2, #0]
    355c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    355e:	4a18      	ldr	r2, [pc, #96]	; (35c0 <nrfx_clock_stop+0x7c>)
    3560:	2101      	movs	r1, #1
    3562:	6011      	str	r1, [r2, #0]
    3564:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3568:	461c      	mov	r4, r3
    356a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    356e:	03db      	lsls	r3, r3, #15
    3570:	d5ec      	bpl.n	354c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3572:	2001      	movs	r0, #1
    3574:	f001 fe2b 	bl	51ce <nrfx_busy_wait>
    3578:	3d01      	subs	r5, #1
    357a:	d1f6      	bne.n	356a <nrfx_clock_stop+0x26>
    357c:	e7e6      	b.n	354c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    357e:	4b11      	ldr	r3, [pc, #68]	; (35c4 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3580:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3584:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3586:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    358a:	601a      	str	r2, [r3, #0]
    358c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    358e:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <nrfx_clock_stop+0x84>)
    3590:	f242 7510 	movw	r5, #10000	; 0x2710
    3594:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3596:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    359a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    359e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    35a0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    35a4:	d505      	bpl.n	35b2 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    35a6:	b123      	cbz	r3, 35b2 <nrfx_clock_stop+0x6e>
    35a8:	2001      	movs	r0, #1
    35aa:	f001 fe10 	bl	51ce <nrfx_busy_wait>
    35ae:	3d01      	subs	r5, #1
    35b0:	d1f1      	bne.n	3596 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    35b2:	4b06      	ldr	r3, [pc, #24]	; (35cc <nrfx_clock_stop+0x88>)
    35b4:	2200      	movs	r2, #0
    35b6:	715a      	strb	r2, [r3, #5]
    35b8:	e7c8      	b.n	354c <nrfx_clock_stop+0x8>
    35ba:	bf00      	nop
    35bc:	40000104 	.word	0x40000104
    35c0:	4000000c 	.word	0x4000000c
    35c4:	40000100 	.word	0x40000100
    35c8:	40000004 	.word	0x40000004
    35cc:	200002e4 	.word	0x200002e4

000035d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35d0:	4b16      	ldr	r3, [pc, #88]	; (362c <nrfx_power_clock_irq_handler+0x5c>)
    35d2:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    35d4:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    35d6:	b16a      	cbz	r2, 35f4 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35d8:	2200      	movs	r2, #0
    35da:	601a      	str	r2, [r3, #0]
    35dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    35de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35e2:	2201      	movs	r2, #1
    35e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    35e8:	4b11      	ldr	r3, [pc, #68]	; (3630 <nrfx_power_clock_irq_handler+0x60>)
    35ea:	7958      	ldrb	r0, [r3, #5]
    35ec:	b910      	cbnz	r0, 35f4 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    35ee:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35f4:	4b0f      	ldr	r3, [pc, #60]	; (3634 <nrfx_power_clock_irq_handler+0x64>)
    35f6:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    35f8:	b172      	cbz	r2, 3618 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35fa:	2200      	movs	r2, #0
    35fc:	601a      	str	r2, [r3, #0]
    35fe:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3604:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3608:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    360c:	0792      	lsls	r2, r2, #30
    360e:	d104      	bne.n	361a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3610:	2201      	movs	r2, #1
    3612:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3616:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3618:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    361a:	2202      	movs	r2, #2
    361c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3620:	4b03      	ldr	r3, [pc, #12]	; (3630 <nrfx_power_clock_irq_handler+0x60>)
}
    3622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	2001      	movs	r0, #1
    362a:	4718      	bx	r3
    362c:	40000100 	.word	0x40000100
    3630:	200002e4 	.word	0x200002e4
    3634:	40000104 	.word	0x40000104

00003638 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    363c:	4a14      	ldr	r2, [pc, #80]	; (3690 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    363e:	4e15      	ldr	r6, [pc, #84]	; (3694 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    3640:	4f15      	ldr	r7, [pc, #84]	; (3698 <nrfx_ppi_channel_alloc+0x60>)
{
    3642:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3644:	4815      	ldr	r0, [pc, #84]	; (369c <nrfx_ppi_channel_alloc+0x64>)
{
    3646:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    3648:	f04f 0e01 	mov.w	lr, #1
    364c:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    3650:	f04f 0320 	mov.w	r3, #32
    3654:	f3ef 8811 	mrs	r8, BASEPRI
    3658:	f383 8811 	msr	BASEPRI, r3
    365c:	f3bf 8f6f 	isb	sy
    3660:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3664:	4213      	tst	r3, r2
    3666:	d007      	beq.n	3678 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3668:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    366a:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    366c:	bf01      	itttt	eq
    366e:	4319      	orreq	r1, r3
    3670:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    3672:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    3676:	4638      	moveq	r0, r7
	__asm__ volatile(
    3678:	f388 8811 	msr	BASEPRI, r8
    367c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    3680:	42b8      	cmp	r0, r7
    3682:	d003      	beq.n	368c <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3684:	439a      	bics	r2, r3
    3686:	f104 0401 	add.w	r4, r4, #1
    368a:	d1df      	bne.n	364c <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3690:	000fffff 	.word	0x000fffff
    3694:	200002ec 	.word	0x200002ec
    3698:	0bad0000 	.word	0x0bad0000
    369c:	0bad0002 	.word	0x0bad0002

000036a0 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    36a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    36a2:	4b34      	ldr	r3, [pc, #208]	; (3774 <twi_rx_start_transfer+0xd4>)
    36a4:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36a6:	2300      	movs	r3, #0
    36a8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    36ac:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    36b0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    36b4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    36b8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    36bc:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    36c0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    36c4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    36c8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    36ca:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    36ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    36d0:	2b01      	cmp	r3, #1
{
    36d2:	4604      	mov	r4, r0
    36d4:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    36d6:	d117      	bne.n	3708 <twi_rx_start_transfer+0x68>
    36d8:	6a0b      	ldr	r3, [r1, #32]
    36da:	065b      	lsls	r3, r3, #25
    36dc:	d414      	bmi.n	3708 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    36de:	2302      	movs	r3, #2
    36e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36e4:	2301      	movs	r3, #1
    36e6:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    36e8:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    36ec:	2a02      	cmp	r2, #2
    36ee:	bf18      	it	ne
    36f0:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    36f2:	682b      	ldr	r3, [r5, #0]
    36f4:	b193      	cbz	r3, 371c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    36f6:	f240 2386 	movw	r3, #646	; 0x286
    36fa:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    36fc:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    36fe:	481e      	ldr	r0, [pc, #120]	; (3778 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    3700:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    3704:	b003      	add	sp, #12
    3706:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    3708:	2301      	movs	r3, #1
    370a:	e7e9      	b.n	36e0 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    370c:	4629      	mov	r1, r5
    370e:	4620      	mov	r0, r4
    3710:	f001 fd86 	bl	5220 <twi_transfer>
        while ((hw_timeout > 0) &&
    3714:	b128      	cbz	r0, 3722 <twi_rx_start_transfer+0x82>
               hw_timeout--;
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	3b01      	subs	r3, #1
    371a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    371c:	9b01      	ldr	r3, [sp, #4]
    371e:	2b00      	cmp	r3, #0
    3720:	dcf4      	bgt.n	370c <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    3722:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3726:	b95b      	cbnz	r3, 3740 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3728:	4813      	ldr	r0, [pc, #76]	; (3778 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	2b00      	cmp	r3, #0
    372e:	dce9      	bgt.n	3704 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3730:	2300      	movs	r3, #0
    3732:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3736:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <twi_rx_start_transfer+0xdc>)
    373a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    373e:	e7e1      	b.n	3704 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    3740:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3744:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3748:	b18b      	cbz	r3, 376e <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    374a:	4a0d      	ldr	r2, [pc, #52]	; (3780 <twi_rx_start_transfer+0xe0>)
    374c:	480b      	ldr	r0, [pc, #44]	; (377c <twi_rx_start_transfer+0xdc>)
    374e:	f013 0f01 	tst.w	r3, #1
    3752:	bf18      	it	ne
    3754:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3756:	f013 0f02 	tst.w	r3, #2
    375a:	f102 0201 	add.w	r2, r2, #1
    375e:	bf18      	it	ne
    3760:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3762:	f013 0f04 	tst.w	r3, #4
    3766:	4b07      	ldr	r3, [pc, #28]	; (3784 <twi_rx_start_transfer+0xe4>)
    3768:	bf18      	it	ne
    376a:	4618      	movne	r0, r3
    376c:	e7dd      	b.n	372a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    376e:	4803      	ldr	r0, [pc, #12]	; (377c <twi_rx_start_transfer+0xdc>)
    3770:	e7db      	b.n	372a <twi_rx_start_transfer+0x8a>
    3772:	bf00      	nop
    3774:	000186a0 	.word	0x000186a0
    3778:	0bad0000 	.word	0x0bad0000
    377c:	0bad0001 	.word	0x0bad0001
    3780:	0bae0000 	.word	0x0bae0000
    3784:	0bae0002 	.word	0x0bae0002

00003788 <twi_tx_start_transfer>:
{
    3788:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    378a:	4b30      	ldr	r3, [pc, #192]	; (384c <twi_tx_start_transfer+0xc4>)
    378c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    378e:	2300      	movs	r3, #0
    3790:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3794:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    3798:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    379c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    37a0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    37a4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    37a8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    37ac:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
    37b0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    37b4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    37b6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37ba:	2301      	movs	r3, #1
    37bc:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    37be:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    37c2:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    37c4:	429a      	cmp	r2, r3
    37c6:	bf18      	it	ne
    37c8:	6083      	strne	r3, [r0, #8]
{
    37ca:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
    37cc:	f001 fd0b 	bl	51e6 <twi_send_byte>
    if (p_cb->handler)
    37d0:	682b      	ldr	r3, [r5, #0]
    37d2:	b183      	cbz	r3, 37f6 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    37d4:	f240 2386 	movw	r3, #646	; 0x286
    37d8:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    37da:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    37dc:	481c      	ldr	r0, [pc, #112]	; (3850 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    37de:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    37e2:	b003      	add	sp, #12
    37e4:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    37e6:	4629      	mov	r1, r5
    37e8:	4620      	mov	r0, r4
    37ea:	f001 fd19 	bl	5220 <twi_transfer>
        while ((hw_timeout > 0) &&
    37ee:	b128      	cbz	r0, 37fc <twi_tx_start_transfer+0x74>
            hw_timeout--;
    37f0:	9b01      	ldr	r3, [sp, #4]
    37f2:	3b01      	subs	r3, #1
    37f4:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    37f6:	9b01      	ldr	r3, [sp, #4]
    37f8:	2b00      	cmp	r3, #0
    37fa:	dcf4      	bgt.n	37e6 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    37fc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3800:	b95b      	cbnz	r3, 381a <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3802:	4813      	ldr	r0, [pc, #76]	; (3850 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    3804:	9b01      	ldr	r3, [sp, #4]
    3806:	2b00      	cmp	r3, #0
    3808:	dceb      	bgt.n	37e2 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    380a:	2300      	movs	r3, #0
    380c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3810:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3812:	4810      	ldr	r0, [pc, #64]	; (3854 <twi_tx_start_transfer+0xcc>)
    3814:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    3818:	e7e3      	b.n	37e2 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    381a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    381e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3822:	b18b      	cbz	r3, 3848 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3824:	4a0c      	ldr	r2, [pc, #48]	; (3858 <twi_tx_start_transfer+0xd0>)
    3826:	480b      	ldr	r0, [pc, #44]	; (3854 <twi_tx_start_transfer+0xcc>)
    3828:	f013 0f01 	tst.w	r3, #1
    382c:	bf18      	it	ne
    382e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3830:	f013 0f02 	tst.w	r3, #2
    3834:	f102 0201 	add.w	r2, r2, #1
    3838:	bf18      	it	ne
    383a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    383c:	f013 0f04 	tst.w	r3, #4
    3840:	4b06      	ldr	r3, [pc, #24]	; (385c <twi_tx_start_transfer+0xd4>)
    3842:	bf18      	it	ne
    3844:	4618      	movne	r0, r3
    3846:	e7dd      	b.n	3804 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    3848:	4802      	ldr	r0, [pc, #8]	; (3854 <twi_tx_start_transfer+0xcc>)
    384a:	e7db      	b.n	3804 <twi_tx_start_transfer+0x7c>
    384c:	000186a0 	.word	0x000186a0
    3850:	0bad0000 	.word	0x0bad0000
    3854:	0bad0001 	.word	0x0bad0001
    3858:	0bae0000 	.word	0x0bae0000
    385c:	0bae0002 	.word	0x0bae0002

00003860 <nrfx_twi_init>:
{
    3860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3862:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3864:	4d1f      	ldr	r5, [pc, #124]	; (38e4 <nrfx_twi_init+0x84>)
    3866:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    386a:	fb0c fc07 	mul.w	ip, ip, r7
    386e:	eb05 040c 	add.w	r4, r5, ip
    3872:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    3876:	bb9e      	cbnz	r6, 38e0 <nrfx_twi_init+0x80>
    p_cb->int_mask        = 0;
    3878:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    387a:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    387e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    3882:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
    3886:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
    3888:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    388a:	7b4b      	ldrb	r3, [r1, #13]
    388c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    *p_pin = pin_number & 0x1F;
    3890:	f006 031f 	and.w	r3, r6, #31
    p_cb->handler         = event_handler;
    3894:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3898:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    389c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    38a0:	f240 6e0c 	movw	lr, #1548	; 0x60c
    38a4:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    38a8:	684c      	ldr	r4, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    38aa:	6800      	ldr	r0, [r0, #0]
    *p_pin = pin_number & 0x1F;
    38ac:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    38b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    38b4:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
    38b8:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELSCL = scl_pin;
    38ba:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    38be:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
    38c2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    38c6:	b11a      	cbz	r2, 38d0 <nrfx_twi_init+0x70>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    38c8:	f340 3007 	sbfx	r0, r0, #12, #8
    38cc:	f7fe fce6 	bl	229c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    38d0:	233c      	movs	r3, #60	; 0x3c
    38d2:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    38d6:	4804      	ldr	r0, [pc, #16]	; (38e8 <nrfx_twi_init+0x88>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    38d8:	2301      	movs	r3, #1
    38da:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    38de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    38e0:	4802      	ldr	r0, [pc, #8]	; (38ec <nrfx_twi_init+0x8c>)
    38e2:	e7fc      	b.n	38de <nrfx_twi_init+0x7e>
    38e4:	200002f0 	.word	0x200002f0
    38e8:	0bad0000 	.word	0x0bad0000
    38ec:	0bad0005 	.word	0x0bad0005

000038f0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    38f0:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    38f2:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    38f4:	2105      	movs	r1, #5
    38f6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    38fa:	4a04      	ldr	r2, [pc, #16]	; (390c <nrfx_twi_enable+0x1c>)
    38fc:	213c      	movs	r1, #60	; 0x3c
    38fe:	fb01 2303 	mla	r3, r1, r3, r2
    3902:	2202      	movs	r2, #2
    3904:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    3908:	4770      	bx	lr
    390a:	bf00      	nop
    390c:	200002f0 	.word	0x200002f0

00003910 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3910:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    3912:	490a      	ldr	r1, [pc, #40]	; (393c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3914:	7902      	ldrb	r2, [r0, #4]
    3916:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    391a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    391e:	f021 0103 	bic.w	r1, r1, #3
    3922:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3926:	2100      	movs	r1, #0
    3928:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <nrfx_twi_disable+0x30>)
    392e:	213c      	movs	r1, #60	; 0x3c
    3930:	fb01 3302 	mla	r3, r1, r2, r3
    3934:	2201      	movs	r2, #1
    3936:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    393a:	4770      	bx	lr
    393c:	00044286 	.word	0x00044286
    3940:	200002f0 	.word	0x200002f0

00003944 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3948:	4e32      	ldr	r6, [pc, #200]	; (3a14 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    394a:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    394e:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3952:	233c      	movs	r3, #60	; 0x3c
    3954:	fb03 6308 	mla	r3, r3, r8, r6
{
    3958:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    395a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    395e:	2b01      	cmp	r3, #1
{
    3960:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3962:	d104      	bne.n	396e <nrfx_twi_xfer+0x2a>
    3964:	780b      	ldrb	r3, [r1, #0]
    3966:	2b01      	cmp	r3, #1
    3968:	d106      	bne.n	3978 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    396a:	482b      	ldr	r0, [pc, #172]	; (3a18 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    396c:	e011      	b.n	3992 <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    396e:	2b02      	cmp	r3, #2
    3970:	d102      	bne.n	3978 <nrfx_twi_xfer+0x34>
    3972:	780b      	ldrb	r3, [r1, #0]
    3974:	2b01      	cmp	r3, #1
    3976:	d1f8      	bne.n	396a <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    3978:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
    397a:	4b28      	ldr	r3, [pc, #160]	; (3a1c <nrfx_twi_xfer+0xd8>)
    397c:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    3980:	fb05 6508 	mla	r5, r5, r8, r6
    3984:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3988:	b12b      	cbz	r3, 3996 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    398a:	68ab      	ldr	r3, [r5, #8]
        return err_code;
    398c:	4824      	ldr	r0, [pc, #144]	; (3a20 <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    398e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    3992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    3996:	f087 0304 	eor.w	r3, r7, #4
    399a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    399e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
    39a2:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    39a4:	46a6      	mov	lr, r4
    39a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    39aa:	f105 0c0c 	add.w	ip, r5, #12
    39ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    39b2:	f8de 3000 	ldr.w	r3, [lr]
    39b6:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
    39ba:	6863      	ldr	r3, [r4, #4]
    39bc:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    39be:	68e3      	ldr	r3, [r4, #12]
    39c0:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
    39c2:	7863      	ldrb	r3, [r4, #1]
    39c4:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    39c8:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    39ca:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    39ce:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    39d0:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    39d4:	d019      	beq.n	3a0a <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    39d6:	b9b3      	cbnz	r3, 3a06 <nrfx_twi_xfer+0xc2>
    39d8:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    39dc:	233c      	movs	r3, #60	; 0x3c
    39de:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    39e2:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    39e4:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    39e8:	4648      	mov	r0, r9
    39ea:	f7ff fecd 	bl	3788 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    39ee:	233c      	movs	r3, #60	; 0x3c
    39f0:	fb03 f808 	mul.w	r8, r3, r8
    39f4:	eb06 0208 	add.w	r2, r6, r8
    39f8:	f856 3008 	ldr.w	r3, [r6, r8]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d1c8      	bne.n	3992 <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    3a00:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    3a04:	e7c5      	b.n	3992 <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3a06:	2701      	movs	r7, #1
    3a08:	e7e8      	b.n	39dc <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    3a0a:	4651      	mov	r1, sl
    3a0c:	4648      	mov	r0, r9
    3a0e:	f7ff fe47 	bl	36a0 <twi_rx_start_transfer>
    3a12:	e7ec      	b.n	39ee <nrfx_twi_xfer+0xaa>
    3a14:	200002f0 	.word	0x200002f0
    3a18:	0bad0005 	.word	0x0bad0005
    3a1c:	00044286 	.word	0x00044286
    3a20:	0bad000b 	.word	0x0bad000b

00003a24 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    3a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    3a26:	4c29      	ldr	r4, [pc, #164]	; (3acc <nrfx_twi_0_irq_handler+0xa8>)
    3a28:	4829      	ldr	r0, [pc, #164]	; (3ad0 <nrfx_twi_0_irq_handler+0xac>)
{
    3a2a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    3a2c:	4621      	mov	r1, r4
    3a2e:	f001 fbf7 	bl	5220 <twi_transfer>
    3a32:	46a4      	mov	ip, r4
    3a34:	b9d8      	cbnz	r0, 3a6e <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
    3a36:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
    3a3a:	6a27      	ldr	r7, [r4, #32]
    3a3c:	b9e6      	cbnz	r6, 3a78 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    3a3e:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    3a40:	1e9a      	subs	r2, r3, #2
    3a42:	2a01      	cmp	r2, #1
    3a44:	d818      	bhi.n	3a78 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    3a46:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3a48:	69a2      	ldr	r2, [r4, #24]
    3a4a:	4291      	cmp	r1, r2
    3a4c:	d114      	bne.n	3a78 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    3a4e:	69e2      	ldr	r2, [r4, #28]
    3a50:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3a52:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3a56:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3a58:	481d      	ldr	r0, [pc, #116]	; (3ad0 <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3a5a:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3a5c:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3a5e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3a62:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3a66:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3a68:	d103      	bne.n	3a72 <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3a6a:	f7ff fe8d 	bl	3788 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    3a6e:	b007      	add	sp, #28
    3a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    3a72:	f7ff fe15 	bl	36a0 <twi_rx_start_transfer>
    3a76:	e7fa      	b.n	3a6e <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
    3a78:	4d16      	ldr	r5, [pc, #88]	; (3ad4 <nrfx_twi_0_irq_handler+0xb0>)
    3a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3a7c:	ac01      	add	r4, sp, #4
    3a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3a80:	682b      	ldr	r3, [r5, #0]
    3a82:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    3a84:	b1f6      	cbz	r6, 3ac4 <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    3a86:	4a12      	ldr	r2, [pc, #72]	; (3ad0 <nrfx_twi_0_irq_handler+0xac>)
    3a88:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3a8c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    3a90:	0798      	lsls	r0, r3, #30
    3a92:	d50e      	bpl.n	3ab2 <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    3a94:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3a96:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    3a9a:	2300      	movs	r3, #0
    3a9c:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    3aa0:	077b      	lsls	r3, r7, #29
    3aa2:	d501      	bpl.n	3aa8 <nrfx_twi_0_irq_handler+0x84>
    3aa4:	2e00      	cmp	r6, #0
    3aa6:	d0e2      	beq.n	3a6e <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
    3aa8:	e9dc 3100 	ldrd	r3, r1, [ip]
    3aac:	4668      	mov	r0, sp
    3aae:	4798      	blx	r3
}
    3ab0:	e7dd      	b.n	3a6e <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    3ab2:	0759      	lsls	r1, r3, #29
    3ab4:	d501      	bpl.n	3aba <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    3ab6:	2302      	movs	r3, #2
    3ab8:	e7ed      	b.n	3a96 <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    3aba:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    3abc:	bf4c      	ite	mi
    3abe:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    3ac0:	2304      	movpl	r3, #4
    3ac2:	e7e8      	b.n	3a96 <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
    3ac4:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    3ac8:	e7e7      	b.n	3a9a <nrfx_twi_0_irq_handler+0x76>
    3aca:	bf00      	nop
    3acc:	200002f0 	.word	0x200002f0
    3ad0:	40003000 	.word	0x40003000
    3ad4:	200002fc 	.word	0x200002fc

00003ad8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    3ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ada:	4b10      	ldr	r3, [pc, #64]	; (3b1c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    3adc:	4f10      	ldr	r7, [pc, #64]	; (3b20 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ade:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3ae2:	3001      	adds	r0, #1
    3ae4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3ae8:	42ae      	cmp	r6, r5
    3aea:	d800      	bhi.n	3aee <z_sys_init_run_level+0x16>
		}
	}
}
    3aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    3aee:	e9d5 3400 	ldrd	r3, r4, [r5]
    3af2:	4620      	mov	r0, r4
    3af4:	4798      	blx	r3
    3af6:	b170      	cbz	r0, 3b16 <z_sys_init_run_level+0x3e>
    3af8:	b16c      	cbz	r4, 3b16 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    3afa:	1be4      	subs	r4, r4, r7
    3afc:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3afe:	0961      	lsrs	r1, r4, #5
    3b00:	4a08      	ldr	r2, [pc, #32]	; (3b24 <z_sys_init_run_level+0x4c>)
    3b02:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3b06:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    3b0a:	2301      	movs	r3, #1
    3b0c:	fa03 f404 	lsl.w	r4, r3, r4
    3b10:	4304      	orrs	r4, r0
    3b12:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3b16:	3508      	adds	r5, #8
    3b18:	e7e6      	b.n	3ae8 <z_sys_init_run_level+0x10>
    3b1a:	bf00      	nop
    3b1c:	000057e0 	.word	0x000057e0
    3b20:	2000004c 	.word	0x2000004c
    3b24:	2000009c 	.word	0x2000009c

00003b28 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    3b28:	4b08      	ldr	r3, [pc, #32]	; (3b4c <z_device_ready+0x24>)
    3b2a:	1ac0      	subs	r0, r0, r3
    3b2c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3b2e:	4b08      	ldr	r3, [pc, #32]	; (3b50 <z_device_ready+0x28>)
    3b30:	0942      	lsrs	r2, r0, #5
    3b32:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3b36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    3b3a:	2301      	movs	r3, #1
    3b3c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    3b40:	4210      	tst	r0, r2
}
    3b42:	bf0c      	ite	eq
    3b44:	4618      	moveq	r0, r3
    3b46:	2000      	movne	r0, #0
    3b48:	4770      	bx	lr
    3b4a:	bf00      	nop
    3b4c:	2000004c 	.word	0x2000004c
    3b50:	2000009c 	.word	0x2000009c

00003b54 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    3b54:	4911      	ldr	r1, [pc, #68]	; (3b9c <z_impl_device_get_binding+0x48>)
{
    3b56:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    3b58:	4c11      	ldr	r4, [pc, #68]	; (3ba0 <z_impl_device_get_binding+0x4c>)
{
    3b5a:	4605      	mov	r5, r0
    3b5c:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    3b5e:	428c      	cmp	r4, r1
    3b60:	d104      	bne.n	3b6c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    3b62:	4c0f      	ldr	r4, [pc, #60]	; (3ba0 <z_impl_device_get_binding+0x4c>)
    3b64:	42b4      	cmp	r4, r6
    3b66:	d10a      	bne.n	3b7e <z_impl_device_get_binding+0x2a>
	return NULL;
    3b68:	2400      	movs	r4, #0
    3b6a:	e014      	b.n	3b96 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    3b6c:	4620      	mov	r0, r4
    3b6e:	f7ff ffdb 	bl	3b28 <z_device_ready>
    3b72:	b110      	cbz	r0, 3b7a <z_impl_device_get_binding+0x26>
    3b74:	6823      	ldr	r3, [r4, #0]
    3b76:	42ab      	cmp	r3, r5
    3b78:	d00d      	beq.n	3b96 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    3b7a:	3410      	adds	r4, #16
    3b7c:	e7ef      	b.n	3b5e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3b7e:	4620      	mov	r0, r4
    3b80:	f7ff ffd2 	bl	3b28 <z_device_ready>
    3b84:	b908      	cbnz	r0, 3b8a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    3b86:	3410      	adds	r4, #16
    3b88:	e7ec      	b.n	3b64 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3b8a:	6821      	ldr	r1, [r4, #0]
    3b8c:	4628      	mov	r0, r5
    3b8e:	f001 f9ee 	bl	4f6e <strcmp>
    3b92:	2800      	cmp	r0, #0
    3b94:	d1f7      	bne.n	3b86 <z_impl_device_get_binding+0x32>
}
    3b96:	4620      	mov	r0, r4
    3b98:	bd70      	pop	{r4, r5, r6, pc}
    3b9a:	bf00      	nop
    3b9c:	2000009c 	.word	0x2000009c
    3ba0:	2000004c 	.word	0x2000004c

00003ba4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    3ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
    3ba6:	4e1c      	ldr	r6, [pc, #112]	; (3c18 <idle+0x74>)
{
    3ba8:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    3baa:	2700      	movs	r7, #0
	__asm__ volatile(
    3bac:	f04f 0220 	mov.w	r2, #32
    3bb0:	f3ef 8311 	mrs	r3, BASEPRI
    3bb4:	f382 8811 	msr	BASEPRI, r2
    3bb8:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    3bbc:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    3bbe:	b188      	cbz	r0, 3be4 <idle+0x40>
			cpu->pending_abort = NULL;
    3bc0:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    3bc2:	f383 8811 	msr	BASEPRI, r3
    3bc6:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
    3bca:	f000 fab9 	bl	4140 <z_thread_single_abort>
	__asm__ volatile(
    3bce:	f04f 0320 	mov.w	r3, #32
    3bd2:	f3ef 8011 	mrs	r0, BASEPRI
    3bd6:	f383 8811 	msr	BASEPRI, r3
    3bda:	f3bf 8f6f 	isb	sy
    3bde:	f001 fbc8 	bl	5372 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
    3be2:	e7e3      	b.n	3bac <idle+0x8>
	__asm__ volatile(
    3be4:	f383 8811 	msr	BASEPRI, r3
    3be8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3bec:	f04f 0220 	mov.w	r2, #32
    3bf0:	f3ef 8311 	mrs	r3, BASEPRI
    3bf4:	f382 8811 	msr	BASEPRI, r2
    3bf8:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3bfc:	f001 fc85 	bl	550a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3c00:	2101      	movs	r1, #1
    3c02:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    3c04:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3c06:	bfd8      	it	le
    3c08:	4608      	movle	r0, r1
    3c0a:	f001 fc8e 	bl	552a <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3c0e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    3c10:	f7fe fc2c 	bl	246c <arch_cpu_idle>
}
    3c14:	e7ca      	b.n	3bac <idle+0x8>
    3c16:	bf00      	nop
    3c18:	2000032c 	.word	0x2000032c

00003c1c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3c1c:	4802      	ldr	r0, [pc, #8]	; (3c28 <z_bss_zero+0xc>)
    3c1e:	4a03      	ldr	r2, [pc, #12]	; (3c2c <z_bss_zero+0x10>)
    3c20:	2100      	movs	r1, #0
    3c22:	1a12      	subs	r2, r2, r0
    3c24:	f001 b9da 	b.w	4fdc <memset>
    3c28:	200000a0 	.word	0x200000a0
    3c2c:	20000784 	.word	0x20000784

00003c30 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3c30:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3c32:	4806      	ldr	r0, [pc, #24]	; (3c4c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3c34:	4a06      	ldr	r2, [pc, #24]	; (3c50 <z_data_copy+0x20>)
    3c36:	4907      	ldr	r1, [pc, #28]	; (3c54 <z_data_copy+0x24>)
    3c38:	1a12      	subs	r2, r2, r0
    3c3a:	f001 f9a4 	bl	4f86 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3c42:	4a05      	ldr	r2, [pc, #20]	; (3c58 <z_data_copy+0x28>)
    3c44:	4905      	ldr	r1, [pc, #20]	; (3c5c <z_data_copy+0x2c>)
    3c46:	4806      	ldr	r0, [pc, #24]	; (3c60 <z_data_copy+0x30>)
    3c48:	f001 b99d 	b.w	4f86 <memcpy>
    3c4c:	20000000 	.word	0x20000000
    3c50:	200000a0 	.word	0x200000a0
    3c54:	000058fc 	.word	0x000058fc
    3c58:	00000000 	.word	0x00000000
    3c5c:	000058fc 	.word	0x000058fc
    3c60:	20000000 	.word	0x20000000

00003c64 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3c64:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3c66:	4b0c      	ldr	r3, [pc, #48]	; (3c98 <bg_thread_main+0x34>)
    3c68:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3c6a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3c6c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3c6e:	f7ff ff33 	bl	3ad8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3c72:	4a0a      	ldr	r2, [pc, #40]	; (3c9c <bg_thread_main+0x38>)
    3c74:	490a      	ldr	r1, [pc, #40]	; (3ca0 <bg_thread_main+0x3c>)
    3c76:	480b      	ldr	r0, [pc, #44]	; (3ca4 <bg_thread_main+0x40>)
    3c78:	f000 fe72 	bl	4960 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3c7c:	2003      	movs	r0, #3
    3c7e:	f7ff ff2b 	bl	3ad8 <z_sys_init_run_level>

	z_init_static_threads();
    3c82:	f000 fc5d 	bl	4540 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3c86:	f7fd f8b5 	bl	df4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3c8a:	4a07      	ldr	r2, [pc, #28]	; (3ca8 <bg_thread_main+0x44>)
    3c8c:	7b13      	ldrb	r3, [r2, #12]
    3c8e:	f023 0301 	bic.w	r3, r3, #1
    3c92:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3c94:	bd08      	pop	{r3, pc}
    3c96:	bf00      	nop
    3c98:	20000783 	.word	0x20000783
    3c9c:	000058f3 	.word	0x000058f3
    3ca0:	000058ae 	.word	0x000058ae
    3ca4:	000058cd 	.word	0x000058cd
    3ca8:	20000120 	.word	0x20000120

00003cac <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3cac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3cb0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3da8 <z_cstart+0xfc>
    3cb4:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3cb6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3cba:	4d33      	ldr	r5, [pc, #204]	; (3d88 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
    3cbc:	4e33      	ldr	r6, [pc, #204]	; (3d8c <z_cstart+0xe0>)
    3cbe:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cc0:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3dac <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
    3cc4:	4f32      	ldr	r7, [pc, #200]	; (3d90 <z_cstart+0xe4>)
    3cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cca:	2400      	movs	r4, #0
    3ccc:	616b      	str	r3, [r5, #20]
    3cce:	23e0      	movs	r3, #224	; 0xe0
    3cd0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3cd4:	77ec      	strb	r4, [r5, #31]
    3cd6:	762c      	strb	r4, [r5, #24]
    3cd8:	766c      	strb	r4, [r5, #25]
    3cda:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3cdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3cde:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ce2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3ce4:	f7fe fd06 	bl	26f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3ce8:	f7fe fbba 	bl	2460 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cf0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3cf2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3cf4:	4d27      	ldr	r5, [pc, #156]	; (3d94 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3cf6:	f240 1301 	movw	r3, #257	; 0x101
    3cfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3cfe:	ab06      	add	r3, sp, #24
    3d00:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3d02:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3d04:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    3d08:	f7ff fee6 	bl	3ad8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3d0c:	2001      	movs	r0, #1
    3d0e:	f7ff fee3 	bl	3ad8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3d12:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    3d16:	f000 fb17 	bl	4348 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3d1a:	4b1f      	ldr	r3, [pc, #124]	; (3d98 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    3d1c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3d1e:	491f      	ldr	r1, [pc, #124]	; (3d9c <z_cstart+0xf0>)
    3d20:	9305      	str	r3, [sp, #20]
    3d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3d26:	4653      	mov	r3, sl
    3d28:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3d2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3d30:	9400      	str	r4, [sp, #0]
    3d32:	4630      	mov	r0, r6
    3d34:	f000 fbd2 	bl	44dc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d38:	7b73      	ldrb	r3, [r6, #13]
    3d3a:	4680      	mov	r8, r0
    3d3c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3d40:	4630      	mov	r0, r6
    3d42:	7373      	strb	r3, [r6, #13]
    3d44:	f001 fb41 	bl	53ca <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3d48:	230f      	movs	r3, #15
    3d4a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3d4e:	4914      	ldr	r1, [pc, #80]	; (3da0 <z_cstart+0xf4>)
    3d50:	4b14      	ldr	r3, [pc, #80]	; (3da4 <z_cstart+0xf8>)
    3d52:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3d56:	e9cd b404 	strd	fp, r4, [sp, #16]
    3d5a:	e9cd 5400 	strd	r5, r4, [sp]
    3d5e:	4638      	mov	r0, r7
    3d60:	f000 fbbc 	bl	44dc <z_setup_new_thread>
    3d64:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3d66:	60ef      	str	r7, [r5, #12]
    3d68:	f023 0304 	bic.w	r3, r3, #4
    3d6c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d6e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    3d72:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    3d76:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    3d78:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3d7c:	4652      	mov	r2, sl
    3d7e:	4641      	mov	r1, r8
    3d80:	4630      	mov	r0, r6
    3d82:	f7fe faf7 	bl	2374 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3d86:	bf00      	nop
    3d88:	e000ed00 	.word	0xe000ed00
    3d8c:	20000120 	.word	0x20000120
    3d90:	200000a0 	.word	0x200000a0
    3d94:	2000032c 	.word	0x2000032c
    3d98:	000058f4 	.word	0x000058f4
    3d9c:	200007a0 	.word	0x200007a0
    3da0:	20000bc0 	.word	0x20000bc0
    3da4:	00003ba5 	.word	0x00003ba5
    3da8:	20001540 	.word	0x20001540
    3dac:	00003c65 	.word	0x00003c65

00003db0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3db0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3db2:	4c08      	ldr	r4, [pc, #32]	; (3dd4 <z_reset_time_slice+0x24>)
    3db4:	6823      	ldr	r3, [r4, #0]
    3db6:	b15b      	cbz	r3, 3dd0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3db8:	f7fe fa0c 	bl	21d4 <z_clock_elapsed>
    3dbc:	4603      	mov	r3, r0
    3dbe:	6820      	ldr	r0, [r4, #0]
    3dc0:	4a05      	ldr	r2, [pc, #20]	; (3dd8 <z_reset_time_slice+0x28>)
    3dc2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    3dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3dc8:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    3dca:	2100      	movs	r1, #0
    3dcc:	f001 bbad 	b.w	552a <z_set_timeout_expiry>
}
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	bf00      	nop
    3dd4:	20000368 	.word	0x20000368
    3dd8:	2000032c 	.word	0x2000032c

00003ddc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dde:	4605      	mov	r5, r0
    3de0:	460c      	mov	r4, r1
    3de2:	f04f 0320 	mov.w	r3, #32
    3de6:	f3ef 8611 	mrs	r6, BASEPRI
    3dea:	f383 8811 	msr	BASEPRI, r3
    3dee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3df2:	4b0d      	ldr	r3, [pc, #52]	; (3e28 <k_sched_time_slice_set+0x4c>)
    3df4:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3df6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3dfa:	f240 30e7 	movw	r0, #999	; 0x3e7
    3dfe:	2100      	movs	r1, #0
    3e00:	615a      	str	r2, [r3, #20]
    3e02:	fbe7 0105 	umlal	r0, r1, r7, r5
    3e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e0a:	2300      	movs	r3, #0
    3e0c:	f7fc fd86 	bl	91c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    3e10:	4b06      	ldr	r3, [pc, #24]	; (3e2c <k_sched_time_slice_set+0x50>)
    3e12:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3e14:	4b06      	ldr	r3, [pc, #24]	; (3e30 <k_sched_time_slice_set+0x54>)
    3e16:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    3e18:	f7ff ffca 	bl	3db0 <z_reset_time_slice>
	__asm__ volatile(
    3e1c:	f386 8811 	msr	BASEPRI, r6
    3e20:	f3bf 8f6f 	isb	sy
	}
}
    3e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e26:	bf00      	nop
    3e28:	2000032c 	.word	0x2000032c
    3e2c:	20000368 	.word	0x20000368
    3e30:	20000364 	.word	0x20000364

00003e34 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e34:	b949      	cbnz	r1, 3e4a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e36:	f3ef 8005 	mrs	r0, IPSR
    3e3a:	b930      	cbnz	r0, 3e4a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    3e3c:	4b05      	ldr	r3, [pc, #20]	; (3e54 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e40:	689b      	ldr	r3, [r3, #8]
    3e42:	429a      	cmp	r2, r3
    3e44:	d001      	beq.n	3e4a <z_reschedule+0x16>
	ret = arch_swap(key);
    3e46:	f7fe ba0f 	b.w	2268 <arch_swap>
    3e4a:	f381 8811 	msr	BASEPRI, r1
    3e4e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3e52:	4770      	bx	lr
    3e54:	2000032c 	.word	0x2000032c

00003e58 <k_sched_lock>:
	__asm__ volatile(
    3e58:	f04f 0320 	mov.w	r3, #32
    3e5c:	f3ef 8111 	mrs	r1, BASEPRI
    3e60:	f383 8811 	msr	BASEPRI, r3
    3e64:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3e68:	4b04      	ldr	r3, [pc, #16]	; (3e7c <k_sched_lock+0x24>)
    3e6a:	689a      	ldr	r2, [r3, #8]
    3e6c:	7bd3      	ldrb	r3, [r2, #15]
    3e6e:	3b01      	subs	r3, #1
    3e70:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3e72:	f381 8811 	msr	BASEPRI, r1
    3e76:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3e7a:	4770      	bx	lr
    3e7c:	2000032c 	.word	0x2000032c

00003e80 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3e80:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <z_priq_dumb_remove+0x28>)
    3e82:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    3e86:	4282      	cmp	r2, r0
    3e88:	d105      	bne.n	3e96 <z_priq_dumb_remove+0x16>
    3e8a:	689b      	ldr	r3, [r3, #8]
    3e8c:	428b      	cmp	r3, r1
    3e8e:	d102      	bne.n	3e96 <z_priq_dumb_remove+0x16>
    3e90:	7b4b      	ldrb	r3, [r1, #13]
    3e92:	06db      	lsls	r3, r3, #27
    3e94:	d106      	bne.n	3ea4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    3e96:	e9d1 3200 	ldrd	r3, r2, [r1]
    3e9a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3e9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3e9e:	2300      	movs	r3, #0
	node->prev = NULL;
    3ea0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	2000032c 	.word	0x2000032c

00003eac <update_cache>:
{
    3eac:	b538      	push	{r3, r4, r5, lr}
    3eae:	4c12      	ldr	r4, [pc, #72]	; (3ef8 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    3eb0:	6923      	ldr	r3, [r4, #16]
    3eb2:	68a2      	ldr	r2, [r4, #8]
{
    3eb4:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    3eb6:	b10b      	cbz	r3, 3ebc <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    3eb8:	68e5      	ldr	r5, [r4, #12]
    3eba:	e00c      	b.n	3ed6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3ebc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3ec0:	f001 fa79 	bl	53b6 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3ec4:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3ec6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3ec8:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    3eca:	bf44      	itt	mi
    3ecc:	f043 0308 	orrmi.w	r3, r3, #8
    3ed0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    3ed2:	2d00      	cmp	r5, #0
    3ed4:	d0f0      	beq.n	3eb8 <update_cache+0xc>
	if (preempt_ok != 0) {
    3ed6:	b949      	cbnz	r1, 3eec <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    3ed8:	7b53      	ldrb	r3, [r2, #13]
    3eda:	06db      	lsls	r3, r3, #27
    3edc:	d106      	bne.n	3eec <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3ede:	69ab      	ldr	r3, [r5, #24]
    3ee0:	b923      	cbnz	r3, 3eec <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    3ee2:	89d3      	ldrh	r3, [r2, #14]
    3ee4:	2b7f      	cmp	r3, #127	; 0x7f
    3ee6:	d901      	bls.n	3eec <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3ee8:	62a2      	str	r2, [r4, #40]	; 0x28
}
    3eea:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3eec:	4295      	cmp	r5, r2
    3eee:	d001      	beq.n	3ef4 <update_cache+0x48>
			z_reset_time_slice();
    3ef0:	f7ff ff5e 	bl	3db0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3ef4:	62a5      	str	r5, [r4, #40]	; 0x28
}
    3ef6:	e7f8      	b.n	3eea <update_cache+0x3e>
    3ef8:	2000032c 	.word	0x2000032c

00003efc <k_sched_unlock>:
{
    3efc:	b510      	push	{r4, lr}
	__asm__ volatile(
    3efe:	f04f 0320 	mov.w	r3, #32
    3f02:	f3ef 8411 	mrs	r4, BASEPRI
    3f06:	f383 8811 	msr	BASEPRI, r3
    3f0a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3f0e:	4b08      	ldr	r3, [pc, #32]	; (3f30 <k_sched_unlock+0x34>)
    3f10:	689a      	ldr	r2, [r3, #8]
    3f12:	7bd3      	ldrb	r3, [r2, #15]
    3f14:	3301      	adds	r3, #1
    3f16:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3f18:	2000      	movs	r0, #0
    3f1a:	f7ff ffc7 	bl	3eac <update_cache>
	__asm__ volatile(
    3f1e:	f384 8811 	msr	BASEPRI, r4
    3f22:	f3bf 8f6f 	isb	sy
}
    3f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3f2a:	f001 ba2e 	b.w	538a <z_reschedule_unlocked>
    3f2e:	bf00      	nop
    3f30:	2000032c 	.word	0x2000032c

00003f34 <ready_thread>:
{
    3f34:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3f36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    3f3a:	7b43      	ldrb	r3, [r0, #13]
    3f3c:	2a00      	cmp	r2, #0
    3f3e:	db2c      	blt.n	3f9a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3f40:	06db      	lsls	r3, r3, #27
    3f42:	d12a      	bne.n	3f9a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    3f44:	6983      	ldr	r3, [r0, #24]
    3f46:	bb43      	cbnz	r3, 3f9a <ready_thread+0x66>
	return list->head == list;
    3f48:	4a15      	ldr	r2, [pc, #84]	; (3fa0 <ready_thread+0x6c>)
    3f4a:	4611      	mov	r1, r2
    3f4c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f50:	428c      	cmp	r4, r1
    3f52:	bf18      	it	ne
    3f54:	4623      	movne	r3, r4
    3f56:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f58:	6b14      	ldr	r4, [r2, #48]	; 0x30
    3f5a:	bf38      	it	cc
    3f5c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f5e:	b1b3      	cbz	r3, 3f8e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    3f60:	f990 600e 	ldrsb.w	r6, [r0, #14]
    3f64:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3f68:	42ae      	cmp	r6, r5
    3f6a:	db03      	blt.n	3f74 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    3f6c:	42a3      	cmp	r3, r4
    3f6e:	d00e      	beq.n	3f8e <ready_thread+0x5a>
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	e7f4      	b.n	3f5e <ready_thread+0x2a>
	node->prev = successor->prev;
    3f74:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3f76:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3f7a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3f7c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3f7e:	7b43      	ldrb	r3, [r0, #13]
    3f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3f84:	7343      	strb	r3, [r0, #13]
}
    3f86:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3f88:	2000      	movs	r0, #0
    3f8a:	f7ff bf8f 	b.w	3eac <update_cache>
	node->prev = list->tail;
    3f8e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    3f92:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f94:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3f96:	6310      	str	r0, [r2, #48]	; 0x30
}
    3f98:	e7f1      	b.n	3f7e <ready_thread+0x4a>
}
    3f9a:	bc70      	pop	{r4, r5, r6}
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop
    3fa0:	2000032c 	.word	0x2000032c

00003fa4 <z_sched_start>:
{
    3fa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fa6:	f04f 0220 	mov.w	r2, #32
    3faa:	f3ef 8411 	mrs	r4, BASEPRI
    3fae:	f382 8811 	msr	BASEPRI, r2
    3fb2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    3fb6:	7b42      	ldrb	r2, [r0, #13]
    3fb8:	0751      	lsls	r1, r2, #29
    3fba:	d404      	bmi.n	3fc6 <z_sched_start+0x22>
	__asm__ volatile(
    3fbc:	f384 8811 	msr	BASEPRI, r4
    3fc0:	f3bf 8f6f 	isb	sy
}
    3fc4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3fc6:	f022 0204 	bic.w	r2, r2, #4
    3fca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3fcc:	f7ff ffb2 	bl	3f34 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3fd0:	4621      	mov	r1, r4
    3fd2:	4802      	ldr	r0, [pc, #8]	; (3fdc <z_sched_start+0x38>)
}
    3fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3fd8:	f7ff bf2c 	b.w	3e34 <z_reschedule>
    3fdc:	20000784 	.word	0x20000784

00003fe0 <move_thread_to_end_of_prio_q>:
{
    3fe0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3fe2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3fe6:	2b00      	cmp	r3, #0
{
    3fe8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3fea:	da02      	bge.n	3ff2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    3fec:	4817      	ldr	r0, [pc, #92]	; (404c <move_thread_to_end_of_prio_q+0x6c>)
    3fee:	f7ff ff47 	bl	3e80 <z_priq_dumb_remove>
	return list->head == list;
    3ff2:	4a17      	ldr	r2, [pc, #92]	; (4050 <move_thread_to_end_of_prio_q+0x70>)
    3ff4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ff6:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    3ff8:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ffc:	4283      	cmp	r3, r0
    3ffe:	bf08      	it	eq
    4000:	2300      	moveq	r3, #0
    4002:	2b00      	cmp	r3, #0
    4004:	bf38      	it	cc
    4006:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4008:	b1d3      	cbz	r3, 4040 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    400a:	f991 600e 	ldrsb.w	r6, [r1, #14]
    400e:	f993 500e 	ldrsb.w	r5, [r3, #14]
    4012:	42ae      	cmp	r6, r5
    4014:	db03      	blt.n	401e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    4016:	42a3      	cmp	r3, r4
    4018:	d012      	beq.n	4040 <move_thread_to_end_of_prio_q+0x60>
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	e7f4      	b.n	4008 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    401e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    4020:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    4024:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4026:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4028:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    402a:	6890      	ldr	r0, [r2, #8]
    402c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4030:	734b      	strb	r3, [r1, #13]
    4032:	1a43      	subs	r3, r0, r1
    4034:	4258      	negs	r0, r3
}
    4036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    403a:	4158      	adcs	r0, r3
    403c:	f7ff bf36 	b.w	3eac <update_cache>
	node->prev = list->tail;
    4040:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    4044:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4046:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4048:	6311      	str	r1, [r2, #48]	; 0x30
}
    404a:	e7ed      	b.n	4028 <move_thread_to_end_of_prio_q+0x48>
    404c:	20000358 	.word	0x20000358
    4050:	2000032c 	.word	0x2000032c

00004054 <z_time_slice>:
{
    4054:	b570      	push	{r4, r5, r6, lr}
    4056:	4601      	mov	r1, r0
	__asm__ volatile(
    4058:	f04f 0320 	mov.w	r3, #32
    405c:	f3ef 8411 	mrs	r4, BASEPRI
    4060:	f383 8811 	msr	BASEPRI, r3
    4064:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4068:	4b16      	ldr	r3, [pc, #88]	; (40c4 <z_time_slice+0x70>)
    406a:	4a17      	ldr	r2, [pc, #92]	; (40c8 <z_time_slice+0x74>)
    406c:	6898      	ldr	r0, [r3, #8]
    406e:	6815      	ldr	r5, [r2, #0]
    4070:	42a8      	cmp	r0, r5
    4072:	461d      	mov	r5, r3
    4074:	d106      	bne.n	4084 <z_time_slice+0x30>
			z_reset_time_slice();
    4076:	f7ff fe9b 	bl	3db0 <z_reset_time_slice>
	__asm__ volatile(
    407a:	f384 8811 	msr	BASEPRI, r4
    407e:	f3bf 8f6f 	isb	sy
}
    4082:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4084:	2600      	movs	r6, #0
    4086:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4088:	4a10      	ldr	r2, [pc, #64]	; (40cc <z_time_slice+0x78>)
    408a:	6812      	ldr	r2, [r2, #0]
    408c:	b1ba      	cbz	r2, 40be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    408e:	89c2      	ldrh	r2, [r0, #14]
    4090:	2a7f      	cmp	r2, #127	; 0x7f
    4092:	d814      	bhi.n	40be <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4094:	7b42      	ldrb	r2, [r0, #13]
    4096:	06d2      	lsls	r2, r2, #27
    4098:	d111      	bne.n	40be <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    409a:	4a0d      	ldr	r2, [pc, #52]	; (40d0 <z_time_slice+0x7c>)
    409c:	f990 600e 	ldrsb.w	r6, [r0, #14]
    40a0:	6812      	ldr	r2, [r2, #0]
    40a2:	4296      	cmp	r6, r2
    40a4:	db0b      	blt.n	40be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    40a6:	4a0b      	ldr	r2, [pc, #44]	; (40d4 <z_time_slice+0x80>)
    40a8:	4290      	cmp	r0, r2
    40aa:	d008      	beq.n	40be <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    40ac:	695a      	ldr	r2, [r3, #20]
    40ae:	428a      	cmp	r2, r1
    40b0:	dc02      	bgt.n	40b8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    40b2:	f7ff ff95 	bl	3fe0 <move_thread_to_end_of_prio_q>
    40b6:	e7de      	b.n	4076 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    40b8:	1a52      	subs	r2, r2, r1
    40ba:	615a      	str	r2, [r3, #20]
    40bc:	e7dd      	b.n	407a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    40be:	2300      	movs	r3, #0
    40c0:	616b      	str	r3, [r5, #20]
    40c2:	e7da      	b.n	407a <z_time_slice+0x26>
    40c4:	2000032c 	.word	0x2000032c
    40c8:	20000360 	.word	0x20000360
    40cc:	20000368 	.word	0x20000368
    40d0:	20000364 	.word	0x20000364
    40d4:	200000a0 	.word	0x200000a0

000040d8 <z_impl_k_thread_suspend>:
{
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    40dc:	3018      	adds	r0, #24
    40de:	f001 f9fe 	bl	54de <z_abort_timeout>
	__asm__ volatile(
    40e2:	f04f 0320 	mov.w	r3, #32
    40e6:	f3ef 8611 	mrs	r6, BASEPRI
    40ea:	f383 8811 	msr	BASEPRI, r3
    40ee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    40f2:	f994 300d 	ldrsb.w	r3, [r4, #13]
    40f6:	2b00      	cmp	r3, #0
    40f8:	da07      	bge.n	410a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    40fa:	480f      	ldr	r0, [pc, #60]	; (4138 <z_impl_k_thread_suspend+0x60>)
    40fc:	4621      	mov	r1, r4
    40fe:	f7ff febf 	bl	3e80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4102:	7b63      	ldrb	r3, [r4, #13]
    4104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4108:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    410a:	4d0c      	ldr	r5, [pc, #48]	; (413c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    410c:	7b63      	ldrb	r3, [r4, #13]
    410e:	68a8      	ldr	r0, [r5, #8]
    4110:	f043 0310 	orr.w	r3, r3, #16
    4114:	7363      	strb	r3, [r4, #13]
    4116:	1b03      	subs	r3, r0, r4
    4118:	4258      	negs	r0, r3
    411a:	4158      	adcs	r0, r3
    411c:	f7ff fec6 	bl	3eac <update_cache>
	__asm__ volatile(
    4120:	f386 8811 	msr	BASEPRI, r6
    4124:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4128:	68ab      	ldr	r3, [r5, #8]
    412a:	42a3      	cmp	r3, r4
    412c:	d103      	bne.n	4136 <z_impl_k_thread_suspend+0x5e>
}
    412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4132:	f001 b92a 	b.w	538a <z_reschedule_unlocked>
}
    4136:	bd70      	pop	{r4, r5, r6, pc}
    4138:	20000358 	.word	0x20000358
    413c:	2000032c 	.word	0x2000032c

00004140 <z_thread_single_abort>:
{
    4140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4144:	4604      	mov	r4, r0
	__asm__ volatile(
    4146:	f04f 0320 	mov.w	r3, #32
    414a:	f3ef 8211 	mrs	r2, BASEPRI
    414e:	f383 8811 	msr	BASEPRI, r3
    4152:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    4156:	7b43      	ldrb	r3, [r0, #13]
    4158:	f013 0f28 	tst.w	r3, #40	; 0x28
    415c:	d005      	beq.n	416a <z_thread_single_abort+0x2a>
	__asm__ volatile(
    415e:	f382 8811 	msr	BASEPRI, r2
    4162:	f3bf 8f6f 	isb	sy
}
    4166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    416a:	f043 0320 	orr.w	r3, r3, #32
    416e:	7343      	strb	r3, [r0, #13]
    4170:	f382 8811 	msr	BASEPRI, r2
    4174:	f3bf 8f6f 	isb	sy
    4178:	3018      	adds	r0, #24
    417a:	f001 f9b0 	bl	54de <z_abort_timeout>
	__asm__ volatile(
    417e:	f04f 0320 	mov.w	r3, #32
    4182:	f3ef 8611 	mrs	r6, BASEPRI
    4186:	f383 8811 	msr	BASEPRI, r3
    418a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    418e:	7b63      	ldrb	r3, [r4, #13]
    4190:	06d8      	lsls	r0, r3, #27
    4192:	d116      	bne.n	41c2 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    4194:	69a2      	ldr	r2, [r4, #24]
    4196:	b9a2      	cbnz	r2, 41c2 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    4198:	0619      	lsls	r1, r3, #24
    419a:	d507      	bpl.n	41ac <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    419c:	4826      	ldr	r0, [pc, #152]	; (4238 <z_thread_single_abort+0xf8>)
    419e:	4621      	mov	r1, r4
    41a0:	f7ff fe6e 	bl	3e80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    41a4:	7b63      	ldrb	r3, [r4, #13]
    41a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41aa:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    41ac:	4b23      	ldr	r3, [pc, #140]	; (423c <z_thread_single_abort+0xfc>)
    41ae:	6898      	ldr	r0, [r3, #8]
    41b0:	1b02      	subs	r2, r0, r4
    41b2:	4250      	negs	r0, r2
    41b4:	4150      	adcs	r0, r2
    41b6:	f7ff fe79 	bl	3eac <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41ba:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    41be:	2700      	movs	r7, #0
    41c0:	e01d      	b.n	41fe <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    41c2:	079b      	lsls	r3, r3, #30
    41c4:	d5f9      	bpl.n	41ba <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    41c6:	68a0      	ldr	r0, [r4, #8]
    41c8:	4621      	mov	r1, r4
    41ca:	f7ff fe59 	bl	3e80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    41ce:	7b63      	ldrb	r3, [r4, #13]
    41d0:	f023 0302 	bic.w	r3, r3, #2
    41d4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    41d6:	2300      	movs	r3, #0
    41d8:	60a3      	str	r3, [r4, #8]
    41da:	e7ee      	b.n	41ba <z_thread_single_abort+0x7a>
    41dc:	f105 0018 	add.w	r0, r5, #24
    41e0:	f001 f97d 	bl	54de <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    41e4:	68a8      	ldr	r0, [r5, #8]
    41e6:	4629      	mov	r1, r5
    41e8:	f7ff fe4a 	bl	3e80 <z_priq_dumb_remove>
    41ec:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    41ee:	60af      	str	r7, [r5, #8]
    41f0:	f023 0302 	bic.w	r3, r3, #2
    41f4:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    41f6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    41f8:	4628      	mov	r0, r5
    41fa:	f7ff fe9b 	bl	3f34 <ready_thread>
	return list->head == list;
    41fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4200:	4545      	cmp	r5, r8
    4202:	d001      	beq.n	4208 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4204:	2d00      	cmp	r5, #0
    4206:	d1e9      	bne.n	41dc <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    4208:	4b0c      	ldr	r3, [pc, #48]	; (423c <z_thread_single_abort+0xfc>)
    420a:	689a      	ldr	r2, [r3, #8]
    420c:	4b0c      	ldr	r3, [pc, #48]	; (4240 <z_thread_single_abort+0x100>)
    420e:	429a      	cmp	r2, r3
    4210:	d102      	bne.n	4218 <z_thread_single_abort+0xd8>
			update_cache(1);
    4212:	2001      	movs	r0, #1
    4214:	f7ff fe4a 	bl	3eac <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    4218:	7b63      	ldrb	r3, [r4, #13]
    421a:	f043 0308 	orr.w	r3, r3, #8
    421e:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    4220:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    4222:	f386 8811 	msr	BASEPRI, r6
    4226:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    422a:	2b00      	cmp	r3, #0
    422c:	d09b      	beq.n	4166 <z_thread_single_abort+0x26>
		fn_abort(thread);
    422e:	4620      	mov	r0, r4
}
    4230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    4234:	4718      	bx	r3
    4236:	bf00      	nop
    4238:	20000358 	.word	0x20000358
    423c:	2000032c 	.word	0x2000032c
    4240:	200000a0 	.word	0x200000a0

00004244 <unready_thread>:
{
    4244:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4246:	f990 300d 	ldrsb.w	r3, [r0, #13]
    424a:	2b00      	cmp	r3, #0
{
    424c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    424e:	da06      	bge.n	425e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4250:	4807      	ldr	r0, [pc, #28]	; (4270 <unready_thread+0x2c>)
    4252:	f7ff fe15 	bl	3e80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4256:	7b4b      	ldrb	r3, [r1, #13]
    4258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    425c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    425e:	4b05      	ldr	r3, [pc, #20]	; (4274 <unready_thread+0x30>)
    4260:	6898      	ldr	r0, [r3, #8]
    4262:	1a43      	subs	r3, r0, r1
    4264:	4258      	negs	r0, r3
    4266:	4158      	adcs	r0, r3
}
    4268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    426c:	f7ff be1e 	b.w	3eac <update_cache>
    4270:	20000358 	.word	0x20000358
    4274:	2000032c 	.word	0x2000032c

00004278 <pend>:
{
    4278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    427c:	4606      	mov	r6, r0
    427e:	4614      	mov	r4, r2
    4280:	461d      	mov	r5, r3
	__asm__ volatile(
    4282:	f04f 0320 	mov.w	r3, #32
    4286:	f3ef 8711 	mrs	r7, BASEPRI
    428a:	f383 8811 	msr	BASEPRI, r3
    428e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4292:	f001 f8ca 	bl	542a <add_to_waitq_locked>
	__asm__ volatile(
    4296:	f387 8811 	msr	BASEPRI, r7
    429a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    429e:	1c6b      	adds	r3, r5, #1
    42a0:	bf08      	it	eq
    42a2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    42a6:	d008      	beq.n	42ba <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    42a8:	4622      	mov	r2, r4
    42aa:	462b      	mov	r3, r5
    42ac:	f106 0018 	add.w	r0, r6, #24
    42b0:	4903      	ldr	r1, [pc, #12]	; (42c0 <pend+0x48>)
}
    42b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42b6:	f000 ba05 	b.w	46c4 <z_add_timeout>
    42ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42be:	bf00      	nop
    42c0:	000053eb 	.word	0x000053eb

000042c4 <z_pend_curr>:
{
    42c4:	b510      	push	{r4, lr}
	pending_current = _current;
    42c6:	4b07      	ldr	r3, [pc, #28]	; (42e4 <z_pend_curr+0x20>)
    42c8:	6898      	ldr	r0, [r3, #8]
    42ca:	4b07      	ldr	r3, [pc, #28]	; (42e8 <z_pend_curr+0x24>)
{
    42cc:	460c      	mov	r4, r1
	pending_current = _current;
    42ce:	6018      	str	r0, [r3, #0]
{
    42d0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    42d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    42d6:	f7ff ffcf 	bl	4278 <pend>
    42da:	4620      	mov	r0, r4
}
    42dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e0:	f7fd bfc2 	b.w	2268 <arch_swap>
    42e4:	2000032c 	.word	0x2000032c
    42e8:	20000360 	.word	0x20000360

000042ec <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ee:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    42f0:	f001 f935 	bl	555e <z_tick_get_32>
    42f4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    42f6:	f04f 0320 	mov.w	r3, #32
    42fa:	f3ef 8711 	mrs	r7, BASEPRI
    42fe:	f383 8811 	msr	BASEPRI, r3
    4302:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    4306:	4e0d      	ldr	r6, [pc, #52]	; (433c <z_tick_sleep.part.0+0x50>)
    4308:	4b0d      	ldr	r3, [pc, #52]	; (4340 <z_tick_sleep.part.0+0x54>)
    430a:	68b0      	ldr	r0, [r6, #8]
    430c:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    430e:	f7ff ff99 	bl	4244 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4312:	68b0      	ldr	r0, [r6, #8]
    4314:	490b      	ldr	r1, [pc, #44]	; (4344 <z_tick_sleep.part.0+0x58>)
    4316:	462a      	mov	r2, r5
    4318:	17eb      	asrs	r3, r5, #31
    431a:	3018      	adds	r0, #24
    431c:	f000 f9d2 	bl	46c4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4320:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4322:	7b53      	ldrb	r3, [r2, #13]
    4324:	f043 0310 	orr.w	r3, r3, #16
    4328:	7353      	strb	r3, [r2, #13]
    432a:	4638      	mov	r0, r7
    432c:	f7fd ff9c 	bl	2268 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    4330:	f001 f915 	bl	555e <z_tick_get_32>
    4334:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    4336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    433c:	2000032c 	.word	0x2000032c
    4340:	20000360 	.word	0x20000360
    4344:	000053eb 	.word	0x000053eb

00004348 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4348:	4b04      	ldr	r3, [pc, #16]	; (435c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    434a:	2100      	movs	r1, #0
    434c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    4350:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    4354:	4608      	mov	r0, r1
    4356:	f7ff bd41 	b.w	3ddc <k_sched_time_slice_set>
    435a:	bf00      	nop
    435c:	2000032c 	.word	0x2000032c

00004360 <z_impl_k_yield>:
{
    4360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    4362:	4c24      	ldr	r4, [pc, #144]	; (43f4 <z_impl_k_yield+0x94>)
    4364:	4b24      	ldr	r3, [pc, #144]	; (43f8 <z_impl_k_yield+0x98>)
    4366:	68a2      	ldr	r2, [r4, #8]
    4368:	429a      	cmp	r2, r3
    436a:	d030      	beq.n	43ce <z_impl_k_yield+0x6e>
    436c:	f04f 0320 	mov.w	r3, #32
    4370:	f3ef 8511 	mrs	r5, BASEPRI
    4374:	f383 8811 	msr	BASEPRI, r3
    4378:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    437c:	68a1      	ldr	r1, [r4, #8]
    437e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4382:	f7ff fd7d 	bl	3e80 <z_priq_dumb_remove>
	return list->head == list;
    4386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4388:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    438a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    438c:	4283      	cmp	r3, r0
    438e:	bf08      	it	eq
    4390:	2300      	moveq	r3, #0
    4392:	2b00      	cmp	r3, #0
    4394:	bf38      	it	cc
    4396:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4398:	b32b      	cbz	r3, 43e6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    439a:	f992 700e 	ldrsb.w	r7, [r2, #14]
    439e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    43a2:	42b7      	cmp	r7, r6
    43a4:	db03      	blt.n	43ae <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    43a6:	428b      	cmp	r3, r1
    43a8:	d01d      	beq.n	43e6 <z_impl_k_yield+0x86>
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	e7f4      	b.n	4398 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    43ae:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    43b0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    43b4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    43b6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    43b8:	7b53      	ldrb	r3, [r2, #13]
    43ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43be:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    43c0:	2001      	movs	r0, #1
    43c2:	f7ff fd73 	bl	3eac <update_cache>
	__asm__ volatile(
    43c6:	f385 8811 	msr	BASEPRI, r5
    43ca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    43ce:	f04f 0320 	mov.w	r3, #32
    43d2:	f3ef 8011 	mrs	r0, BASEPRI
    43d6:	f383 8811 	msr	BASEPRI, r3
    43da:	f3bf 8f6f 	isb	sy
}
    43de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    43e2:	f7fd bf41 	b.w	2268 <arch_swap>
	node->prev = list->tail;
    43e6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    43ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43ec:	601a      	str	r2, [r3, #0]
	list->tail = node;
    43ee:	6322      	str	r2, [r4, #48]	; 0x30
}
    43f0:	e7e2      	b.n	43b8 <z_impl_k_yield+0x58>
    43f2:	bf00      	nop
    43f4:	2000032c 	.word	0x2000032c
    43f8:	200000a0 	.word	0x200000a0

000043fc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    43fc:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    43fe:	3301      	adds	r3, #1
    4400:	bf08      	it	eq
    4402:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4406:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4408:	d106      	bne.n	4418 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    440a:	4b0b      	ldr	r3, [pc, #44]	; (4438 <z_impl_k_sleep+0x3c>)
    440c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    440e:	f7ff fe63 	bl	40d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4416:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    4418:	4604      	mov	r4, r0
	if (ticks == 0) {
    441a:	b948      	cbnz	r0, 4430 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    441c:	f7ff ffa0 	bl	4360 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    4420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4424:	fb84 3400 	smull	r3, r4, r4, r0
    4428:	0bd8      	lsrs	r0, r3, #15
    442a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    442e:	e7f2      	b.n	4416 <z_impl_k_sleep+0x1a>
    4430:	f7ff ff5c 	bl	42ec <z_tick_sleep.part.0>
    4434:	4604      	mov	r4, r0
    4436:	e7f3      	b.n	4420 <z_impl_k_sleep+0x24>
    4438:	2000032c 	.word	0x2000032c

0000443c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    443c:	4b01      	ldr	r3, [pc, #4]	; (4444 <z_impl_k_current_get+0x8>)
    443e:	6898      	ldr	r0, [r3, #8]
    4440:	4770      	bx	lr
    4442:	bf00      	nop
    4444:	2000032c 	.word	0x2000032c

00004448 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4448:	b538      	push	{r3, r4, r5, lr}
    444a:	4604      	mov	r4, r0
    444c:	f04f 0320 	mov.w	r3, #32
    4450:	f3ef 8511 	mrs	r5, BASEPRI
    4454:	f383 8811 	msr	BASEPRI, r3
    4458:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    445c:	f001 f810 	bl	5480 <z_unpend_first_thread>

	if (thread != NULL) {
    4460:	b148      	cbz	r0, 4476 <z_impl_k_sem_give+0x2e>
    4462:	2200      	movs	r2, #0
    4464:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4466:	f000 ffb0 	bl	53ca <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    446a:	4629      	mov	r1, r5
    446c:	4805      	ldr	r0, [pc, #20]	; (4484 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    446e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4472:	f7ff bcdf 	b.w	3e34 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4476:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    447a:	429a      	cmp	r2, r3
    447c:	bf18      	it	ne
    447e:	3301      	addne	r3, #1
    4480:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4482:	e7f2      	b.n	446a <z_impl_k_sem_give+0x22>
    4484:	20000784 	.word	0x20000784

00004488 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4488:	b537      	push	{r0, r1, r2, r4, r5, lr}
    448a:	4614      	mov	r4, r2
    448c:	461d      	mov	r5, r3
    448e:	f04f 0320 	mov.w	r3, #32
    4492:	f3ef 8111 	mrs	r1, BASEPRI
    4496:	f383 8811 	msr	BASEPRI, r3
    449a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    449e:	6883      	ldr	r3, [r0, #8]
    44a0:	b143      	cbz	r3, 44b4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    44a2:	3b01      	subs	r3, #1
    44a4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    44a6:	f381 8811 	msr	BASEPRI, r1
    44aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    44ae:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    44b0:	b003      	add	sp, #12
    44b2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    44b4:	ea54 0305 	orrs.w	r3, r4, r5
    44b8:	d106      	bne.n	44c8 <z_impl_k_sem_take+0x40>
    44ba:	f381 8811 	msr	BASEPRI, r1
    44be:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    44c2:	f06f 000f 	mvn.w	r0, #15
    44c6:	e7f3      	b.n	44b0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    44c8:	4602      	mov	r2, r0
    44ca:	e9cd 4500 	strd	r4, r5, [sp]
    44ce:	4802      	ldr	r0, [pc, #8]	; (44d8 <z_impl_k_sem_take+0x50>)
    44d0:	f7ff fef8 	bl	42c4 <z_pend_curr>
	return ret;
    44d4:	e7ec      	b.n	44b0 <z_impl_k_sem_take+0x28>
    44d6:	bf00      	nop
    44d8:	20000784 	.word	0x20000784

000044dc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    44dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    44e0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    44e4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    44e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    44ea:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    44ec:	2504      	movs	r5, #4
    44ee:	7345      	strb	r5, [r0, #13]
{
    44f0:	460f      	mov	r7, r1

	thread_base->prio = priority;
    44f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    44f4:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    44f6:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    44f8:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    44fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    44fc:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    44fe:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4502:	3720      	adds	r7, #32
	node->prev = NULL;
    4504:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4508:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    450c:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    450e:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4512:	9202      	str	r2, [sp, #8]
    4514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4516:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4518:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    451a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    451c:	9200      	str	r2, [sp, #0]
    451e:	4642      	mov	r2, r8
{
    4520:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4522:	f7fd fef1 	bl	2308 <arch_new_thread>
	if (!_current) {
    4526:	4b05      	ldr	r3, [pc, #20]	; (453c <z_setup_new_thread+0x60>)
    4528:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    452a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    452e:	b103      	cbz	r3, 4532 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    4532:	6763      	str	r3, [r4, #116]	; 0x74
}
    4534:	4640      	mov	r0, r8
    4536:	b004      	add	sp, #16
    4538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    453c:	2000032c 	.word	0x2000032c

00004540 <z_init_static_threads>:
{
    4540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4544:	4e2a      	ldr	r6, [pc, #168]	; (45f0 <z_init_static_threads+0xb0>)
    4546:	4d2b      	ldr	r5, [pc, #172]	; (45f4 <z_init_static_threads+0xb4>)
{
    4548:	b086      	sub	sp, #24
    454a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    454c:	42b5      	cmp	r5, r6
    454e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4552:	d310      	bcc.n	4576 <z_init_static_threads+0x36>
	k_sched_lock();
    4554:	f7ff fc80 	bl	3e58 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4558:	4c26      	ldr	r4, [pc, #152]	; (45f4 <z_init_static_threads+0xb4>)
    455a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 45f8 <z_init_static_threads+0xb8>
    455e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    4562:	f240 36e7 	movw	r6, #999	; 0x3e7
    4566:	2700      	movs	r7, #0
    4568:	4544      	cmp	r4, r8
    456a:	d321      	bcc.n	45b0 <z_init_static_threads+0x70>
}
    456c:	b006      	add	sp, #24
    456e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    4572:	f7ff bcc3 	b.w	3efc <k_sched_unlock>
		z_setup_new_thread(
    4576:	f854 3c04 	ldr.w	r3, [r4, #-4]
    457a:	9305      	str	r3, [sp, #20]
    457c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4580:	9304      	str	r3, [sp, #16]
    4582:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4586:	9303      	str	r3, [sp, #12]
    4588:	f854 3c18 	ldr.w	r3, [r4, #-24]
    458c:	9302      	str	r3, [sp, #8]
    458e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4592:	9301      	str	r3, [sp, #4]
    4594:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4598:	9300      	str	r3, [sp, #0]
    459a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    459e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    45a2:	f7ff ff9b 	bl	44dc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    45a6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    45aa:	65dd      	str	r5, [r3, #92]	; 0x5c
    45ac:	4625      	mov	r5, r4
    45ae:	e7cd      	b.n	454c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    45b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    45b2:	1c5a      	adds	r2, r3, #1
    45b4:	d00d      	beq.n	45d2 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    45b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    45ba:	4630      	mov	r0, r6
    45bc:	4639      	mov	r1, r7
    45be:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    45c2:	42b9      	cmp	r1, r7
    45c4:	bf08      	it	eq
    45c6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    45c8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    45ca:	d104      	bne.n	45d6 <z_init_static_threads+0x96>
	z_sched_start(thread);
    45cc:	4628      	mov	r0, r5
    45ce:	f7ff fce9 	bl	3fa4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    45d2:	3430      	adds	r4, #48	; 0x30
    45d4:	e7c8      	b.n	4568 <z_init_static_threads+0x28>
    45d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45da:	2300      	movs	r3, #0
    45dc:	f7fc f99e 	bl	91c <__aeabi_uldivmod>
    45e0:	4602      	mov	r2, r0
    45e2:	460b      	mov	r3, r1
    45e4:	f105 0018 	add.w	r0, r5, #24
    45e8:	4651      	mov	r1, sl
    45ea:	f000 f86b 	bl	46c4 <z_add_timeout>
    45ee:	e7f0      	b.n	45d2 <z_init_static_threads+0x92>
    45f0:	200000a0 	.word	0x200000a0
    45f4:	200000a0 	.word	0x200000a0
    45f8:	000053eb 	.word	0x000053eb

000045fc <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
    45fc:	b508      	push	{r3, lr}
	__asm__ volatile(
    45fe:	f04f 0320 	mov.w	r3, #32
    4602:	f3ef 8411 	mrs	r4, BASEPRI
    4606:	f383 8811 	msr	BASEPRI, r3
    460a:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    460e:	4b04      	ldr	r3, [pc, #16]	; (4620 <z_self_abort+0x24>)
    4610:	6898      	ldr	r0, [r3, #8]
    4612:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    4614:	f7ff fd60 	bl	40d8 <z_impl_k_thread_suspend>
    4618:	4620      	mov	r0, r4
    461a:	f7fd fe25 	bl	2268 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
    461e:	bf00      	nop
    4620:	2000032c 	.word	0x2000032c

00004624 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    4624:	4b03      	ldr	r3, [pc, #12]	; (4634 <elapsed+0x10>)
    4626:	681b      	ldr	r3, [r3, #0]
    4628:	b90b      	cbnz	r3, 462e <elapsed+0xa>
    462a:	f7fd bdd3 	b.w	21d4 <z_clock_elapsed>
}
    462e:	2000      	movs	r0, #0
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	2000036c 	.word	0x2000036c

00004638 <remove_timeout>:
{
    4638:	b530      	push	{r4, r5, lr}
    463a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    463c:	b168      	cbz	r0, 465a <remove_timeout+0x22>
    463e:	4a0a      	ldr	r2, [pc, #40]	; (4668 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4640:	6852      	ldr	r2, [r2, #4]
    4642:	4290      	cmp	r0, r2
    4644:	d009      	beq.n	465a <remove_timeout+0x22>
	if (next(t) != NULL) {
    4646:	b143      	cbz	r3, 465a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4648:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    464c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4650:	1912      	adds	r2, r2, r4
    4652:	eb45 0101 	adc.w	r1, r5, r1
    4656:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    465a:	6842      	ldr	r2, [r0, #4]
    465c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    465e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4660:	2300      	movs	r3, #0
	node->prev = NULL;
    4662:	e9c0 3300 	strd	r3, r3, [r0]
}
    4666:	bd30      	pop	{r4, r5, pc}
    4668:	20000044 	.word	0x20000044

0000466c <next_timeout>:

static int32_t next_timeout(void)
{
    466c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    466e:	4b13      	ldr	r3, [pc, #76]	; (46bc <next_timeout+0x50>)
    4670:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4672:	429c      	cmp	r4, r3
    4674:	bf08      	it	eq
    4676:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4678:	f7ff ffd4 	bl	4624 <elapsed>
    467c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    467e:	b1bc      	cbz	r4, 46b0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4680:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4684:	1b40      	subs	r0, r0, r5
    4686:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    468a:	2801      	cmp	r0, #1
    468c:	f171 0300 	sbcs.w	r3, r1, #0
    4690:	db11      	blt.n	46b6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4692:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4696:	2300      	movs	r3, #0
    4698:	4282      	cmp	r2, r0
    469a:	eb73 0401 	sbcs.w	r4, r3, r1
    469e:	da00      	bge.n	46a2 <next_timeout+0x36>
    46a0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    46a2:	4b07      	ldr	r3, [pc, #28]	; (46c0 <next_timeout+0x54>)
    46a4:	695b      	ldr	r3, [r3, #20]
    46a6:	b113      	cbz	r3, 46ae <next_timeout+0x42>
    46a8:	4298      	cmp	r0, r3
    46aa:	bfa8      	it	ge
    46ac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    46ae:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    46b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    46b4:	e7f5      	b.n	46a2 <next_timeout+0x36>
    46b6:	2000      	movs	r0, #0
    46b8:	e7f3      	b.n	46a2 <next_timeout+0x36>
    46ba:	bf00      	nop
    46bc:	20000044 	.word	0x20000044
    46c0:	2000032c 	.word	0x2000032c

000046c4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    46c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46c8:	9101      	str	r1, [sp, #4]
    46ca:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    46cc:	1c4b      	adds	r3, r1, #1
    46ce:	bf08      	it	eq
    46d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    46d4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    46d6:	d06c      	beq.n	47b2 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    46d8:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    46da:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    46de:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    46e2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    46e6:	ebb3 0804 	subs.w	r8, r3, r4
    46ea:	eb6b 0905 	sbc.w	r9, fp, r5
    46ee:	f1b8 0f00 	cmp.w	r8, #0
    46f2:	f179 0300 	sbcs.w	r3, r9, #0
    46f6:	db0f      	blt.n	4718 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    46f8:	f7ff ff94 	bl	4624 <elapsed>
    46fc:	4a33      	ldr	r2, [pc, #204]	; (47cc <z_add_timeout+0x108>)
    46fe:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4702:	f06f 0301 	mvn.w	r3, #1
    4706:	1a5b      	subs	r3, r3, r1
    4708:	eb6b 020c 	sbc.w	r2, fp, ip
    470c:	1b1e      	subs	r6, r3, r4
    470e:	eb62 0705 	sbc.w	r7, r2, r5
    4712:	1a34      	subs	r4, r6, r0
    4714:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	f8ca 3008 	str.w	r3, [sl, #8]
    471e:	f04f 0320 	mov.w	r3, #32
    4722:	f3ef 8611 	mrs	r6, BASEPRI
    4726:	f383 8811 	msr	BASEPRI, r3
    472a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    472e:	f7ff ff79 	bl	4624 <elapsed>
	ticks = MAX(1, ticks);
    4732:	2c01      	cmp	r4, #1
    4734:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    4738:	4b25      	ldr	r3, [pc, #148]	; (47d0 <z_add_timeout+0x10c>)
    473a:	bfb8      	it	lt
    473c:	2401      	movlt	r4, #1
    473e:	681a      	ldr	r2, [r3, #0]
    4740:	bfb8      	it	lt
    4742:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    4744:	1824      	adds	r4, r4, r0
    4746:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    474a:	429a      	cmp	r2, r3
    474c:	e9ca 4504 	strd	r4, r5, [sl, #16]
    4750:	d001      	beq.n	4756 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4752:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4754:	b952      	cbnz	r2, 476c <z_add_timeout+0xa8>
	node->prev = list->tail;
    4756:	685a      	ldr	r2, [r3, #4]
    4758:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    475c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    475e:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    4762:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    4766:	f8c3 a004 	str.w	sl, [r3, #4]
}
    476a:	e014      	b.n	4796 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    476c:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    4770:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    4774:	4544      	cmp	r4, r8
    4776:	eb75 0109 	sbcs.w	r1, r5, r9
    477a:	da1d      	bge.n	47b8 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    477c:	ebb8 0004 	subs.w	r0, r8, r4
    4780:	eb69 0105 	sbc.w	r1, r9, r5
    4784:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    4788:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    478a:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    478e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4792:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    4796:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4798:	429a      	cmp	r2, r3
    479a:	d006      	beq.n	47aa <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    479c:	4592      	cmp	sl, r2
    479e:	d104      	bne.n	47aa <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    47a0:	f7ff ff64 	bl	466c <next_timeout>
    47a4:	2100      	movs	r1, #0
    47a6:	f7fd fcaf 	bl	2108 <z_clock_set_timeout>
	__asm__ volatile(
    47aa:	f386 8811 	msr	BASEPRI, r6
    47ae:	f3bf 8f6f 	isb	sy
		}
	}
}
    47b2:	b003      	add	sp, #12
    47b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    47b8:	ebb4 0008 	subs.w	r0, r4, r8
    47bc:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    47c0:	42ba      	cmp	r2, r7
    47c2:	e9ca 0104 	strd	r0, r1, [sl, #16]
    47c6:	d0c6      	beq.n	4756 <z_add_timeout+0x92>
    47c8:	6812      	ldr	r2, [r2, #0]
    47ca:	e7c3      	b.n	4754 <z_add_timeout+0x90>
    47cc:	200001a0 	.word	0x200001a0
    47d0:	20000044 	.word	0x20000044

000047d4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    47d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47d8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    47da:	f7ff fc3b 	bl	4054 <z_time_slice>
	__asm__ volatile(
    47de:	f04f 0320 	mov.w	r3, #32
    47e2:	f3ef 8411 	mrs	r4, BASEPRI
    47e6:	f383 8811 	msr	BASEPRI, r3
    47ea:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    47ee:	4d2c      	ldr	r5, [pc, #176]	; (48a0 <z_clock_announce+0xcc>)
    47f0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 48a4 <z_clock_announce+0xd0>
	return list->head == list;
    47f4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 48a8 <z_clock_announce+0xd4>
    47f8:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    47fa:	4651      	mov	r1, sl
    47fc:	f8d5 c000 	ldr.w	ip, [r5]
    4800:	f8db 0000 	ldr.w	r0, [fp]
    4804:	4662      	mov	r2, ip
    4806:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4808:	4558      	cmp	r0, fp
    480a:	e9da 8900 	ldrd	r8, r9, [sl]
    480e:	e9cd 2300 	strd	r2, r3, [sp]
    4812:	d00d      	beq.n	4830 <z_clock_announce+0x5c>
    4814:	b160      	cbz	r0, 4830 <z_clock_announce+0x5c>
    4816:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    481a:	45b4      	cmp	ip, r6
    481c:	41bb      	sbcs	r3, r7
    481e:	da1e      	bge.n	485e <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4820:	9b00      	ldr	r3, [sp, #0]
    4822:	ebb6 0c03 	subs.w	ip, r6, r3
    4826:	9b01      	ldr	r3, [sp, #4]
    4828:	eb67 0603 	sbc.w	r6, r7, r3
    482c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    4830:	9b00      	ldr	r3, [sp, #0]
    4832:	eb13 0208 	adds.w	r2, r3, r8
    4836:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    4838:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    483c:	eb43 0309 	adc.w	r3, r3, r9
    4840:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    4844:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    4846:	f7ff ff11 	bl	466c <next_timeout>
    484a:	4631      	mov	r1, r6
    484c:	f7fd fc5c 	bl	2108 <z_clock_set_timeout>
	__asm__ volatile(
    4850:	f384 8811 	msr	BASEPRI, r4
    4854:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4858:	b003      	add	sp, #12
    485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    485e:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    4862:	f04f 0200 	mov.w	r2, #0
    4866:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    486a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    486e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4872:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4876:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    487a:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    487c:	f7ff fedc 	bl	4638 <remove_timeout>
    4880:	f384 8811 	msr	BASEPRI, r4
    4884:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4888:	6883      	ldr	r3, [r0, #8]
    488a:	4798      	blx	r3
	__asm__ volatile(
    488c:	f04f 0320 	mov.w	r3, #32
    4890:	f3ef 8411 	mrs	r4, BASEPRI
    4894:	f383 8811 	msr	BASEPRI, r3
    4898:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    489c:	4901      	ldr	r1, [pc, #4]	; (48a4 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    489e:	e7ad      	b.n	47fc <z_clock_announce+0x28>
    48a0:	2000036c 	.word	0x2000036c
    48a4:	200001a0 	.word	0x200001a0
    48a8:	20000044 	.word	0x20000044

000048ac <z_tick_get>:

int64_t z_tick_get(void)
{
    48ac:	b510      	push	{r4, lr}
    48ae:	f04f 0320 	mov.w	r3, #32
    48b2:	f3ef 8411 	mrs	r4, BASEPRI
    48b6:	f383 8811 	msr	BASEPRI, r3
    48ba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    48be:	f7fd fc89 	bl	21d4 <z_clock_elapsed>
    48c2:	4b06      	ldr	r3, [pc, #24]	; (48dc <z_tick_get+0x30>)
    48c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    48c8:	1812      	adds	r2, r2, r0
    48ca:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    48ce:	f384 8811 	msr	BASEPRI, r4
    48d2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    48d6:	4610      	mov	r0, r2
    48d8:	4619      	mov	r1, r3
    48da:	bd10      	pop	{r4, pc}
    48dc:	200001a0 	.word	0x200001a0

000048e0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    48e0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    48e2:	4c06      	ldr	r4, [pc, #24]	; (48fc <statics_init+0x1c>)
    48e4:	4d06      	ldr	r5, [pc, #24]	; (4900 <statics_init+0x20>)
    48e6:	42ac      	cmp	r4, r5
    48e8:	d301      	bcc.n	48ee <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    48ea:	2000      	movs	r0, #0
    48ec:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    48ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    48f2:	4620      	mov	r0, r4
    48f4:	f000 fe37 	bl	5566 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    48f8:	3414      	adds	r4, #20
    48fa:	e7f4      	b.n	48e6 <statics_init+0x6>
    48fc:	200000a0 	.word	0x200000a0
    4900:	200000a0 	.word	0x200000a0

00004904 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
    4904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    4906:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    490a:	2202      	movs	r2, #2
    490c:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    4910:	6883      	ldr	r3, [r0, #8]
    4912:	2201      	movs	r2, #1
    4914:	685c      	ldr	r4, [r3, #4]
    4916:	a901      	add	r1, sp, #4
    4918:	2368      	movs	r3, #104	; 0x68
    491a:	47a0      	blx	r4
}
    491c:	b004      	add	sp, #16
    491e:	bd10      	pop	{r4, pc}

00004920 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4920:	4603      	mov	r3, r0
    4922:	b158      	cbz	r0, 493c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4924:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4926:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    492a:	2a01      	cmp	r2, #1
    492c:	d003      	beq.n	4936 <sys_notify_validate+0x16>
    492e:	2a03      	cmp	r2, #3
    4930:	d104      	bne.n	493c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4932:	6802      	ldr	r2, [r0, #0]
    4934:	b112      	cbz	r2, 493c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4936:	2000      	movs	r0, #0
    4938:	6098      	str	r0, [r3, #8]
    493a:	4770      	bx	lr
		return -EINVAL;
    493c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4940:	4770      	bx	lr

00004942 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4942:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4944:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4946:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    494a:	2a03      	cmp	r2, #3
    494c:	f04f 0200 	mov.w	r2, #0
{
    4950:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4952:	bf0c      	ite	eq
    4954:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    4956:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4958:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    495a:	4770      	bx	lr

0000495c <arch_printk_char_out>:
}
    495c:	2000      	movs	r0, #0
    495e:	4770      	bx	lr

00004960 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    4960:	b40f      	push	{r0, r1, r2, r3}
    4962:	b507      	push	{r0, r1, r2, lr}
    4964:	a904      	add	r1, sp, #16
    4966:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    496a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    496c:	f7fc fa9a 	bl	ea4 <vprintk>
	}
	va_end(ap);
}
    4970:	b003      	add	sp, #12
    4972:	f85d eb04 	ldr.w	lr, [sp], #4
    4976:	b004      	add	sp, #16
    4978:	4770      	bx	lr

0000497a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    497a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    497c:	f013 0307 	ands.w	r3, r3, #7
    4980:	d105      	bne.n	498e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4982:	6803      	ldr	r3, [r0, #0]
    4984:	2b00      	cmp	r3, #0
		evt = EVT_START;
    4986:	bf0c      	ite	eq
    4988:	2000      	moveq	r0, #0
    498a:	2003      	movne	r0, #3
    498c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    498e:	2b02      	cmp	r3, #2
    4990:	d105      	bne.n	499e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4992:	8b43      	ldrh	r3, [r0, #26]
    4994:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    4996:	bf14      	ite	ne
    4998:	2000      	movne	r0, #0
    499a:	2004      	moveq	r0, #4
    499c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    499e:	2b01      	cmp	r3, #1
    49a0:	d105      	bne.n	49ae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    49a2:	6803      	ldr	r3, [r0, #0]
    49a4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    49a6:	bf0c      	ite	eq
    49a8:	2000      	moveq	r0, #0
    49aa:	2005      	movne	r0, #5
    49ac:	4770      	bx	lr
	int evt = EVT_NOP;
    49ae:	2000      	movs	r0, #0
}
    49b0:	4770      	bx	lr

000049b2 <notify_one>:
{
    49b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49b6:	460d      	mov	r5, r1
    49b8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    49ba:	4619      	mov	r1, r3
    49bc:	1d28      	adds	r0, r5, #4
{
    49be:	4690      	mov	r8, r2
    49c0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    49c2:	f7ff ffbe 	bl	4942 <sys_notify_finalize>
	if (cb) {
    49c6:	4604      	mov	r4, r0
    49c8:	b138      	cbz	r0, 49da <notify_one+0x28>
		cb(mgr, cli, state, res);
    49ca:	4633      	mov	r3, r6
    49cc:	4642      	mov	r2, r8
    49ce:	4629      	mov	r1, r5
    49d0:	4638      	mov	r0, r7
    49d2:	46a4      	mov	ip, r4
}
    49d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    49d8:	4760      	bx	ip
}
    49da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000049de <transition_complete>:
{
    49de:	b410      	push	{r4}
	__asm__ volatile(
    49e0:	f04f 0420 	mov.w	r4, #32
    49e4:	f3ef 8211 	mrs	r2, BASEPRI
    49e8:	f384 8811 	msr	BASEPRI, r4
    49ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    49f0:	6141      	str	r1, [r0, #20]
}
    49f2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    49f4:	2101      	movs	r1, #1
    49f6:	f7fc ba63 	b.w	ec0 <process_event>

000049fa <validate_args>:
{
    49fa:	b510      	push	{r4, lr}
    49fc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    49fe:	b140      	cbz	r0, 4a12 <validate_args+0x18>
    4a00:	b139      	cbz	r1, 4a12 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4a02:	1d08      	adds	r0, r1, #4
    4a04:	f7ff ff8c 	bl	4920 <sys_notify_validate>
	if ((rv == 0)
    4a08:	b928      	cbnz	r0, 4a16 <validate_args+0x1c>
	    && ((cli->notify.flags
    4a0a:	68a3      	ldr	r3, [r4, #8]
    4a0c:	f033 0303 	bics.w	r3, r3, #3
    4a10:	d001      	beq.n	4a16 <validate_args+0x1c>
		rv = -EINVAL;
    4a12:	f06f 0015 	mvn.w	r0, #21
}
    4a16:	bd10      	pop	{r4, pc}

00004a18 <onoff_manager_init>:
{
    4a18:	b538      	push	{r3, r4, r5, lr}
    4a1a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4a1c:	4605      	mov	r5, r0
    4a1e:	b158      	cbz	r0, 4a38 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4a20:	b151      	cbz	r1, 4a38 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4a22:	680b      	ldr	r3, [r1, #0]
    4a24:	b143      	cbz	r3, 4a38 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4a26:	684b      	ldr	r3, [r1, #4]
    4a28:	b133      	cbz	r3, 4a38 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4a2a:	221c      	movs	r2, #28
    4a2c:	2100      	movs	r1, #0
    4a2e:	f000 fad5 	bl	4fdc <memset>
    4a32:	612c      	str	r4, [r5, #16]
	return 0;
    4a34:	2000      	movs	r0, #0
}
    4a36:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4a38:	f06f 0015 	mvn.w	r0, #21
    4a3c:	e7fb      	b.n	4a36 <onoff_manager_init+0x1e>

00004a3e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4a3e:	b570      	push	{r4, r5, r6, lr}
    4a40:	4604      	mov	r4, r0
    4a42:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4a44:	f7ff ffd9 	bl	49fa <validate_args>

	if (rv < 0) {
    4a48:	1e05      	subs	r5, r0, #0
    4a4a:	db31      	blt.n	4ab0 <onoff_request+0x72>
    4a4c:	f04f 0320 	mov.w	r3, #32
    4a50:	f3ef 8111 	mrs	r1, BASEPRI
    4a54:	f383 8811 	msr	BASEPRI, r3
    4a58:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4a5c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a5e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4a60:	f64f 75ff 	movw	r5, #65535	; 0xffff
    4a64:	42ab      	cmp	r3, r5
    4a66:	f000 0207 	and.w	r2, r0, #7
    4a6a:	d02e      	beq.n	4aca <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4a6c:	2a02      	cmp	r2, #2
    4a6e:	d10e      	bne.n	4a8e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4a70:	3301      	adds	r3, #1
    4a72:	8363      	strh	r3, [r4, #26]
	rv = state;
    4a74:	4615      	mov	r5, r2
		notify = true;
    4a76:	2301      	movs	r3, #1
	__asm__ volatile(
    4a78:	f381 8811 	msr	BASEPRI, r1
    4a7c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4a80:	b1b3      	cbz	r3, 4ab0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4a82:	2300      	movs	r3, #0
    4a84:	4631      	mov	r1, r6
    4a86:	4620      	mov	r0, r4
    4a88:	f7ff ff93 	bl	49b2 <notify_one>
    4a8c:	e010      	b.n	4ab0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4a8e:	0783      	lsls	r3, r0, #30
    4a90:	d001      	beq.n	4a96 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4a92:	2a06      	cmp	r2, #6
    4a94:	d10e      	bne.n	4ab4 <onoff_request+0x76>
	parent->next = child;
    4a96:	2300      	movs	r3, #0
    4a98:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    4a9a:	6863      	ldr	r3, [r4, #4]
    4a9c:	b993      	cbnz	r3, 4ac4 <onoff_request+0x86>
	list->head = node;
    4a9e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    4aa2:	4615      	mov	r5, r2
    4aa4:	b962      	cbnz	r2, 4ac0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4aa6:	460a      	mov	r2, r1
    4aa8:	4620      	mov	r0, r4
    4aaa:	2102      	movs	r1, #2
    4aac:	f7fc fa08 	bl	ec0 <process_event>
		}
	}

	return rv;
}
    4ab0:	4628      	mov	r0, r5
    4ab2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4ab4:	2a05      	cmp	r2, #5
    4ab6:	bf0c      	ite	eq
    4ab8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    4abc:	f06f 0504 	mvnne.w	r5, #4
    4ac0:	2300      	movs	r3, #0
    4ac2:	e7d9      	b.n	4a78 <onoff_request+0x3a>
	parent->next = child;
    4ac4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4ac6:	6066      	str	r6, [r4, #4]
}
    4ac8:	e7eb      	b.n	4aa2 <onoff_request+0x64>
		rv = -EAGAIN;
    4aca:	f06f 050a 	mvn.w	r5, #10
    4ace:	e7f7      	b.n	4ac0 <onoff_request+0x82>

00004ad0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4ad0:	4604      	mov	r4, r0
    4ad2:	b508      	push	{r3, lr}
    4ad4:	4608      	mov	r0, r1
    4ad6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4ad8:	461a      	mov	r2, r3
    4ada:	47a0      	blx	r4
	return z_impl_k_current_get();
    4adc:	f7ff fcae 	bl	443c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4ae0:	f7fd fe1c 	bl	271c <z_impl_k_thread_abort>

00004ae4 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4ae4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4ae6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    4aee:	bf2c      	ite	cs
    4af0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    4af4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    4af8:	4770      	bx	lr

00004afa <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    4afa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    4afe:	6880      	ldr	r0, [r0, #8]
    4b00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    4b04:	bf2c      	ite	cs
    4b06:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    4b0a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    4b0e:	4770      	bx	lr

00004b10 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    4b10:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4b12:	2201      	movs	r2, #1
    4b14:	f7ff ffe6 	bl	4ae4 <chunk_field>
}
    4b18:	0840      	lsrs	r0, r0, #1
    4b1a:	bd08      	pop	{r3, pc}

00004b1c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4b1c:	6883      	ldr	r3, [r0, #8]
    4b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    4b22:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4b26:	d308      	bcc.n	4b3a <set_chunk_used+0x1e>
		if (used) {
    4b28:	684b      	ldr	r3, [r1, #4]
    4b2a:	b11a      	cbz	r2, 4b34 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4b2c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4b30:	604b      	str	r3, [r1, #4]
    4b32:	4770      	bx	lr
    4b34:	f023 0301 	bic.w	r3, r3, #1
    4b38:	e7fa      	b.n	4b30 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    4b3a:	884b      	ldrh	r3, [r1, #2]
    4b3c:	b11a      	cbz	r2, 4b46 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4b3e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4b42:	804b      	strh	r3, [r1, #2]
		}
	}
}
    4b44:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4b46:	f023 0301 	bic.w	r3, r3, #1
    4b4a:	e7fa      	b.n	4b42 <set_chunk_used+0x26>

00004b4c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4b4c:	0053      	lsls	r3, r2, #1
    4b4e:	2201      	movs	r2, #1
    4b50:	f7ff bfd3 	b.w	4afa <chunk_set>

00004b54 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4b54:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    4b56:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4b58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    4b5c:	bf2c      	ite	cs
    4b5e:	2002      	movcs	r0, #2
    4b60:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    4b62:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    4b64:	fab0 f080 	clz	r0, r0
}
    4b68:	f1c0 001f 	rsb	r0, r0, #31
    4b6c:	4770      	bx	lr

00004b6e <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b72:	4604      	mov	r4, r0
    4b74:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    4b76:	f7ff ffcb 	bl	4b10 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    4b7a:	68a3      	ldr	r3, [r4, #8]
    4b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4b80:	4601      	mov	r1, r0
    4b82:	d301      	bcc.n	4b88 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    4b84:	2801      	cmp	r0, #1
    4b86:	d035      	beq.n	4bf4 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    4b88:	4620      	mov	r0, r4
    4b8a:	f7ff ffe3 	bl	4b54 <bucket_idx>
	if (b->next == 0U) {
    4b8e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    4b92:	6916      	ldr	r6, [r2, #16]
    4b94:	b99e      	cbnz	r6, 4bbe <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    4b96:	2301      	movs	r3, #1
    4b98:	fa03 f000 	lsl.w	r0, r3, r0
    4b9c:	68e3      	ldr	r3, [r4, #12]
    4b9e:	4303      	orrs	r3, r0
    4ba0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    4ba2:	4629      	mov	r1, r5
		b->next = c;
    4ba4:	6115      	str	r5, [r2, #16]
    4ba6:	462b      	mov	r3, r5
    4ba8:	2202      	movs	r2, #2
    4baa:	4620      	mov	r0, r4
    4bac:	f7ff ffa5 	bl	4afa <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4bb0:	2203      	movs	r2, #3
    4bb2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4bb4:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    4bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bba:	f7ff bf9e 	b.w	4afa <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4bbe:	2202      	movs	r2, #2
    4bc0:	4631      	mov	r1, r6
    4bc2:	4620      	mov	r0, r4
    4bc4:	f7ff ff8e 	bl	4ae4 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    4bc8:	2202      	movs	r2, #2
    4bca:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    4bcc:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    4bce:	4629      	mov	r1, r5
    4bd0:	4620      	mov	r0, r4
    4bd2:	f7ff ff92 	bl	4afa <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4bd6:	4633      	mov	r3, r6
    4bd8:	2203      	movs	r2, #3
    4bda:	4629      	mov	r1, r5
    4bdc:	4620      	mov	r0, r4
    4bde:	f7ff ff8c 	bl	4afa <chunk_set>
    4be2:	2203      	movs	r2, #3
    4be4:	4639      	mov	r1, r7
    4be6:	462b      	mov	r3, r5
    4be8:	4620      	mov	r0, r4
    4bea:	f7ff ff86 	bl	4afa <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    4bee:	2202      	movs	r2, #2
    4bf0:	4631      	mov	r1, r6
    4bf2:	e7df      	b.n	4bb4 <free_list_add+0x46>
    4bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bf8 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    4bf8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bfe:	bf2c      	ite	cs
    4c00:	2508      	movcs	r5, #8
    4c02:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    4c04:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4c06:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4c08:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4c0a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4c0e:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    4c12:	2200      	movs	r2, #0
    4c14:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4c16:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    4c18:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4c1a:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    4c1c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4c20:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4c22:	4629      	mov	r1, r5
	h->len = buf_sz;
    4c24:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    4c26:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4c28:	4620      	mov	r0, r4
    4c2a:	f7ff ff93 	bl	4b54 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4c2e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4c30:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4c32:	1c41      	adds	r1, r0, #1
    4c34:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    4c36:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    4c3a:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    4c3c:	428b      	cmp	r3, r1
    4c3e:	db29      	blt.n	4c94 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4c40:	4632      	mov	r2, r6
    4c42:	4620      	mov	r0, r4
    4c44:	2100      	movs	r1, #0
    4c46:	f7ff ff81 	bl	4b4c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4c4a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    4c4c:	4620      	mov	r0, r4
    4c4e:	2201      	movs	r2, #1
    4c50:	2100      	movs	r1, #0
    4c52:	f7ff ff63 	bl	4b1c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    4c56:	463a      	mov	r2, r7
    4c58:	4631      	mov	r1, r6
    4c5a:	f7ff ff77 	bl	4b4c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4c5e:	4633      	mov	r3, r6
    4c60:	4631      	mov	r1, r6
    4c62:	4620      	mov	r0, r4
    4c64:	2200      	movs	r2, #0
    4c66:	f7ff ff48 	bl	4afa <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    4c6a:	4629      	mov	r1, r5
    4c6c:	4620      	mov	r0, r4
    4c6e:	2200      	movs	r2, #0
    4c70:	f7ff ff6c 	bl	4b4c <set_chunk_size>
    4c74:	463b      	mov	r3, r7
    4c76:	4629      	mov	r1, r5
    4c78:	4620      	mov	r0, r4
    4c7a:	2200      	movs	r2, #0
    4c7c:	f7ff ff3d 	bl	4afa <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    4c80:	4629      	mov	r1, r5
    4c82:	4620      	mov	r0, r4
    4c84:	2201      	movs	r2, #1
    4c86:	f7ff ff49 	bl	4b1c <set_chunk_used>

	free_list_add(h, chunk0_size);
    4c8a:	4631      	mov	r1, r6
}
    4c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    4c90:	f7ff bf6d 	b.w	4b6e <free_list_add>
		h->buckets[i].next = 0;
    4c94:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    4c98:	3301      	adds	r3, #1
    4c9a:	e7cf      	b.n	4c3c <sys_heap_init+0x44>

00004c9c <_rlrshift>:
{
    4c9c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    4c9e:	e9d0 6500 	ldrd	r6, r5, [r0]
    4ca2:	0872      	lsrs	r2, r6, #1
    4ca4:	f006 0301 	and.w	r3, r6, #1
    4ca8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    4cac:	189b      	adds	r3, r3, r2
    4cae:	f04f 0100 	mov.w	r1, #0
    4cb2:	ea4f 0455 	mov.w	r4, r5, lsr #1
    4cb6:	eb44 0101 	adc.w	r1, r4, r1
    4cba:	e9c0 3100 	strd	r3, r1, [r0]
}
    4cbe:	bd70      	pop	{r4, r5, r6, pc}

00004cc0 <_ldiv5>:
{
    4cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t v_lo = *v;
    4cc4:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    4cc8:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
    4ccc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	result += (uint64_t)v_lo * m;
    4cd0:	fba2 8901 	umull	r8, r9, r2, r1
	result = ((uint64_t)(m * 3U) << 32) | (m * 3U);
    4cd4:	461d      	mov	r5, r3
	result += (uint64_t)v_lo * m;
    4cd6:	eb18 0505 	adds.w	r5, r8, r5
	result += (uint64_t)v_hi * m;
    4cda:	fba4 4501 	umull	r4, r5, r4, r1
	result += (uint64_t)v_lo * m;
    4cde:	eb49 0603 	adc.w	r6, r9, r3
	result += (uint64_t)v_hi * m;
    4ce2:	eb18 0204 	adds.w	r2, r8, r4
	result >>= 32;
    4ce6:	f04f 0700 	mov.w	r7, #0
	result += (uint64_t)v_hi * m;
    4cea:	eb49 0105 	adc.w	r1, r9, r5
    4cee:	1992      	adds	r2, r2, r6
    4cf0:	eb47 0101 	adc.w	r1, r7, r1
	result += (uint64_t)v_hi * m;
    4cf4:	1863      	adds	r3, r4, r1
	result >>= 32;
    4cf6:	463a      	mov	r2, r7
	result += (uint64_t)v_hi * m;
    4cf8:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    4cfc:	e9c0 3200 	strd	r3, r2, [r0]
}
    4d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004d04 <_get_digit>:
	if (*digit_count > 0) {
    4d04:	680b      	ldr	r3, [r1, #0]
    4d06:	2b00      	cmp	r3, #0
{
    4d08:	b570      	push	{r4, r5, r6, lr}
    4d0a:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    4d0c:	dd0f      	ble.n	4d2e <_get_digit+0x2a>
		*fr *= 10U;
    4d0e:	6822      	ldr	r2, [r4, #0]
    4d10:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
    4d12:	3b01      	subs	r3, #1
    4d14:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    4d16:	210a      	movs	r1, #10
    4d18:	fba2 5601 	umull	r5, r6, r2, r1
    4d1c:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
    4d20:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    4d24:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    4d28:	0f30      	lsrs	r0, r6, #28
    4d2a:	3030      	adds	r0, #48	; 0x30
}
    4d2c:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    4d2e:	2030      	movs	r0, #48	; 0x30
    4d30:	e7fc      	b.n	4d2c <_get_digit+0x28>

00004d32 <encode_uint>:
{
    4d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d36:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4d38:	78d3      	ldrb	r3, [r2, #3]
{
    4d3a:	4614      	mov	r4, r2
	switch (specifier) {
    4d3c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4d3e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    4d42:	4606      	mov	r6, r0
    4d44:	460f      	mov	r7, r1
    4d46:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4d48:	d02d      	beq.n	4da6 <encode_uint+0x74>
    4d4a:	d828      	bhi.n	4d9e <encode_uint+0x6c>
		return 16;
    4d4c:	2b58      	cmp	r3, #88	; 0x58
    4d4e:	bf14      	ite	ne
    4d50:	250a      	movne	r5, #10
    4d52:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    4d54:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    4d58:	46aa      	mov	sl, r5
    4d5a:	f04f 0b00 	mov.w	fp, #0
    4d5e:	4652      	mov	r2, sl
    4d60:	465b      	mov	r3, fp
    4d62:	4630      	mov	r0, r6
    4d64:	4639      	mov	r1, r7
    4d66:	f7fb fdd9 	bl	91c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4d6a:	2a09      	cmp	r2, #9
    4d6c:	b2d3      	uxtb	r3, r2
    4d6e:	d81f      	bhi.n	4db0 <encode_uint+0x7e>
    4d70:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4d72:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4d74:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4d76:	bf08      	it	eq
    4d78:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4d7a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4d7e:	d301      	bcc.n	4d84 <encode_uint+0x52>
    4d80:	45c8      	cmp	r8, r9
    4d82:	d812      	bhi.n	4daa <encode_uint+0x78>
	if (conv->flag_hash) {
    4d84:	7823      	ldrb	r3, [r4, #0]
    4d86:	069b      	lsls	r3, r3, #26
    4d88:	d505      	bpl.n	4d96 <encode_uint+0x64>
		if (radix == 8) {
    4d8a:	2d08      	cmp	r5, #8
    4d8c:	d116      	bne.n	4dbc <encode_uint+0x8a>
			conv->altform_0 = true;
    4d8e:	78a3      	ldrb	r3, [r4, #2]
    4d90:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4d94:	70a3      	strb	r3, [r4, #2]
}
    4d96:	4640      	mov	r0, r8
    4d98:	b003      	add	sp, #12
    4d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4d9e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4da2:	2b70      	cmp	r3, #112	; 0x70
    4da4:	e7d3      	b.n	4d4e <encode_uint+0x1c>
	switch (specifier) {
    4da6:	2508      	movs	r5, #8
    4da8:	e7d4      	b.n	4d54 <encode_uint+0x22>
		value /= radix;
    4daa:	4606      	mov	r6, r0
    4dac:	460f      	mov	r7, r1
    4dae:	e7d6      	b.n	4d5e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4db0:	9a01      	ldr	r2, [sp, #4]
    4db2:	2a19      	cmp	r2, #25
    4db4:	bf94      	ite	ls
    4db6:	3337      	addls	r3, #55	; 0x37
    4db8:	3357      	addhi	r3, #87	; 0x57
    4dba:	e7da      	b.n	4d72 <encode_uint+0x40>
		} else if (radix == 16) {
    4dbc:	2d10      	cmp	r5, #16
    4dbe:	d1ea      	bne.n	4d96 <encode_uint+0x64>
			conv->altform_0c = true;
    4dc0:	78a3      	ldrb	r3, [r4, #2]
    4dc2:	f043 0310 	orr.w	r3, r3, #16
    4dc6:	e7e5      	b.n	4d94 <encode_uint+0x62>

00004dc8 <outs>:
{
    4dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dcc:	4607      	mov	r7, r0
    4dce:	4688      	mov	r8, r1
    4dd0:	4615      	mov	r5, r2
    4dd2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4dd4:	4614      	mov	r4, r2
    4dd6:	42b4      	cmp	r4, r6
    4dd8:	eba4 0005 	sub.w	r0, r4, r5
    4ddc:	d302      	bcc.n	4de4 <outs+0x1c>
    4dde:	b93e      	cbnz	r6, 4df0 <outs+0x28>
    4de0:	7823      	ldrb	r3, [r4, #0]
    4de2:	b12b      	cbz	r3, 4df0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    4de4:	f814 0b01 	ldrb.w	r0, [r4], #1
    4de8:	4641      	mov	r1, r8
    4dea:	47b8      	blx	r7
		if (rc < 0) {
    4dec:	2800      	cmp	r0, #0
    4dee:	daf2      	bge.n	4dd6 <outs+0xe>
}
    4df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004df4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4df4:	4770      	bx	lr

00004df6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4df6:	68c2      	ldr	r2, [r0, #12]
    4df8:	b2cb      	uxtb	r3, r1
    4dfa:	210c      	movs	r1, #12
    4dfc:	fb03 2101 	mla	r1, r3, r1, r2
    4e00:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    4e02:	f000 0007 	and.w	r0, r0, #7
    4e06:	4770      	bx	lr

00004e08 <set_off_state>:
	__asm__ volatile(
    4e08:	f04f 0320 	mov.w	r3, #32
    4e0c:	f3ef 8211 	mrs	r2, BASEPRI
    4e10:	f383 8811 	msr	BASEPRI, r3
    4e14:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4e18:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4e1a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4e1e:	d001      	beq.n	4e24 <set_off_state+0x1c>
    4e20:	428b      	cmp	r3, r1
    4e22:	d107      	bne.n	4e34 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4e24:	2301      	movs	r3, #1
    4e26:	6003      	str	r3, [r0, #0]
	int err = 0;
    4e28:	2000      	movs	r0, #0
	__asm__ volatile(
    4e2a:	f382 8811 	msr	BASEPRI, r2
    4e2e:	f3bf 8f6f 	isb	sy
}
    4e32:	4770      	bx	lr
		err = -EPERM;
    4e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e38:	e7f7      	b.n	4e2a <set_off_state+0x22>

00004e3a <set_starting_state>:
{
    4e3a:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e3c:	f04f 0320 	mov.w	r3, #32
    4e40:	f3ef 8211 	mrs	r2, BASEPRI
    4e44:	f383 8811 	msr	BASEPRI, r3
    4e48:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4e4c:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4e4e:	f003 0407 	and.w	r4, r3, #7
    4e52:	2c01      	cmp	r4, #1
    4e54:	d106      	bne.n	4e64 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4e56:	6001      	str	r1, [r0, #0]
	int err = 0;
    4e58:	2000      	movs	r0, #0
	__asm__ volatile(
    4e5a:	f382 8811 	msr	BASEPRI, r2
    4e5e:	f3bf 8f6f 	isb	sy
}
    4e62:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4e68:	428b      	cmp	r3, r1
		err = -EALREADY;
    4e6a:	bf14      	ite	ne
    4e6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4e70:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    4e74:	e7f1      	b.n	4e5a <set_starting_state+0x20>

00004e76 <set_on_state>:
	__asm__ volatile(
    4e76:	f04f 0320 	mov.w	r3, #32
    4e7a:	f3ef 8211 	mrs	r2, BASEPRI
    4e7e:	f383 8811 	msr	BASEPRI, r3
    4e82:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4e86:	6803      	ldr	r3, [r0, #0]
    4e88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4e8c:	f043 0302 	orr.w	r3, r3, #2
    4e90:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4e92:	f382 8811 	msr	BASEPRI, r2
    4e96:	f3bf 8f6f 	isb	sy
}
    4e9a:	4770      	bx	lr

00004e9c <onoff_started_callback>:
	return &data->mgr[type];
    4e9c:	68c0      	ldr	r0, [r0, #12]
{
    4e9e:	b410      	push	{r4}
	return &data->mgr[type];
    4ea0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4ea2:	241c      	movs	r4, #28
    4ea4:	fb03 0004 	mla	r0, r3, r4, r0
    4ea8:	2100      	movs	r1, #0
}
    4eaa:	bc10      	pop	{r4}
	notify(mgr, 0);
    4eac:	4710      	bx	r2

00004eae <blocking_start_callback>:
{
    4eae:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    4eb0:	f7ff baca 	b.w	4448 <z_impl_k_sem_give>

00004eb4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4eb4:	2000      	movs	r0, #0
    4eb6:	f7fe bb45 	b.w	3544 <nrfx_clock_stop>

00004eba <api_stop>:
{
    4eba:	b538      	push	{r3, r4, r5, lr}
    4ebc:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    4ebe:	230c      	movs	r3, #12
{
    4ec0:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    4ec2:	4363      	muls	r3, r4
    4ec4:	68c0      	ldr	r0, [r0, #12]
    4ec6:	3340      	adds	r3, #64	; 0x40
    4ec8:	2180      	movs	r1, #128	; 0x80
    4eca:	4418      	add	r0, r3
    4ecc:	f7ff ff9c 	bl	4e08 <set_off_state>
	if (err < 0) {
    4ed0:	2800      	cmp	r0, #0
    4ed2:	db05      	blt.n	4ee0 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    4ed4:	6869      	ldr	r1, [r5, #4]
    4ed6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    4eda:	6863      	ldr	r3, [r4, #4]
    4edc:	4798      	blx	r3
	return 0;
    4ede:	2000      	movs	r0, #0
}
    4ee0:	bd38      	pop	{r3, r4, r5, pc}

00004ee2 <api_start>:
{
    4ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ee6:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    4ee8:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4eea:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    4eec:	436f      	muls	r7, r5
{
    4eee:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    4ef0:	f107 0040 	add.w	r0, r7, #64	; 0x40
    4ef4:	2180      	movs	r1, #128	; 0x80
    4ef6:	4420      	add	r0, r4
{
    4ef8:	4690      	mov	r8, r2
    4efa:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    4efc:	f7ff ff9d 	bl	4e3a <set_starting_state>
	if (err < 0) {
    4f00:	2800      	cmp	r0, #0
    4f02:	db07      	blt.n	4f14 <api_start+0x32>
	subdata->cb = cb;
    4f04:	443c      	add	r4, r7
	subdata->user_data = user_data;
    4f06:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4f0a:	6873      	ldr	r3, [r6, #4]
    4f0c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    4f10:	4798      	blx	r3
	return 0;
    4f12:	2000      	movs	r0, #0
}
    4f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004f18 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4f18:	4770      	bx	lr

00004f1a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4f1a:	4770      	bx	lr

00004f1c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4f1c:	f7fd b974 	b.w	2208 <_DoInit>

00004f20 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    4f20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4f22:	f7ff fffb 	bl	4f1c <SEGGER_RTT_Init>

	return 0;
}
    4f26:	2000      	movs	r0, #0
    4f28:	bd08      	pop	{r3, pc}

00004f2a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4f2a:	2100      	movs	r1, #0
    4f2c:	2001      	movs	r0, #1
    4f2e:	f000 b800 	b.w	4f32 <z_arm_fatal_error>

00004f32 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4f32:	f000 ba01 	b.w	5338 <z_fatal_error>

00004f36 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4f36:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4f38:	6800      	ldr	r0, [r0, #0]
    4f3a:	f000 b9fd 	b.w	5338 <z_fatal_error>

00004f3e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4f3e:	b508      	push	{r3, lr}
	handler();
    4f40:	f7fd faac 	bl	249c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4f48:	f7fd baee 	b.w	2528 <z_arm_exc_exit>

00004f4c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4f4c:	3901      	subs	r1, #1
    4f4e:	4603      	mov	r3, r0
    4f50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4f54:	b90a      	cbnz	r2, 4f5a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4f56:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4f58:	4770      	bx	lr
		*d = *s;
    4f5a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4f5e:	e7f7      	b.n	4f50 <strcpy+0x4>

00004f60 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4f60:	4603      	mov	r3, r0
	size_t n = 0;
    4f62:	2000      	movs	r0, #0

	while (*s != '\0') {
    4f64:	5c1a      	ldrb	r2, [r3, r0]
    4f66:	b902      	cbnz	r2, 4f6a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4f68:	4770      	bx	lr
		n++;
    4f6a:	3001      	adds	r0, #1
    4f6c:	e7fa      	b.n	4f64 <strlen+0x4>

00004f6e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4f6e:	1e43      	subs	r3, r0, #1
    4f70:	3901      	subs	r1, #1
    4f72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4f76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4f7a:	4282      	cmp	r2, r0
    4f7c:	d101      	bne.n	4f82 <strcmp+0x14>
    4f7e:	2a00      	cmp	r2, #0
    4f80:	d1f7      	bne.n	4f72 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4f82:	1a10      	subs	r0, r2, r0
    4f84:	4770      	bx	lr

00004f86 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4f86:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4f88:	ea81 0400 	eor.w	r4, r1, r0
    4f8c:	07a5      	lsls	r5, r4, #30
    4f8e:	4603      	mov	r3, r0
    4f90:	d00b      	beq.n	4faa <memcpy+0x24>
    4f92:	3b01      	subs	r3, #1
    4f94:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4f96:	4291      	cmp	r1, r2
    4f98:	d11b      	bne.n	4fd2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4f9c:	2a00      	cmp	r2, #0
    4f9e:	d0fc      	beq.n	4f9a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
    4fa4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4fa8:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4faa:	079c      	lsls	r4, r3, #30
    4fac:	d1f6      	bne.n	4f9c <memcpy+0x16>
    4fae:	f022 0403 	bic.w	r4, r2, #3
    4fb2:	1f1d      	subs	r5, r3, #4
    4fb4:	0896      	lsrs	r6, r2, #2
    4fb6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4fb8:	42b9      	cmp	r1, r7
    4fba:	d105      	bne.n	4fc8 <memcpy+0x42>
    4fbc:	f06f 0503 	mvn.w	r5, #3
    4fc0:	fb05 2206 	mla	r2, r5, r6, r2
    4fc4:	4423      	add	r3, r4
    4fc6:	e7e4      	b.n	4f92 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4fc8:	f851 cb04 	ldr.w	ip, [r1], #4
    4fcc:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    4fd0:	e7f2      	b.n	4fb8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    4fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    4fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4fda:	e7dc      	b.n	4f96 <memcpy+0x10>

00004fdc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    4fdc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4fde:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    4fe0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4fe2:	079c      	lsls	r4, r3, #30
    4fe4:	d111      	bne.n	500a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4fe6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4fea:	f022 0603 	bic.w	r6, r2, #3
    4fee:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4ff2:	441e      	add	r6, r3
    4ff4:	0894      	lsrs	r4, r2, #2
    4ff6:	42b3      	cmp	r3, r6
    4ff8:	d10d      	bne.n	5016 <memset+0x3a>
    4ffa:	f06f 0503 	mvn.w	r5, #3
    4ffe:	fb05 2204 	mla	r2, r5, r4, r2
    5002:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5004:	4293      	cmp	r3, r2
    5006:	d109      	bne.n	501c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5008:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    500a:	2a00      	cmp	r2, #0
    500c:	d0fc      	beq.n	5008 <memset+0x2c>
		*(d_byte++) = c_byte;
    500e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5012:	3a01      	subs	r2, #1
    5014:	e7e5      	b.n	4fe2 <memset+0x6>
		*(d_word++) = c_word;
    5016:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    501a:	e7ec      	b.n	4ff6 <memset+0x1a>
		*(d_byte++) = c_byte;
    501c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5020:	e7f0      	b.n	5004 <memset+0x28>

00005022 <_stdout_hook_default>:
}
    5022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5026:	4770      	bx	lr

00005028 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    5028:	f7fd bc76 	b.w	2918 <z_impl_zephyr_fputc>

0000502c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    502c:	f7fe b90c 	b.w	3248 <SystemInit>

00005030 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    5030:	f000 001f 	and.w	r0, r0, #31
    5034:	0080      	lsls	r0, r0, #2
    5036:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    503a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    503e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5042:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5046:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    504a:	4770      	bx	lr

0000504c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    504c:	6843      	ldr	r3, [r0, #4]
    504e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5050:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5054:	600b      	str	r3, [r1, #0]
}
    5056:	2000      	movs	r0, #0
    5058:	4770      	bx	lr

0000505a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    505a:	6843      	ldr	r3, [r0, #4]
    505c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    505e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5062:	4042      	eors	r2, r0
    5064:	400a      	ands	r2, r1
    5066:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5068:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    506c:	2000      	movs	r0, #0
    506e:	4770      	bx	lr

00005070 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5070:	6843      	ldr	r3, [r0, #4]
    5072:	685b      	ldr	r3, [r3, #4]
}
    5074:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5076:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    507a:	4770      	bx	lr

0000507c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    507c:	6843      	ldr	r3, [r0, #4]
    507e:	685b      	ldr	r3, [r3, #4]
}
    5080:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5082:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5086:	4770      	bx	lr

00005088 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5088:	6843      	ldr	r3, [r0, #4]
    508a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    508c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5090:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5092:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5096:	2000      	movs	r0, #0
    5098:	4770      	bx	lr

0000509a <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    509a:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    509c:	6858      	ldr	r0, [r3, #4]
{
    509e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    50a0:	b158      	cbz	r0, 50ba <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    50a2:	2400      	movs	r4, #0
    50a4:	4281      	cmp	r1, r0
    50a6:	d113      	bne.n	50d0 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    50a8:	6808      	ldr	r0, [r1, #0]
    50aa:	b95c      	cbnz	r4, 50c4 <gpio_nrfx_manage_callback+0x2a>
    50ac:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    50ae:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    50b0:	42a1      	cmp	r1, r4
    50b2:	d100      	bne.n	50b6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    50b4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    50b6:	2000      	movs	r0, #0
    50b8:	6008      	str	r0, [r1, #0]
	if (set) {
    50ba:	b972      	cbnz	r2, 50da <gpio_nrfx_manage_callback+0x40>
	return 0;
    50bc:	2000      	movs	r0, #0
}
    50be:	bd30      	pop	{r4, r5, pc}
    50c0:	4628      	mov	r0, r5
    50c2:	e7ef      	b.n	50a4 <gpio_nrfx_manage_callback+0xa>
    50c4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    50c6:	6898      	ldr	r0, [r3, #8]
    50c8:	4281      	cmp	r1, r0
	list->tail = node;
    50ca:	bf08      	it	eq
    50cc:	609c      	streq	r4, [r3, #8]
}
    50ce:	e7f2      	b.n	50b6 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    50d0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    50d2:	4604      	mov	r4, r0
    50d4:	2d00      	cmp	r5, #0
    50d6:	d1f3      	bne.n	50c0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    50d8:	b13a      	cbz	r2, 50ea <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    50da:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    50dc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    50de:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    50e0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    50e2:	2800      	cmp	r0, #0
    50e4:	d1ea      	bne.n	50bc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    50e6:	6099      	str	r1, [r3, #8]
}
    50e8:	e7e9      	b.n	50be <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    50ea:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    50ee:	e7e6      	b.n	50be <gpio_nrfx_manage_callback+0x24>

000050f0 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    50f0:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
    50f2:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    50f4:	d405      	bmi.n	5102 <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    50f6:	f3c1 0242 	ubfx	r2, r1, #1, #3
    50fa:	2a01      	cmp	r2, #1
    50fc:	d004      	beq.n	5108 <i2c_nrfx_twi_configure+0x18>
    50fe:	2a02      	cmp	r2, #2
    5100:	d00b      	beq.n	511a <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    5102:	f06f 0015 	mvn.w	r0, #21
}
    5106:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    5108:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    510a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    510e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    5112:	68c3      	ldr	r3, [r0, #12]
	return 0;
    5114:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    5116:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    5118:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    511a:	681b      	ldr	r3, [r3, #0]
    511c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    5120:	e7f5      	b.n	510e <i2c_nrfx_twi_configure+0x1e>

00005122 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5122:	6843      	ldr	r3, [r0, #4]
    5124:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5126:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    512a:	05d2      	lsls	r2, r2, #23
    512c:	d518      	bpl.n	5160 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    512e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5132:	b1aa      	cbz	r2, 5160 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5134:	f04f 0120 	mov.w	r1, #32
    5138:	f3ef 8211 	mrs	r2, BASEPRI
    513c:	f381 8811 	msr	BASEPRI, r1
    5140:	f3bf 8f6f 	isb	sy
    5144:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5148:	b131      	cbz	r1, 5158 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    514a:	2100      	movs	r1, #0
    514c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5150:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5154:	2101      	movs	r1, #1
    5156:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5158:	f382 8811 	msr	BASEPRI, r2
    515c:	f3bf 8f6f 	isb	sy
}
    5160:	4770      	bx	lr

00005162 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5162:	68c2      	ldr	r2, [r0, #12]
{
    5164:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5166:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    516a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    516e:	2000      	movs	r0, #0
    5170:	4770      	bx	lr

00005172 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5172:	6843      	ldr	r3, [r0, #4]
    5174:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5176:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    517a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    517e:	4770      	bx	lr

00005180 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5180:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5182:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5184:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5188:	b938      	cbnz	r0, 519a <is_tx_ready+0x1a>
    518a:	7992      	ldrb	r2, [r2, #6]
    518c:	b932      	cbnz	r2, 519c <is_tx_ready+0x1c>
    518e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5192:	3800      	subs	r0, #0
    5194:	bf18      	it	ne
    5196:	2001      	movne	r0, #1
    5198:	4770      	bx	lr
    519a:	2001      	movs	r0, #1
}
    519c:	4770      	bx	lr

0000519e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    519e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    51a0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    51a8:	b148      	cbz	r0, 51be <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    51aa:	7b52      	ldrb	r2, [r2, #13]
    51ac:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51ae:	2000      	movs	r0, #0
    51b0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    51b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51b8:	2201      	movs	r2, #1
    51ba:	601a      	str	r2, [r3, #0]
	return 0;
    51bc:	4770      	bx	lr
		return -1;
    51be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    51c2:	4770      	bx	lr

000051c4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    51c4:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    51c6:	2000      	movs	r0, #0
    51c8:	f7fd fbdc 	bl	2984 <sys_arch_reboot>

000051cc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    51cc:	4700      	bx	r0

000051ce <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    51ce:	f000 b982 	b.w	54d6 <z_impl_k_busy_wait>

000051d2 <nrfx_clock_enable>:
{
    51d2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    51d4:	2000      	movs	r0, #0
    51d6:	f7fd f871 	bl	22bc <arch_irq_is_enabled>
    51da:	b918      	cbnz	r0, 51e4 <nrfx_clock_enable+0x12>
}
    51dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    51e0:	f7fd b85c 	b.w	229c <arch_irq_enable>
    51e4:	bd08      	pop	{r3, pc}

000051e6 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    51e6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    51e8:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    51ea:	6b48      	ldr	r0, [r1, #52]	; 0x34
    51ec:	4298      	cmp	r0, r3
{
    51ee:	b510      	push	{r4, lr}
    51f0:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    51f4:	d205      	bcs.n	5202 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    51f6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    51f8:	5c09      	ldrb	r1, [r1, r0]
    51fa:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    51fe:	4618      	mov	r0, r3
}
    5200:	e004      	b.n	520c <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    5202:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5206:	b110      	cbz	r0, 520e <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5208:	61d3      	str	r3, [r2, #28]
            return false;
    520a:	2000      	movs	r0, #0
}
    520c:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    520e:	6a0c      	ldr	r4, [r1, #32]
    5210:	0664      	lsls	r4, r4, #25
    5212:	d503      	bpl.n	521c <twi_send_byte+0x36>
    5214:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    5216:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    521a:	e7f7      	b.n	520c <twi_send_byte+0x26>
    521c:	6153      	str	r3, [r2, #20]
    521e:	e7ee      	b.n	51fe <twi_send_byte+0x18>

00005220 <twi_transfer>:
{
    5220:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5222:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    5226:	4604      	mov	r4, r0
    5228:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    522a:	b12e      	cbz	r6, 5238 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    522c:	2300      	movs	r3, #0
    522e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5232:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    5236:	2601      	movs	r6, #1
    if (p_cb->error)
    5238:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    523c:	b320      	cbz	r0, 5288 <twi_transfer+0x68>
    523e:	2300      	movs	r3, #0
    5240:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    5244:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    5248:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    524c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    5250:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    5254:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    5258:	2e00      	cmp	r6, #0
    525a:	d068      	beq.n	532e <twi_transfer+0x10e>
        if (!p_cb->error)
    525c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    5260:	2300      	movs	r3, #0
    5262:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    5266:	bb88      	cbnz	r0, 52cc <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    5268:	6aab      	ldr	r3, [r5, #40]	; 0x28
    526a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    526c:	429a      	cmp	r2, r3
        return false;
    526e:	bf1c      	itt	ne
    5270:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5272:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    5274:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    5278:	bf1c      	itt	ne
    527a:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    527e:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    5282:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    5286:	e022      	b.n	52ce <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5288:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    528c:	b142      	cbz	r2, 52a0 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    528e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    5292:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5296:	2301      	movs	r3, #1
    5298:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    529a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    529e:	e7db      	b.n	5258 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52a0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    52a4:	b1a3      	cbz	r3, 52d0 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52a6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    52aa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    52ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    52b0:	3301      	adds	r3, #1
    52b2:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    52b8:	b113      	cbz	r3, 52c0 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52ba:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    52be:	e7e8      	b.n	5292 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    52c0:	4629      	mov	r1, r5
    52c2:	4620      	mov	r0, r4
    52c4:	f7ff ff8f 	bl	51e6 <twi_send_byte>
    52c8:	2800      	cmp	r0, #0
    52ca:	d1c5      	bne.n	5258 <twi_transfer+0x38>
                    return false;
    52cc:	2000      	movs	r0, #0
}
    52ce:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52d0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    52d4:	2a00      	cmp	r2, #0
    52d6:	d0bf      	beq.n	5258 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52d8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    52dc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52e0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    52e4:	b112      	cbz	r2, 52ec <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    52ea:	e7d2      	b.n	5292 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    52ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    52ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    52f0:	4293      	cmp	r3, r2
    52f2:	d2b1      	bcs.n	5258 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    52f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    52f6:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    52fa:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    52fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    52fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    5300:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5302:	1e51      	subs	r1, r2, #1
    5304:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    5306:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5308:	d108      	bne.n	531c <twi_transfer+0xfc>
    530a:	6a29      	ldr	r1, [r5, #32]
    530c:	0649      	lsls	r1, r1, #25
    530e:	d410      	bmi.n	5332 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    5310:	2302      	movs	r3, #2
    5312:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5316:	2301      	movs	r3, #1
    5318:	6223      	str	r3, [r4, #32]
    531a:	e79d      	b.n	5258 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    531c:	4293      	cmp	r3, r2
    531e:	d1fa      	bne.n	5316 <twi_transfer+0xf6>
    5320:	6a2b      	ldr	r3, [r5, #32]
    5322:	065b      	lsls	r3, r3, #25
    5324:	d598      	bpl.n	5258 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    5326:	2302      	movs	r3, #2
    5328:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    532c:	e7cf      	b.n	52ce <twi_transfer+0xae>
    return true;
    532e:	2001      	movs	r0, #1
    5330:	e7cd      	b.n	52ce <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5332:	4293      	cmp	r3, r2
    5334:	d1ef      	bne.n	5316 <twi_transfer+0xf6>
    5336:	e7f6      	b.n	5326 <twi_transfer+0x106>

00005338 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533a:	4605      	mov	r5, r0
    533c:	460e      	mov	r6, r1
	__asm__ volatile(
    533e:	f04f 0320 	mov.w	r3, #32
    5342:	f3ef 8711 	mrs	r7, BASEPRI
    5346:	f383 8811 	msr	BASEPRI, r3
    534a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    534e:	f7ff f875 	bl	443c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5352:	4631      	mov	r1, r6
    5354:	4604      	mov	r4, r0
    5356:	4628      	mov	r0, r5
    5358:	f7ff ff34 	bl	51c4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    535c:	f387 8811 	msr	BASEPRI, r7
    5360:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5364:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    5366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    536a:	f7fd b9d7 	b.w	271c <z_impl_k_thread_abort>

0000536e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    536e:	f7ff bdd4 	b.w	4f1a <z_clock_idle_exit>

00005372 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5372:	4603      	mov	r3, r0
    5374:	b920      	cbnz	r0, 5380 <z_reschedule_irqlock+0xe>
    5376:	f3ef 8205 	mrs	r2, IPSR
    537a:	b90a      	cbnz	r2, 5380 <z_reschedule_irqlock+0xe>
    537c:	f7fc bf74 	b.w	2268 <arch_swap>
    5380:	f383 8811 	msr	BASEPRI, r3
    5384:	f3bf 8f6f 	isb	sy
}
    5388:	4770      	bx	lr

0000538a <z_reschedule_unlocked>:
	__asm__ volatile(
    538a:	f04f 0320 	mov.w	r3, #32
    538e:	f3ef 8011 	mrs	r0, BASEPRI
    5392:	f383 8811 	msr	BASEPRI, r3
    5396:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    539a:	f7ff bfea 	b.w	5372 <z_reschedule_irqlock>

0000539e <unpend_thread_no_timeout>:
{
    539e:	4601      	mov	r1, r0
    53a0:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    53a2:	6880      	ldr	r0, [r0, #8]
    53a4:	f7fe fd6c 	bl	3e80 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    53a8:	7b4b      	ldrb	r3, [r1, #13]
    53aa:	f023 0302 	bic.w	r3, r3, #2
    53ae:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    53b0:	2300      	movs	r3, #0
    53b2:	608b      	str	r3, [r1, #8]
}
    53b4:	bd08      	pop	{r3, pc}

000053b6 <z_priq_dumb_best>:
{
    53b6:	4603      	mov	r3, r0
	return list->head == list;
    53b8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53ba:	4283      	cmp	r3, r0
    53bc:	d003      	beq.n	53c6 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    53be:	2800      	cmp	r0, #0
    53c0:	bf38      	it	cc
    53c2:	2000      	movcc	r0, #0
    53c4:	4770      	bx	lr
	struct k_thread *thread = NULL;
    53c6:	2000      	movs	r0, #0
}
    53c8:	4770      	bx	lr

000053ca <z_ready_thread>:
{
    53ca:	b510      	push	{r4, lr}
    53cc:	f04f 0320 	mov.w	r3, #32
    53d0:	f3ef 8411 	mrs	r4, BASEPRI
    53d4:	f383 8811 	msr	BASEPRI, r3
    53d8:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    53dc:	f7fe fdaa 	bl	3f34 <ready_thread>
	__asm__ volatile(
    53e0:	f384 8811 	msr	BASEPRI, r4
    53e4:	f3bf 8f6f 	isb	sy
}
    53e8:	bd10      	pop	{r4, pc}

000053ea <z_thread_timeout>:
{
    53ea:	b570      	push	{r4, r5, r6, lr}
    53ec:	4604      	mov	r4, r0
	__asm__ volatile(
    53ee:	f04f 0320 	mov.w	r3, #32
    53f2:	f3ef 8611 	mrs	r6, BASEPRI
    53f6:	f383 8811 	msr	BASEPRI, r3
    53fa:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    53fe:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    5402:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    5406:	b113      	cbz	r3, 540e <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    5408:	4628      	mov	r0, r5
    540a:	f7ff ffc8 	bl	539e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    540e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5412:	f023 0314 	bic.w	r3, r3, #20
    5416:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    541a:	4628      	mov	r0, r5
    541c:	f7fe fd8a 	bl	3f34 <ready_thread>
	__asm__ volatile(
    5420:	f386 8811 	msr	BASEPRI, r6
    5424:	f3bf 8f6f 	isb	sy
}
    5428:	bd70      	pop	{r4, r5, r6, pc}

0000542a <add_to_waitq_locked>:
{
    542a:	b538      	push	{r3, r4, r5, lr}
    542c:	4604      	mov	r4, r0
    542e:	460d      	mov	r5, r1
	unready_thread(thread);
    5430:	f7fe ff08 	bl	4244 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5434:	7b63      	ldrb	r3, [r4, #13]
    5436:	f043 0302 	orr.w	r3, r3, #2
    543a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    543c:	b1c5      	cbz	r5, 5470 <add_to_waitq_locked+0x46>
	return list->head == list;
    543e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    5440:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5442:	429d      	cmp	r5, r3
    5444:	bf08      	it	eq
    5446:	2300      	moveq	r3, #0
    5448:	2b00      	cmp	r3, #0
    544a:	bf38      	it	cc
    544c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    544e:	b183      	cbz	r3, 5472 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    5450:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5454:	f993 200e 	ldrsb.w	r2, [r3, #14]
    5458:	4291      	cmp	r1, r2
    545a:	db04      	blt.n	5466 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    545c:	686a      	ldr	r2, [r5, #4]
    545e:	429a      	cmp	r2, r3
    5460:	d007      	beq.n	5472 <add_to_waitq_locked+0x48>
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	e7f3      	b.n	544e <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    5466:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5468:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    546c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    546e:	605c      	str	r4, [r3, #4]
}
    5470:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    5472:	686b      	ldr	r3, [r5, #4]
    5474:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    5476:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    5478:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    547a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    547c:	606c      	str	r4, [r5, #4]
    547e:	e7f7      	b.n	5470 <add_to_waitq_locked+0x46>

00005480 <z_unpend_first_thread>:
{
    5480:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5482:	f04f 0320 	mov.w	r3, #32
    5486:	f3ef 8211 	mrs	r2, BASEPRI
    548a:	f383 8811 	msr	BASEPRI, r3
    548e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5492:	f7ff ff90 	bl	53b6 <z_priq_dumb_best>
    5496:	4604      	mov	r4, r0
	__asm__ volatile(
    5498:	f382 8811 	msr	BASEPRI, r2
    549c:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    54a0:	b188      	cbz	r0, 54c6 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    54a2:	f04f 0320 	mov.w	r3, #32
    54a6:	f3ef 8511 	mrs	r5, BASEPRI
    54aa:	f383 8811 	msr	BASEPRI, r3
    54ae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    54b2:	f7ff ff74 	bl	539e <unpend_thread_no_timeout>
	__asm__ volatile(
    54b6:	f385 8811 	msr	BASEPRI, r5
    54ba:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    54be:	f104 0018 	add.w	r0, r4, #24
    54c2:	f000 f80c 	bl	54de <z_abort_timeout>
}
    54c6:	4620      	mov	r0, r4
    54c8:	bd38      	pop	{r3, r4, r5, pc}

000054ca <k_is_in_isr>:
    54ca:	f3ef 8005 	mrs	r0, IPSR
}
    54ce:	3800      	subs	r0, #0
    54d0:	bf18      	it	ne
    54d2:	2001      	movne	r0, #1
    54d4:	4770      	bx	lr

000054d6 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    54d6:	b108      	cbz	r0, 54dc <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    54d8:	f7fd ba6a 	b.w	29b0 <arch_busy_wait>
}
    54dc:	4770      	bx	lr

000054de <z_abort_timeout>:
{
    54de:	b510      	push	{r4, lr}
	__asm__ volatile(
    54e0:	f04f 0220 	mov.w	r2, #32
    54e4:	f3ef 8411 	mrs	r4, BASEPRI
    54e8:	f382 8811 	msr	BASEPRI, r2
    54ec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    54f0:	6803      	ldr	r3, [r0, #0]
    54f2:	b13b      	cbz	r3, 5504 <z_abort_timeout+0x26>
			remove_timeout(to);
    54f4:	f7ff f8a0 	bl	4638 <remove_timeout>
			ret = 0;
    54f8:	2000      	movs	r0, #0
	__asm__ volatile(
    54fa:	f384 8811 	msr	BASEPRI, r4
    54fe:	f3bf 8f6f 	isb	sy
}
    5502:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    5504:	f06f 0015 	mvn.w	r0, #21
    5508:	e7f7      	b.n	54fa <z_abort_timeout+0x1c>

0000550a <z_get_next_timeout_expiry>:
{
    550a:	b510      	push	{r4, lr}
	__asm__ volatile(
    550c:	f04f 0320 	mov.w	r3, #32
    5510:	f3ef 8411 	mrs	r4, BASEPRI
    5514:	f383 8811 	msr	BASEPRI, r3
    5518:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    551c:	f7ff f8a6 	bl	466c <next_timeout>
	__asm__ volatile(
    5520:	f384 8811 	msr	BASEPRI, r4
    5524:	f3bf 8f6f 	isb	sy
}
    5528:	bd10      	pop	{r4, pc}

0000552a <z_set_timeout_expiry>:
{
    552a:	b570      	push	{r4, r5, r6, lr}
    552c:	4604      	mov	r4, r0
    552e:	460d      	mov	r5, r1
	__asm__ volatile(
    5530:	f04f 0320 	mov.w	r3, #32
    5534:	f3ef 8611 	mrs	r6, BASEPRI
    5538:	f383 8811 	msr	BASEPRI, r3
    553c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    5540:	f7ff f894 	bl	466c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5544:	2801      	cmp	r0, #1
    5546:	dd05      	ble.n	5554 <z_set_timeout_expiry+0x2a>
    5548:	42a0      	cmp	r0, r4
    554a:	dd03      	ble.n	5554 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    554c:	4629      	mov	r1, r5
    554e:	4620      	mov	r0, r4
    5550:	f7fc fdda 	bl	2108 <z_clock_set_timeout>
	__asm__ volatile(
    5554:	f386 8811 	msr	BASEPRI, r6
    5558:	f3bf 8f6f 	isb	sy
}
    555c:	bd70      	pop	{r4, r5, r6, pc}

0000555e <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    555e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    5560:	f7ff f9a4 	bl	48ac <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5564:	bd08      	pop	{r3, pc}

00005566 <k_heap_init>:
{
    5566:	b410      	push	{r4}
    5568:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    556c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    5570:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    5572:	f7ff bb41 	b.w	4bf8 <sys_heap_init>

00005576 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    5576:	4770      	bx	lr
